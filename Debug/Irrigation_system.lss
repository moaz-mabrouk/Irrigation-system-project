
Irrigation_system.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000317a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  0000317a  0000320e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800078  00800078  00003226  2**0
                  ALLOC
  3 .stab         00004458  00000000  00000000  00003228  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002a13  00000000  00000000  00007680  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000a093  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000a1d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000a343  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000bf8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000ce77  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000dc24  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000dd84  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000e011  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e7df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 87 08 	jmp	0x110e	; 0x110e <__vector_10>
      2c:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1f 18 	call	0x303e	; 0x303e <main>
      8a:	0c 94 bb 18 	jmp	0x3176	; 0x3176 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 84 18 	jmp	0x3108	; 0x3108 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a0 18 	jmp	0x3140	; 0x3140 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 90 18 	jmp	0x3120	; 0x3120 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 ac 18 	jmp	0x3158	; 0x3158 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 94 18 	jmp	0x3128	; 0x3128 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b0 18 	jmp	0x3160	; 0x3160 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <WDTCR_vdEnable>:


/*****************************************************************/
/*			Enable WDT and set period to 16.3 Ms				 */
/*****************************************************************/
void WDTCR_vdEnable(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(WDTCR,WDTCR_WDE);
     b4e:	a1 e4       	ldi	r26, 0x41	; 65
     b50:	b0 e0       	ldi	r27, 0x00	; 0
     b52:	e1 e4       	ldi	r30, 0x41	; 65
     b54:	f0 e0       	ldi	r31, 0x00	; 0
     b56:	80 81       	ld	r24, Z
     b58:	88 60       	ori	r24, 0x08	; 8
     b5a:	8c 93       	st	X, r24
}
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <WDTCR_vdSetTime>:

/*****************************************************************/
/*			Enable WDT and set predefined period				 */
/*****************************************************************/
void WDTCR_vdSetTime(enum_time Copy_enuTimeTime){
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	0f 92       	push	r0
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
     b6c:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(WDTCR,WDTCR_WDE);
     b6e:	a1 e4       	ldi	r26, 0x41	; 65
     b70:	b0 e0       	ldi	r27, 0x00	; 0
     b72:	e1 e4       	ldi	r30, 0x41	; 65
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	80 81       	ld	r24, Z
     b78:	88 60       	ori	r24, 0x08	; 8
     b7a:	8c 93       	st	X, r24
	WDTCR &=  ~(  (1<<WDTCR_WDP0)|(1<<WDTCR_WDP1)|(1<<WDTCR_WDP2)  );
     b7c:	a1 e4       	ldi	r26, 0x41	; 65
     b7e:	b0 e0       	ldi	r27, 0x00	; 0
     b80:	e1 e4       	ldi	r30, 0x41	; 65
     b82:	f0 e0       	ldi	r31, 0x00	; 0
     b84:	80 81       	ld	r24, Z
     b86:	88 7f       	andi	r24, 0xF8	; 248
     b88:	8c 93       	st	X, r24
	WDTCR|=Copy_enuTimeTime;
     b8a:	a1 e4       	ldi	r26, 0x41	; 65
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	e1 e4       	ldi	r30, 0x41	; 65
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	90 81       	ld	r25, Z
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	89 2b       	or	r24, r25
     b98:	8c 93       	st	X, r24
}
     b9a:	0f 90       	pop	r0
     b9c:	cf 91       	pop	r28
     b9e:	df 91       	pop	r29
     ba0:	08 95       	ret

00000ba2 <WDTCR_vdSleep>:

/*****************************************************************/
/*				Disable WDT (make it sleep)								  */
/*****************************************************************/
void WDTCR_vdSleep(void){
     ba2:	df 93       	push	r29
     ba4:	cf 93       	push	r28
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
	WDTCR |= (1<<WDTCR_WDE)|(1<<WDTCR_WDTOE);
     baa:	a1 e4       	ldi	r26, 0x41	; 65
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	e1 e4       	ldi	r30, 0x41	; 65
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	88 61       	ori	r24, 0x18	; 24
     bb6:	8c 93       	st	X, r24
}
     bb8:	cf 91       	pop	r28
     bba:	df 91       	pop	r29
     bbc:	08 95       	ret

00000bbe <USART_vdInit>:
#include "USART_register.h"
#include "USART_interface.h"
#include "USART_config.h"


void USART_vdInit(void){
     bbe:	df 93       	push	r29
     bc0:	cf 93       	push	r28
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62

	UBRRL=51;
     bc6:	e9 e2       	ldi	r30, 0x29	; 41
     bc8:	f0 e0       	ldi	r31, 0x00	; 0
     bca:	83 e3       	ldi	r24, 0x33	; 51
     bcc:	80 83       	st	Z, r24

	UCSRC=0|(1<<UCSRC_URSEL) | (1<<UCSRC_UCSZ1) | (1<<UCSRC_UCSZ0);
     bce:	e0 e4       	ldi	r30, 0x40	; 64
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	86 e8       	ldi	r24, 0x86	; 134
     bd4:	80 83       	st	Z, r24
//	CLR_BIT(UCSRC,UCSRC_USBS);

	/*character size 8 bit */
//	SET_BIT(UCSRC,UCSRC_UCSZ1);
//	SET_BIT(UCSRC,UCSRC_UCSZ0);
	CLR_BIT(UCSRB,UCSRB_UCSZ2);
     bd6:	aa e2       	ldi	r26, 0x2A	; 42
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	ea e2       	ldi	r30, 0x2A	; 42
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	8b 7f       	andi	r24, 0xFB	; 251
     be2:	8c 93       	st	X, r24

	/*baud rate */
//	CLR_BIT(UBRRH,UBRRH_URSEL);

	/*rx tx enable */
		SET_BIT(UCSRB,UCSRB_RXEN);
     be4:	aa e2       	ldi	r26, 0x2A	; 42
     be6:	b0 e0       	ldi	r27, 0x00	; 0
     be8:	ea e2       	ldi	r30, 0x2A	; 42
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	80 81       	ld	r24, Z
     bee:	80 61       	ori	r24, 0x10	; 16
     bf0:	8c 93       	st	X, r24
		SET_BIT(UCSRB,UCSRB_TXEN);
     bf2:	aa e2       	ldi	r26, 0x2A	; 42
     bf4:	b0 e0       	ldi	r27, 0x00	; 0
     bf6:	ea e2       	ldi	r30, 0x2A	; 42
     bf8:	f0 e0       	ldi	r31, 0x00	; 0
     bfa:	80 81       	ld	r24, Z
     bfc:	88 60       	ori	r24, 0x08	; 8
     bfe:	8c 93       	st	X, r24

}
     c00:	cf 91       	pop	r28
     c02:	df 91       	pop	r29
     c04:	08 95       	ret

00000c06 <USART_vdSend>:
void USART_vdSend(u8 Copy_u8Data){
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	0f 92       	push	r0
     c0c:	cd b7       	in	r28, 0x3d	; 61
     c0e:	de b7       	in	r29, 0x3e	; 62
     c10:	89 83       	std	Y+1, r24	; 0x01
	while (GET_BIT(UCSRA,UCSRA_UDRE)==0);
     c12:	eb e2       	ldi	r30, 0x2B	; 43
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	82 95       	swap	r24
     c1a:	86 95       	lsr	r24
     c1c:	87 70       	andi	r24, 0x07	; 7
     c1e:	88 2f       	mov	r24, r24
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	81 70       	andi	r24, 0x01	; 1
     c24:	90 70       	andi	r25, 0x00	; 0
     c26:	00 97       	sbiw	r24, 0x00	; 0
     c28:	a1 f3       	breq	.-24     	; 0xc12 <USART_vdSend+0xc>
		UDR=Copy_u8Data;
     c2a:	ec e2       	ldi	r30, 0x2C	; 44
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	89 81       	ldd	r24, Y+1	; 0x01
     c30:	80 83       	st	Z, r24

}
     c32:	0f 90       	pop	r0
     c34:	cf 91       	pop	r28
     c36:	df 91       	pop	r29
     c38:	08 95       	ret

00000c3a <USART_vdRecieve>:
u8 USART_vdRecieve(void){
     c3a:	df 93       	push	r29
     c3c:	cf 93       	push	r28
     c3e:	0f 92       	push	r0
     c40:	cd b7       	in	r28, 0x3d	; 61
     c42:	de b7       	in	r29, 0x3e	; 62
	u8 Copy_u8Data=0;
     c44:	19 82       	std	Y+1, r1	; 0x01
	while (GET_BIT(UCSRA,UCSRA_RXC)==0);
     c46:	eb e2       	ldi	r30, 0x2B	; 43
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	80 81       	ld	r24, Z
     c4c:	88 23       	and	r24, r24
     c4e:	dc f7       	brge	.-10     	; 0xc46 <USART_vdRecieve+0xc>
	Copy_u8Data=UDR;
     c50:	ec e2       	ldi	r30, 0x2C	; 44
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	80 81       	ld	r24, Z
     c56:	89 83       	std	Y+1, r24	; 0x01

	return Copy_u8Data;
     c58:	89 81       	ldd	r24, Y+1	; 0x01
}
     c5a:	0f 90       	pop	r0
     c5c:	cf 91       	pop	r28
     c5e:	df 91       	pop	r29
     c60:	08 95       	ret

00000c62 <TIMER1_vdState>:
#include "TIMER1_interface.h"

/*****************************************************************/
/*			Enable /Disable timer1 and select clock source		 */
/*****************************************************************/
void TIMER1_vdState(enum_ClockT1 	Copy_enuClock){
     c62:	df 93       	push	r29
     c64:	cf 93       	push	r28
     c66:	0f 92       	push	r0
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B &=~ ((1<<TCCR1B_CS10)		|	(1<<TCCR1B_CS11)		|	(1<<TCCR1B_CS12))	;
     c6e:	ae e4       	ldi	r26, 0x4E	; 78
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	ee e4       	ldi	r30, 0x4E	; 78
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	88 7f       	andi	r24, 0xF8	; 248
     c7a:	8c 93       	st	X, r24
	TCCR1B |=(Copy_enuClock  & ((1<<TCCR1B_CS10)		|	(1<<TCCR1B_CS11)		|	(1<<TCCR1B_CS12))	 );
     c7c:	ae e4       	ldi	r26, 0x4E	; 78
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	ee e4       	ldi	r30, 0x4E	; 78
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	98 2f       	mov	r25, r24
     c88:	89 81       	ldd	r24, Y+1	; 0x01
     c8a:	87 70       	andi	r24, 0x07	; 7
     c8c:	89 2b       	or	r24, r25
     c8e:	8c 93       	st	X, r24
}
     c90:	0f 90       	pop	r0
     c92:	cf 91       	pop	r28
     c94:	df 91       	pop	r29
     c96:	08 95       	ret

00000c98 <TIMER1_vdInit>:
/*****************************************************************/
/*			Select wave type and compare output mode 			 */
/*****************************************************************/
void TIMER1_vdInit(enum_waveT1  	Copy_enuWave,  enum_comT1  	Copy_enuCom ){
     c98:	df 93       	push	r29
     c9a:	cf 93       	push	r28
     c9c:	00 d0       	rcall	.+0      	; 0xc9e <TIMER1_vdInit+0x6>
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	6a 83       	std	Y+2, r22	; 0x02

	/*Assign wave generation mode bits in TCCR1A register */
	TCCR1A &= ~ ((1<<TCCR1A_WGM10)	|	(1<<TCCR1A_WGM11));
     ca6:	af e4       	ldi	r26, 0x4F	; 79
     ca8:	b0 e0       	ldi	r27, 0x00	; 0
     caa:	ef e4       	ldi	r30, 0x4F	; 79
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	80 81       	ld	r24, Z
     cb0:	8c 7f       	andi	r24, 0xFC	; 252
     cb2:	8c 93       	st	X, r24
	TCCR1A   |= (Copy_enuWave & ((1<<TCCR1A_WGM10)		|	(1<<TCCR1A_WGM11)));
     cb4:	af e4       	ldi	r26, 0x4F	; 79
     cb6:	b0 e0       	ldi	r27, 0x00	; 0
     cb8:	ef e4       	ldi	r30, 0x4F	; 79
     cba:	f0 e0       	ldi	r31, 0x00	; 0
     cbc:	80 81       	ld	r24, Z
     cbe:	98 2f       	mov	r25, r24
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	83 70       	andi	r24, 0x03	; 3
     cc4:	89 2b       	or	r24, r25
     cc6:	8c 93       	st	X, r24

	/*Assign wave generation mode bits in TCCR1B register */
	TCCR1B &= ~ ((1<<TCCR1B_WGM12)		|	(1<<TCCR1B_WGM13));
     cc8:	ae e4       	ldi	r26, 0x4E	; 78
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	ee e4       	ldi	r30, 0x4E	; 78
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	87 7e       	andi	r24, 0xE7	; 231
     cd4:	8c 93       	st	X, r24
	TCCR1B   |= (Copy_enuWave & ((1<<TCCR1B_WGM12)	|	(1<<TCCR1B_WGM13)));
     cd6:	ae e4       	ldi	r26, 0x4E	; 78
     cd8:	b0 e0       	ldi	r27, 0x00	; 0
     cda:	ee e4       	ldi	r30, 0x4E	; 78
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	80 81       	ld	r24, Z
     ce0:	98 2f       	mov	r25, r24
     ce2:	89 81       	ldd	r24, Y+1	; 0x01
     ce4:	88 71       	andi	r24, 0x18	; 24
     ce6:	89 2b       	or	r24, r25
     ce8:	8c 93       	st	X, r24

	/*Assign Compare output mode bits in TCCR1A register */
	TCCR1A &= ~((1<<TCCR1A_COM1A0)	|	(1<<TCCR1A_COM1A1)	|	(1<<TCCR1A_COM1B0)	|	(1<<TCCR1A_COM1B1));
     cea:	af e4       	ldi	r26, 0x4F	; 79
     cec:	b0 e0       	ldi	r27, 0x00	; 0
     cee:	ef e4       	ldi	r30, 0x4F	; 79
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	8f 70       	andi	r24, 0x0F	; 15
     cf6:	8c 93       	st	X, r24
	TCCR1A |= (Copy_enuCom & ((1<<TCCR1A_COM1A0)	|	(1<<TCCR1A_COM1A1)	|	(1<<TCCR1A_COM1B0)	|	(1<<TCCR1A_COM1B1)) );
     cf8:	af e4       	ldi	r26, 0x4F	; 79
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	ef e4       	ldi	r30, 0x4F	; 79
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	80 81       	ld	r24, Z
     d02:	98 2f       	mov	r25, r24
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	80 7f       	andi	r24, 0xF0	; 240
     d08:	89 2b       	or	r24, r25
     d0a:	8c 93       	st	X, r24

}
     d0c:	0f 90       	pop	r0
     d0e:	0f 90       	pop	r0
     d10:	cf 91       	pop	r28
     d12:	df 91       	pop	r29
     d14:	08 95       	ret

00000d16 <TIMER1_vdInterruptEnable>:
/*****************************************************************/
/*			Enable interrupts for overflow and compare match */
/*****************************************************************/
void TIMER1_vdInterruptEnable(enum_InterruptStateT1 	Copy_enuInterruptState){
     d16:	df 93       	push	r29
     d18:	cf 93       	push	r28
     d1a:	0f 92       	push	r0
     d1c:	cd b7       	in	r28, 0x3d	; 61
     d1e:	de b7       	in	r29, 0x3e	; 62
     d20:	89 83       	std	Y+1, r24	; 0x01
	TIMSK |= (Copy_enuInterruptState & ((1<<TIMSK_OCIE1A)	|	(1<<TIMSK_OCIE1B)		|	(1<<TIMSK_TICIE1)	|	(1<<TIMSK_TOIE1)) );
     d22:	a9 e5       	ldi	r26, 0x59	; 89
     d24:	b0 e0       	ldi	r27, 0x00	; 0
     d26:	e9 e5       	ldi	r30, 0x59	; 89
     d28:	f0 e0       	ldi	r31, 0x00	; 0
     d2a:	80 81       	ld	r24, Z
     d2c:	98 2f       	mov	r25, r24
     d2e:	89 81       	ldd	r24, Y+1	; 0x01
     d30:	8c 73       	andi	r24, 0x3C	; 60
     d32:	89 2b       	or	r24, r25
     d34:	8c 93       	st	X, r24
}
     d36:	0f 90       	pop	r0
     d38:	cf 91       	pop	r28
     d3a:	df 91       	pop	r29
     d3c:	08 95       	ret

00000d3e <TIMER1_vdInterruptDisable>:
/*****************************************************************/
/*		Disable interrupts for overflow and compare match	 */
/*****************************************************************/
void TIMER1_vdInterruptDisable(enum_InterruptStateT1 Copy_enuInterruptState){
     d3e:	df 93       	push	r29
     d40:	cf 93       	push	r28
     d42:	0f 92       	push	r0
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
     d48:	89 83       	std	Y+1, r24	; 0x01
	TIMSK &= ~(Copy_enuInterruptState & ((1<<TIMSK_OCIE1A)	|	(1<<TIMSK_OCIE1B)		|	(1<<TIMSK_TICIE1)	|	(1<<TIMSK_TOIE1)) );
     d4a:	a9 e5       	ldi	r26, 0x59	; 89
     d4c:	b0 e0       	ldi	r27, 0x00	; 0
     d4e:	e9 e5       	ldi	r30, 0x59	; 89
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	80 81       	ld	r24, Z
     d54:	98 2f       	mov	r25, r24
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	8c 73       	andi	r24, 0x3C	; 60
     d5a:	80 95       	com	r24
     d5c:	89 23       	and	r24, r25
     d5e:	8c 93       	st	X, r24
}
     d60:	0f 90       	pop	r0
     d62:	cf 91       	pop	r28
     d64:	df 91       	pop	r29
     d66:	08 95       	ret

00000d68 <TIMER1_vdPreloading>:
/*****************************************************************/
/*			Preloading value to timer0 register 		 		 			 */
/*****************************************************************/
void TIMER1_vdPreloading(u16 Copy_u16Value){
     d68:	df 93       	push	r29
     d6a:	cf 93       	push	r28
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <TIMER1_vdPreloading+0x6>
     d6e:	cd b7       	in	r28, 0x3d	; 61
     d70:	de b7       	in	r29, 0x3e	; 62
     d72:	9a 83       	std	Y+2, r25	; 0x02
     d74:	89 83       	std	Y+1, r24	; 0x01
	TCNT1L=Copy_u16Value;
     d76:	ec e4       	ldi	r30, 0x4C	; 76
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	80 83       	st	Z, r24
}
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
     d82:	cf 91       	pop	r28
     d84:	df 91       	pop	r29
     d86:	08 95       	ret

00000d88 <TIMER1_vdSetICRA>:
/*****************************************************************/
/*			Set ICR value 															 */
/*****************************************************************/
void TIMER1_vdSetICRA(u16 Copy_u16Value){
     d88:	df 93       	push	r29
     d8a:	cf 93       	push	r28
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <TIMER1_vdSetICRA+0x6>
     d8e:	cd b7       	in	r28, 0x3d	; 61
     d90:	de b7       	in	r29, 0x3e	; 62
     d92:	9a 83       	std	Y+2, r25	; 0x02
     d94:	89 83       	std	Y+1, r24	; 0x01
	ICR1L=Copy_u16Value;
     d96:	e6 e4       	ldi	r30, 0x46	; 70
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	9a 81       	ldd	r25, Y+2	; 0x02
     d9e:	91 83       	std	Z+1, r25	; 0x01
     da0:	80 83       	st	Z, r24
}
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	cf 91       	pop	r28
     da8:	df 91       	pop	r29
     daa:	08 95       	ret

00000dac <TIMER1_vdSetOCR1A>:
/*****************************************************************/
/*			Set OCR1A value 														 */
/*****************************************************************/
void TIMER1_vdSetOCR1A(u16 Copy_u16Value){
     dac:	df 93       	push	r29
     dae:	cf 93       	push	r28
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <TIMER1_vdSetOCR1A+0x6>
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	9a 83       	std	Y+2, r25	; 0x02
     db8:	89 83       	std	Y+1, r24	; 0x01
	OCR1AL=Copy_u16Value;
     dba:	ea e4       	ldi	r30, 0x4A	; 74
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	89 81       	ldd	r24, Y+1	; 0x01
     dc0:	9a 81       	ldd	r25, Y+2	; 0x02
     dc2:	91 83       	std	Z+1, r25	; 0x01
     dc4:	80 83       	st	Z, r24
}
     dc6:	0f 90       	pop	r0
     dc8:	0f 90       	pop	r0
     dca:	cf 91       	pop	r28
     dcc:	df 91       	pop	r29
     dce:	08 95       	ret

00000dd0 <TIMER1_vdSetOCR1B>:
/*****************************************************************/
/*			Set OCR1B value 														 */
/*****************************************************************/
void TIMER1_vdSetOCR1B(u16 Copy_u16Value){
     dd0:	df 93       	push	r29
     dd2:	cf 93       	push	r28
     dd4:	00 d0       	rcall	.+0      	; 0xdd6 <TIMER1_vdSetOCR1B+0x6>
     dd6:	cd b7       	in	r28, 0x3d	; 61
     dd8:	de b7       	in	r29, 0x3e	; 62
     dda:	9a 83       	std	Y+2, r25	; 0x02
     ddc:	89 83       	std	Y+1, r24	; 0x01
	OCR1BL=Copy_u16Value;
     dde:	e8 e4       	ldi	r30, 0x48	; 72
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	89 81       	ldd	r24, Y+1	; 0x01
     de4:	80 83       	st	Z, r24
}
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	cf 91       	pop	r28
     dec:	df 91       	pop	r29
     dee:	08 95       	ret

00000df0 <TIMER1_u8PoolFlag>:
/*****************************************************************/
/*			Pool on interrupt flag								 				 */
/*****************************************************************/
void TIMER1_u8PoolFlag(enum_flagsT1 Copy_enuFlags){
     df0:	df 93       	push	r29
     df2:	cf 93       	push	r28
     df4:	0f 92       	push	r0
     df6:	cd b7       	in	r28, 0x3d	; 61
     df8:	de b7       	in	r29, 0x3e	; 62
     dfa:	89 83       	std	Y+1, r24	; 0x01
	while (GET_BIT(TIFR,Copy_enuFlags)==0);
     dfc:	e8 e5       	ldi	r30, 0x58	; 88
     dfe:	f0 e0       	ldi	r31, 0x00	; 0
     e00:	80 81       	ld	r24, Z
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	88 2f       	mov	r24, r24
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	a9 01       	movw	r20, r18
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <TIMER1_u8PoolFlag+0x24>
     e10:	55 95       	asr	r21
     e12:	47 95       	ror	r20
     e14:	8a 95       	dec	r24
     e16:	e2 f7       	brpl	.-8      	; 0xe10 <TIMER1_u8PoolFlag+0x20>
     e18:	ca 01       	movw	r24, r20
     e1a:	81 70       	andi	r24, 0x01	; 1
     e1c:	90 70       	andi	r25, 0x00	; 0
     e1e:	00 97       	sbiw	r24, 0x00	; 0
     e20:	69 f3       	breq	.-38     	; 0xdfc <TIMER1_u8PoolFlag+0xc>
}
     e22:	0f 90       	pop	r0
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <ICU_vdSelectEdge>:
/*****************************************************************/
/*			Select the sense control edge of the ICU	 				 */
/*****************************************************************/
void ICU_vdSelectEdge(enum_ICSC Copy_enuICSCmode){
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	0f 92       	push	r0
     e30:	cd b7       	in	r28, 0x3d	; 61
     e32:	de b7       	in	r29, 0x3e	; 62
     e34:	89 83       	std	Y+1, r24	; 0x01
	TCCR1B |= (Copy_enuICSCmode ^ (1<<TCCR1B_ICES1));
     e36:	ae e4       	ldi	r26, 0x4E	; 78
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	ee e4       	ldi	r30, 0x4E	; 78
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	20 81       	ld	r18, Z
     e40:	99 81       	ldd	r25, Y+1	; 0x01
     e42:	80 e4       	ldi	r24, 0x40	; 64
     e44:	89 27       	eor	r24, r25
     e46:	82 2b       	or	r24, r18
     e48:	8c 93       	st	X, r24
}
     e4a:	0f 90       	pop	r0
     e4c:	cf 91       	pop	r28
     e4e:	df 91       	pop	r29
     e50:	08 95       	ret

00000e52 <ICU_GetValue>:
/*****************************************************************/
/*			Get the Input Capture number of ticks						 */
/*****************************************************************/
u16   ICU_GetValue(void){
     e52:	df 93       	push	r29
     e54:	cf 93       	push	r28
     e56:	00 d0       	rcall	.+0      	; 0xe58 <ICU_GetValue+0x6>
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
	u16 temp =ICR1L;
     e5c:	e6 e4       	ldi	r30, 0x46	; 70
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	91 81       	ldd	r25, Z+1	; 0x01
     e64:	9a 83       	std	Y+2, r25	; 0x02
     e66:	89 83       	std	Y+1, r24	; 0x01
	return temp;
     e68:	89 81       	ldd	r24, Y+1	; 0x01
     e6a:	9a 81       	ldd	r25, Y+2	; 0x02
}
     e6c:	0f 90       	pop	r0
     e6e:	0f 90       	pop	r0
     e70:	cf 91       	pop	r28
     e72:	df 91       	pop	r29
     e74:	08 95       	ret

00000e76 <TIMER0_vdState>:
void (*pFuncTOVCallback)(void)=(void*)0;
void (*pFuncOCFCallback)(void)=(void*)0;
/*****************************************************************/
/*			Enable /Disable timer0 and select clock source		 */
/*****************************************************************/
void TIMER0_vdState(enum_ClockT0 Copy_enuClock){
     e76:	df 93       	push	r29
     e78:	cf 93       	push	r28
     e7a:	0f 92       	push	r0
     e7c:	cd b7       	in	r28, 0x3d	; 61
     e7e:	de b7       	in	r29, 0x3e	; 62
     e80:	89 83       	std	Y+1, r24	; 0x01
	/*Select Clock Source*/
	CLR_BIT(TCCR0,TCCR0_CS00);
     e82:	a3 e5       	ldi	r26, 0x53	; 83
     e84:	b0 e0       	ldi	r27, 0x00	; 0
     e86:	e3 e5       	ldi	r30, 0x53	; 83
     e88:	f0 e0       	ldi	r31, 0x00	; 0
     e8a:	80 81       	ld	r24, Z
     e8c:	8e 7f       	andi	r24, 0xFE	; 254
     e8e:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS01);
     e90:	a3 e5       	ldi	r26, 0x53	; 83
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e3 e5       	ldi	r30, 0x53	; 83
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	8d 7f       	andi	r24, 0xFD	; 253
     e9c:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_CS02);
     e9e:	a3 e5       	ldi	r26, 0x53	; 83
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e3 e5       	ldi	r30, 0x53	; 83
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	8b 7f       	andi	r24, 0xFB	; 251
     eaa:	8c 93       	st	X, r24
	TCCR0|=Copy_enuClock;
     eac:	a3 e5       	ldi	r26, 0x53	; 83
     eae:	b0 e0       	ldi	r27, 0x00	; 0
     eb0:	e3 e5       	ldi	r30, 0x53	; 83
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	90 81       	ld	r25, Z
     eb6:	89 81       	ldd	r24, Y+1	; 0x01
     eb8:	89 2b       	or	r24, r25
     eba:	8c 93       	st	X, r24
}
     ebc:	0f 90       	pop	r0
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	08 95       	ret

00000ec4 <TIMER0_vdInit>:
/*****************************************************************/
/*			Select wave type and compare output mode 			 */
/*****************************************************************/
void TIMER0_vdInit(enum_waveT0   Copy_enuWave,  enum_comT0   Copy_enuCom ){
     ec4:	df 93       	push	r29
     ec6:	cf 93       	push	r28
     ec8:	00 d0       	rcall	.+0      	; 0xeca <TIMER0_vdInit+0x6>
     eca:	cd b7       	in	r28, 0x3d	; 61
     ecc:	de b7       	in	r29, 0x3e	; 62
     ece:	89 83       	std	Y+1, r24	; 0x01
     ed0:	6a 83       	std	Y+2, r22	; 0x02
	/*Setting wave generation mode */
	CLR_BIT(TCCR0,TCCR0_WGM00);
     ed2:	a3 e5       	ldi	r26, 0x53	; 83
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	e3 e5       	ldi	r30, 0x53	; 83
     ed8:	f0 e0       	ldi	r31, 0x00	; 0
     eda:	80 81       	ld	r24, Z
     edc:	8f 7b       	andi	r24, 0xBF	; 191
     ede:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_WGM01);
     ee0:	a3 e5       	ldi	r26, 0x53	; 83
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	e3 e5       	ldi	r30, 0x53	; 83
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	87 7f       	andi	r24, 0xF7	; 247
     eec:	8c 93       	st	X, r24
	TCCR0|=Copy_enuWave;
     eee:	a3 e5       	ldi	r26, 0x53	; 83
     ef0:	b0 e0       	ldi	r27, 0x00	; 0
     ef2:	e3 e5       	ldi	r30, 0x53	; 83
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	90 81       	ld	r25, Z
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	89 2b       	or	r24, r25
     efc:	8c 93       	st	X, r24

	/*Setting Compare output match mode*/
	CLR_BIT(TCCR0,TCCR0_COM00);
     efe:	a3 e5       	ldi	r26, 0x53	; 83
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e3 e5       	ldi	r30, 0x53	; 83
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	8f 7e       	andi	r24, 0xEF	; 239
     f0a:	8c 93       	st	X, r24
	CLR_BIT(TCCR0,TCCR0_COM01);
     f0c:	a3 e5       	ldi	r26, 0x53	; 83
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	e3 e5       	ldi	r30, 0x53	; 83
     f12:	f0 e0       	ldi	r31, 0x00	; 0
     f14:	80 81       	ld	r24, Z
     f16:	8f 7d       	andi	r24, 0xDF	; 223
     f18:	8c 93       	st	X, r24
	TCCR0|=Copy_enuCom;
     f1a:	a3 e5       	ldi	r26, 0x53	; 83
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	e3 e5       	ldi	r30, 0x53	; 83
     f20:	f0 e0       	ldi	r31, 0x00	; 0
     f22:	90 81       	ld	r25, Z
     f24:	8a 81       	ldd	r24, Y+2	; 0x02
     f26:	89 2b       	or	r24, r25
     f28:	8c 93       	st	X, r24
}
     f2a:	0f 90       	pop	r0
     f2c:	0f 90       	pop	r0
     f2e:	cf 91       	pop	r28
     f30:	df 91       	pop	r29
     f32:	08 95       	ret

00000f34 <TIMER0_vdPreloading>:
/*****************************************************************/
/*			Preloading value to timer0 register 		 					 */
/*****************************************************************/
void TIMER0_vdPreloading(u8 Copy_u8Value){
     f34:	df 93       	push	r29
     f36:	cf 93       	push	r28
     f38:	0f 92       	push	r0
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	89 83       	std	Y+1, r24	; 0x01
	/*Preload Timer0 Register*/
	TCNT0=Copy_u8Value;
     f40:	e2 e5       	ldi	r30, 0x52	; 82
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	80 83       	st	Z, r24
}
     f48:	0f 90       	pop	r0
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <TIMER0_vdOutputCompareValue>:
/*****************************************************************/
/*			Load the output compare match register				 */
/*****************************************************************/
void TIMER0_vdOutputCompareValue(u8 Copy_u8Value){
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	0f 92       	push	r0
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	89 83       	std	Y+1, r24	; 0x01
	/*Compare match Register load*/
	OCR0=Copy_u8Value;
     f5c:	ec e5       	ldi	r30, 0x5C	; 92
     f5e:	f0 e0       	ldi	r31, 0x00	; 0
     f60:	89 81       	ldd	r24, Y+1	; 0x01
     f62:	80 83       	st	Z, r24
}
     f64:	0f 90       	pop	r0
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <TIMER0_vdInterruptEnable>:
/*****************************************************************/
/*			Enable interrupts for overflow and compare match */
/*****************************************************************/
void TIMER0_vdInterruptEnable(enum_InterruptStateT0   Copy_enuInterruptState){
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	0f 92       	push	r0
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
     f76:	89 83       	std	Y+1, r24	; 0x01
	/*Enable Selected interrupt Sources*/
	CLR_BIT(TIMSK,TIMSK_TOIE0);
     f78:	a9 e5       	ldi	r26, 0x59	; 89
     f7a:	b0 e0       	ldi	r27, 0x00	; 0
     f7c:	e9 e5       	ldi	r30, 0x59	; 89
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	80 81       	ld	r24, Z
     f82:	8e 7f       	andi	r24, 0xFE	; 254
     f84:	8c 93       	st	X, r24
	CLR_BIT(TIMSK,TIMSK_OCIE0);
     f86:	a9 e5       	ldi	r26, 0x59	; 89
     f88:	b0 e0       	ldi	r27, 0x00	; 0
     f8a:	e9 e5       	ldi	r30, 0x59	; 89
     f8c:	f0 e0       	ldi	r31, 0x00	; 0
     f8e:	80 81       	ld	r24, Z
     f90:	8d 7f       	andi	r24, 0xFD	; 253
     f92:	8c 93       	st	X, r24
	TIMSK|=Copy_enuInterruptState;
     f94:	a9 e5       	ldi	r26, 0x59	; 89
     f96:	b0 e0       	ldi	r27, 0x00	; 0
     f98:	e9 e5       	ldi	r30, 0x59	; 89
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	90 81       	ld	r25, Z
     f9e:	89 81       	ldd	r24, Y+1	; 0x01
     fa0:	89 2b       	or	r24, r25
     fa2:	8c 93       	st	X, r24
}
     fa4:	0f 90       	pop	r0
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <TIMER0_vdInterruptDisable>:
/*****************************************************************/
/*		Disable interrupts for overflow and compare match	 */
/*****************************************************************/
void TIMER0_vdInterruptDisable(enum_InterruptStateT0   Copy_enuInterruptState){
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	0f 92       	push	r0
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_enuInterruptState==T0_Int_overflow){
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	81 30       	cpi	r24, 0x01	; 1
     fbc:	41 f4       	brne	.+16     	; 0xfce <TIMER0_vdInterruptDisable+0x22>
		CLR_BIT(TIMSK,TIMSK_TOIE0);/*Clear overflow interrupt enable flag bit*/
     fbe:	a9 e5       	ldi	r26, 0x59	; 89
     fc0:	b0 e0       	ldi	r27, 0x00	; 0
     fc2:	e9 e5       	ldi	r30, 0x59	; 89
     fc4:	f0 e0       	ldi	r31, 0x00	; 0
     fc6:	80 81       	ld	r24, Z
     fc8:	8e 7f       	andi	r24, 0xFE	; 254
     fca:	8c 93       	st	X, r24
     fcc:	19 c0       	rjmp	.+50     	; 0x1000 <TIMER0_vdInterruptDisable+0x54>
	}else if (Copy_enuInterruptState==T0_Int_CompareMatch){
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	82 30       	cpi	r24, 0x02	; 2
     fd2:	41 f4       	brne	.+16     	; 0xfe4 <TIMER0_vdInterruptDisable+0x38>
		CLR_BIT(TIMSK,TIMSK_OCIE0);/*Clear compare match interrupt enable flag bit*/
     fd4:	a9 e5       	ldi	r26, 0x59	; 89
     fd6:	b0 e0       	ldi	r27, 0x00	; 0
     fd8:	e9 e5       	ldi	r30, 0x59	; 89
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	80 81       	ld	r24, Z
     fde:	8d 7f       	andi	r24, 0xFD	; 253
     fe0:	8c 93       	st	X, r24
     fe2:	0e c0       	rjmp	.+28     	; 0x1000 <TIMER0_vdInterruptDisable+0x54>
	}else{
		/*Clear Both compare match and overflow interrupt enable bits*/
		CLR_BIT(TIMSK,TIMSK_OCIE0);
     fe4:	a9 e5       	ldi	r26, 0x59	; 89
     fe6:	b0 e0       	ldi	r27, 0x00	; 0
     fe8:	e9 e5       	ldi	r30, 0x59	; 89
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	8d 7f       	andi	r24, 0xFD	; 253
     ff0:	8c 93       	st	X, r24
		CLR_BIT(TIMSK,TIMSK_TOIE0);
     ff2:	a9 e5       	ldi	r26, 0x59	; 89
     ff4:	b0 e0       	ldi	r27, 0x00	; 0
     ff6:	e9 e5       	ldi	r30, 0x59	; 89
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 81       	ld	r24, Z
     ffc:	8e 7f       	andi	r24, 0xFE	; 254
     ffe:	8c 93       	st	X, r24
	}
}
    1000:	0f 90       	pop	r0
    1002:	cf 91       	pop	r28
    1004:	df 91       	pop	r29
    1006:	08 95       	ret

00001008 <TIMER0_u8PoolFlag>:
/*****************************************************************/
/*			Pool on interrupt flag								 				 */
/*****************************************************************/
void TIMER0_u8PoolFlag(enum_flagsT0   Copy_enuFlags){
    1008:	df 93       	push	r29
    100a:	cf 93       	push	r28
    100c:	0f 92       	push	r0
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_enuFlags==T0_Flag_Overflow){
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	88 23       	and	r24, r24
    1018:	89 f4       	brne	.+34     	; 0x103c <TIMER0_u8PoolFlag+0x34>
		/*Pool on overflow flag then clear it*/
		while(GET_BIT(TIFR,TIFR_TOV0)==0);
    101a:	e8 e5       	ldi	r30, 0x58	; 88
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	80 81       	ld	r24, Z
    1020:	88 2f       	mov	r24, r24
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	81 70       	andi	r24, 0x01	; 1
    1026:	90 70       	andi	r25, 0x00	; 0
    1028:	00 97       	sbiw	r24, 0x00	; 0
    102a:	b9 f3       	breq	.-18     	; 0x101a <TIMER0_u8PoolFlag+0x12>
		SET_BIT(TIFR,TIFR_TOV0);
    102c:	a8 e5       	ldi	r26, 0x58	; 88
    102e:	b0 e0       	ldi	r27, 0x00	; 0
    1030:	e8 e5       	ldi	r30, 0x58	; 88
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	81 60       	ori	r24, 0x01	; 1
    1038:	8c 93       	st	X, r24
    103a:	14 c0       	rjmp	.+40     	; 0x1064 <TIMER0_u8PoolFlag+0x5c>
	}else if (Copy_enuFlags==T0_Flag_CompareMatch){
    103c:	89 81       	ldd	r24, Y+1	; 0x01
    103e:	81 30       	cpi	r24, 0x01	; 1
    1040:	89 f4       	brne	.+34     	; 0x1064 <TIMER0_u8PoolFlag+0x5c>
		/*Pool on compare match flag then clear it*/
		while(GET_BIT(TIFR,TIFR_OCF0));
    1042:	e8 e5       	ldi	r30, 0x58	; 88
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	86 95       	lsr	r24
    104a:	88 2f       	mov	r24, r24
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	81 70       	andi	r24, 0x01	; 1
    1050:	90 70       	andi	r25, 0x00	; 0
    1052:	88 23       	and	r24, r24
    1054:	b1 f7       	brne	.-20     	; 0x1042 <TIMER0_u8PoolFlag+0x3a>
		SET_BIT(TIFR,TIFR_OCF0);
    1056:	a8 e5       	ldi	r26, 0x58	; 88
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e8 e5       	ldi	r30, 0x58	; 88
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	82 60       	ori	r24, 0x02	; 2
    1062:	8c 93       	st	X, r24
	}

}
    1064:	0f 90       	pop	r0
    1066:	cf 91       	pop	r28
    1068:	df 91       	pop	r29
    106a:	08 95       	ret

0000106c <TIMER0_vdOverFlowCallback>:
/*****************************************************************/
/*			Callback for overflow interrupt						 		 */
/*****************************************************************/
void TIMER0_vdOverFlowCallback( void (*pFuncCallback)(void) ){
    106c:	df 93       	push	r29
    106e:	cf 93       	push	r28
    1070:	00 d0       	rcall	.+0      	; 0x1072 <TIMER0_vdOverFlowCallback+0x6>
    1072:	cd b7       	in	r28, 0x3d	; 61
    1074:	de b7       	in	r29, 0x3e	; 62
    1076:	9a 83       	std	Y+2, r25	; 0x02
    1078:	89 83       	std	Y+1, r24	; 0x01
	pFuncTOVCallback=pFuncCallback;
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	9a 81       	ldd	r25, Y+2	; 0x02
    107e:	90 93 79 00 	sts	0x0079, r25
    1082:	80 93 78 00 	sts	0x0078, r24
}
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <TIMER0_vdCompareMatchCallback>:
/*****************************************************************/
/*			Callback for compare match interrupt				 		 */
/*****************************************************************/
void TIMER0_vdCompareMatchCallback( void (*pFuncCallback)(void) ){
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	00 d0       	rcall	.+0      	; 0x1096 <TIMER0_vdCompareMatchCallback+0x6>
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	9a 83       	std	Y+2, r25	; 0x02
    109c:	89 83       	std	Y+1, r24	; 0x01
	pFuncOCFCallback=pFuncCallback;
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	9a 81       	ldd	r25, Y+2	; 0x02
    10a2:	90 93 7b 00 	sts	0x007B, r25
    10a6:	80 93 7a 00 	sts	0x007A, r24
}
    10aa:	0f 90       	pop	r0
    10ac:	0f 90       	pop	r0
    10ae:	cf 91       	pop	r28
    10b0:	df 91       	pop	r29
    10b2:	08 95       	ret

000010b4 <__vector_11>:
/*****************************************************************/
/*			Timer Overflow interrupt service routine 			 	 */
/*****************************************************************/
void __vector_11(void) __attribute__((signal));
void __vector_11(void){
    10b4:	1f 92       	push	r1
    10b6:	0f 92       	push	r0
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	0f 92       	push	r0
    10bc:	11 24       	eor	r1, r1
    10be:	2f 93       	push	r18
    10c0:	3f 93       	push	r19
    10c2:	4f 93       	push	r20
    10c4:	5f 93       	push	r21
    10c6:	6f 93       	push	r22
    10c8:	7f 93       	push	r23
    10ca:	8f 93       	push	r24
    10cc:	9f 93       	push	r25
    10ce:	af 93       	push	r26
    10d0:	bf 93       	push	r27
    10d2:	ef 93       	push	r30
    10d4:	ff 93       	push	r31
    10d6:	df 93       	push	r29
    10d8:	cf 93       	push	r28
    10da:	cd b7       	in	r28, 0x3d	; 61
    10dc:	de b7       	in	r29, 0x3e	; 62
	pFuncTOVCallback();
    10de:	e0 91 78 00 	lds	r30, 0x0078
    10e2:	f0 91 79 00 	lds	r31, 0x0079
    10e6:	09 95       	icall
}
    10e8:	cf 91       	pop	r28
    10ea:	df 91       	pop	r29
    10ec:	ff 91       	pop	r31
    10ee:	ef 91       	pop	r30
    10f0:	bf 91       	pop	r27
    10f2:	af 91       	pop	r26
    10f4:	9f 91       	pop	r25
    10f6:	8f 91       	pop	r24
    10f8:	7f 91       	pop	r23
    10fa:	6f 91       	pop	r22
    10fc:	5f 91       	pop	r21
    10fe:	4f 91       	pop	r20
    1100:	3f 91       	pop	r19
    1102:	2f 91       	pop	r18
    1104:	0f 90       	pop	r0
    1106:	0f be       	out	0x3f, r0	; 63
    1108:	0f 90       	pop	r0
    110a:	1f 90       	pop	r1
    110c:	18 95       	reti

0000110e <__vector_10>:
/*****************************************************************/
/*			Timer compare match interrupt service routine 		 */
/*****************************************************************/
void __vector_10(void) __attribute__((signal));
void __vector_10(void){
    110e:	1f 92       	push	r1
    1110:	0f 92       	push	r0
    1112:	0f b6       	in	r0, 0x3f	; 63
    1114:	0f 92       	push	r0
    1116:	11 24       	eor	r1, r1
    1118:	2f 93       	push	r18
    111a:	3f 93       	push	r19
    111c:	4f 93       	push	r20
    111e:	5f 93       	push	r21
    1120:	6f 93       	push	r22
    1122:	7f 93       	push	r23
    1124:	8f 93       	push	r24
    1126:	9f 93       	push	r25
    1128:	af 93       	push	r26
    112a:	bf 93       	push	r27
    112c:	ef 93       	push	r30
    112e:	ff 93       	push	r31
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
	pFuncOCFCallback();
    1138:	e0 91 7a 00 	lds	r30, 0x007A
    113c:	f0 91 7b 00 	lds	r31, 0x007B
    1140:	09 95       	icall
}
    1142:	cf 91       	pop	r28
    1144:	df 91       	pop	r29
    1146:	ff 91       	pop	r31
    1148:	ef 91       	pop	r30
    114a:	bf 91       	pop	r27
    114c:	af 91       	pop	r26
    114e:	9f 91       	pop	r25
    1150:	8f 91       	pop	r24
    1152:	7f 91       	pop	r23
    1154:	6f 91       	pop	r22
    1156:	5f 91       	pop	r21
    1158:	4f 91       	pop	r20
    115a:	3f 91       	pop	r19
    115c:	2f 91       	pop	r18
    115e:	0f 90       	pop	r0
    1160:	0f be       	out	0x3f, r0	; 63
    1162:	0f 90       	pop	r0
    1164:	1f 90       	pop	r1
    1166:	18 95       	reti

00001168 <SPI_vdInit>:
#include "SPI_interface.h"

/*****************************************************************/
/*						SPI initialize 												     			*/
/*****************************************************************/
void SPI_vdInit(enum_mstr   Copy_enuMstrMode,		enum_clkPolarity Copy_enuPolarity, 	enum_clkPhase Copy_enuPhase , 	enum_clkRate Copy_enuRate){
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	00 d0       	rcall	.+0      	; 0x116e <SPI_vdInit+0x6>
    116e:	00 d0       	rcall	.+0      	; 0x1170 <SPI_vdInit+0x8>
    1170:	cd b7       	in	r28, 0x3d	; 61
    1172:	de b7       	in	r29, 0x3e	; 62
    1174:	89 83       	std	Y+1, r24	; 0x01
    1176:	6a 83       	std	Y+2, r22	; 0x02
    1178:	4b 83       	std	Y+3, r20	; 0x03
    117a:	2c 83       	std	Y+4, r18	; 0x04
	/*set Data Direction to LSB 1st sent*/
	CLR_BIT(SPCR,SPCR_DORD);
    117c:	ad e2       	ldi	r26, 0x2D	; 45
    117e:	b0 e0       	ldi	r27, 0x00	; 0
    1180:	ed e2       	ldi	r30, 0x2D	; 45
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	8f 7d       	andi	r24, 0xDF	; 223
    1188:	8c 93       	st	X, r24

	/*Set clock Phase */
	if (Copy_enuPhase==leading_sample)
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	88 23       	and	r24, r24
    118e:	41 f4       	brne	.+16     	; 0x11a0 <SPI_vdInit+0x38>
		CLR_BIT(SPCR,SPCR_CPHA);
    1190:	ad e2       	ldi	r26, 0x2D	; 45
    1192:	b0 e0       	ldi	r27, 0x00	; 0
    1194:	ed e2       	ldi	r30, 0x2D	; 45
    1196:	f0 e0       	ldi	r31, 0x00	; 0
    1198:	80 81       	ld	r24, Z
    119a:	8b 7f       	andi	r24, 0xFB	; 251
    119c:	8c 93       	st	X, r24
    119e:	0a c0       	rjmp	.+20     	; 0x11b4 <SPI_vdInit+0x4c>
	else if (Copy_enuPhase==leading_setup)
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	84 30       	cpi	r24, 0x04	; 4
    11a4:	39 f4       	brne	.+14     	; 0x11b4 <SPI_vdInit+0x4c>
		CLR_BIT(SPCR,SPCR_CPHA);
    11a6:	ad e2       	ldi	r26, 0x2D	; 45
    11a8:	b0 e0       	ldi	r27, 0x00	; 0
    11aa:	ed e2       	ldi	r30, 0x2D	; 45
    11ac:	f0 e0       	ldi	r31, 0x00	; 0
    11ae:	80 81       	ld	r24, Z
    11b0:	8b 7f       	andi	r24, 0xFB	; 251
    11b2:	8c 93       	st	X, r24

	/*Set clock polarity*/
	if (Copy_enuPolarity==rising_faling)
    11b4:	8a 81       	ldd	r24, Y+2	; 0x02
    11b6:	88 23       	and	r24, r24
    11b8:	41 f4       	brne	.+16     	; 0x11ca <SPI_vdInit+0x62>
		CLR_BIT(SPCR,SPCR_CPOL);
    11ba:	ad e2       	ldi	r26, 0x2D	; 45
    11bc:	b0 e0       	ldi	r27, 0x00	; 0
    11be:	ed e2       	ldi	r30, 0x2D	; 45
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	80 81       	ld	r24, Z
    11c4:	87 7f       	andi	r24, 0xF7	; 247
    11c6:	8c 93       	st	X, r24
    11c8:	0a c0       	rjmp	.+20     	; 0x11de <SPI_vdInit+0x76>
	else if (Copy_enuPolarity==faling_rising)
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	88 30       	cpi	r24, 0x08	; 8
    11ce:	39 f4       	brne	.+14     	; 0x11de <SPI_vdInit+0x76>
		SET_BIT(SPCR,SPCR_CPOL);
    11d0:	ad e2       	ldi	r26, 0x2D	; 45
    11d2:	b0 e0       	ldi	r27, 0x00	; 0
    11d4:	ed e2       	ldi	r30, 0x2D	; 45
    11d6:	f0 e0       	ldi	r31, 0x00	; 0
    11d8:	80 81       	ld	r24, Z
    11da:	88 60       	ori	r24, 0x08	; 8
    11dc:	8c 93       	st	X, r24

	/*set Master/Slave mode */
	if (Copy_enuMstrMode==master)
    11de:	89 81       	ldd	r24, Y+1	; 0x01
    11e0:	80 31       	cpi	r24, 0x10	; 16
    11e2:	41 f4       	brne	.+16     	; 0x11f4 <SPI_vdInit+0x8c>
		SET_BIT(SPCR,SPCR_MSTR);
    11e4:	ad e2       	ldi	r26, 0x2D	; 45
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	ed e2       	ldi	r30, 0x2D	; 45
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
    11ee:	80 61       	ori	r24, 0x10	; 16
    11f0:	8c 93       	st	X, r24
    11f2:	0a c0       	rjmp	.+20     	; 0x1208 <SPI_vdInit+0xa0>
	else if (Copy_enuMstrMode==slave)
    11f4:	89 81       	ldd	r24, Y+1	; 0x01
    11f6:	88 23       	and	r24, r24
    11f8:	39 f4       	brne	.+14     	; 0x1208 <SPI_vdInit+0xa0>
		CLR_BIT(SPCR,SPCR_MSTR);
    11fa:	ad e2       	ldi	r26, 0x2D	; 45
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	ed e2       	ldi	r30, 0x2D	; 45
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	80 81       	ld	r24, Z
    1204:	8f 7e       	andi	r24, 0xEF	; 239
    1206:	8c 93       	st	X, r24

	/*set clock*/
	SPCR &= ~((1<<SPCR_SPR0) | (1<<SPCR_SPR1));
    1208:	ad e2       	ldi	r26, 0x2D	; 45
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	ed e2       	ldi	r30, 0x2D	; 45
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	8c 7f       	andi	r24, 0xFC	; 252
    1214:	8c 93       	st	X, r24
	CLR_BIT(SPSR,SPSR_SPI2X);
    1216:	ae e2       	ldi	r26, 0x2E	; 46
    1218:	b0 e0       	ldi	r27, 0x00	; 0
    121a:	ee e2       	ldi	r30, 0x2E	; 46
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	8e 7f       	andi	r24, 0xFE	; 254
    1222:	8c 93       	st	X, r24
	SPCR |= (Copy_enuRate  &   ((1<<SPCR_SPR0) | (1<<SPCR_SPR1)));
    1224:	ad e2       	ldi	r26, 0x2D	; 45
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	ed e2       	ldi	r30, 0x2D	; 45
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	98 2f       	mov	r25, r24
    1230:	8c 81       	ldd	r24, Y+4	; 0x04
    1232:	83 70       	andi	r24, 0x03	; 3
    1234:	89 2b       	or	r24, r25
    1236:	8c 93       	st	X, r24
	SPSR |= Copy_enuRate>>4;
    1238:	ae e2       	ldi	r26, 0x2E	; 46
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	ee e2       	ldi	r30, 0x2E	; 46
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	90 81       	ld	r25, Z
    1242:	8c 81       	ldd	r24, Y+4	; 0x04
    1244:	82 95       	swap	r24
    1246:	8f 70       	andi	r24, 0x0F	; 15
    1248:	89 2b       	or	r24, r25
    124a:	8c 93       	st	X, r24

	/*Enable SPI*/
	SET_BIT(SPCR,SPCR_SPE);
    124c:	ad e2       	ldi	r26, 0x2D	; 45
    124e:	b0 e0       	ldi	r27, 0x00	; 0
    1250:	ed e2       	ldi	r30, 0x2D	; 45
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	80 64       	ori	r24, 0x40	; 64
    1258:	8c 93       	st	X, r24

}
    125a:	0f 90       	pop	r0
    125c:	0f 90       	pop	r0
    125e:	0f 90       	pop	r0
    1260:	0f 90       	pop	r0
    1262:	cf 91       	pop	r28
    1264:	df 91       	pop	r29
    1266:	08 95       	ret

00001268 <SPI_vdDisable>:
/*****************************************************************/
/*						Disable SPI												     			*/
/*****************************************************************/
void SPI_vdDisable(void){
    1268:	df 93       	push	r29
    126a:	cf 93       	push	r28
    126c:	cd b7       	in	r28, 0x3d	; 61
    126e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR,SPCR_SPE);
    1270:	ad e2       	ldi	r26, 0x2D	; 45
    1272:	b0 e0       	ldi	r27, 0x00	; 0
    1274:	ed e2       	ldi	r30, 0x2D	; 45
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	8f 7b       	andi	r24, 0xBF	; 191
    127c:	8c 93       	st	X, r24
}
    127e:	cf 91       	pop	r28
    1280:	df 91       	pop	r29
    1282:	08 95       	ret

00001284 <SPI_u8MasterDataRW>:
/*****************************************************************/
/*						Master Send Data									   			    */
/*****************************************************************/
u8 SPI_u8MasterDataRW(u8 Copy_u8Setup){
    1284:	df 93       	push	r29
    1286:	cf 93       	push	r28
    1288:	0f 92       	push	r0
    128a:	cd b7       	in	r28, 0x3d	; 61
    128c:	de b7       	in	r29, 0x3e	; 62
    128e:	89 83       	std	Y+1, r24	; 0x01
	SPDR=Copy_u8Setup;
    1290:	ef e2       	ldi	r30, 0x2F	; 47
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	89 81       	ldd	r24, Y+1	; 0x01
    1296:	80 83       	st	Z, r24
	while (GET_BIT(SPSR,SPSR_SPIF)==0);
    1298:	ee e2       	ldi	r30, 0x2E	; 46
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	88 23       	and	r24, r24
    12a0:	dc f7       	brge	.-10     	; 0x1298 <SPI_u8MasterDataRW+0x14>
	return Copy_u8Setup;
    12a2:	89 81       	ldd	r24, Y+1	; 0x01
}
    12a4:	0f 90       	pop	r0
    12a6:	cf 91       	pop	r28
    12a8:	df 91       	pop	r29
    12aa:	08 95       	ret

000012ac <SPI_u8SlaveDataRead>:
/*****************************************************************/
/*						Slave Read Data										    		    */
/*****************************************************************/
u8 SPI_u8SlaveDataRead(void){
    12ac:	df 93       	push	r29
    12ae:	cf 93       	push	r28
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
	while (GET_BIT(SPSR,SPSR_SPIF)==0);
    12b4:	ee e2       	ldi	r30, 0x2E	; 46
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	88 23       	and	r24, r24
    12bc:	dc f7       	brge	.-10     	; 0x12b4 <SPI_u8SlaveDataRead+0x8>
	return SPDR;
    12be:	ef e2       	ldi	r30, 0x2F	; 47
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
}
    12c4:	cf 91       	pop	r28
    12c6:	df 91       	pop	r29
    12c8:	08 95       	ret

000012ca <SPI_vdSlaveDataWrite>:
/*****************************************************************/
/*						Slave Data Write										     			*/
/*****************************************************************/
void SPI_vdSlaveDataWrite(u8 Copy_u8Data){
    12ca:	df 93       	push	r29
    12cc:	cf 93       	push	r28
    12ce:	0f 92       	push	r0
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    12d4:	89 83       	std	Y+1, r24	; 0x01
	while (GET_BIT(SPSR,SPSR_SPIF)==0);
    12d6:	ee e2       	ldi	r30, 0x2E	; 46
    12d8:	f0 e0       	ldi	r31, 0x00	; 0
    12da:	80 81       	ld	r24, Z
    12dc:	88 23       	and	r24, r24
    12de:	dc f7       	brge	.-10     	; 0x12d6 <SPI_vdSlaveDataWrite+0xc>
	SPDR=Copy_u8Data;
    12e0:	ef e2       	ldi	r30, 0x2F	; 47
    12e2:	f0 e0       	ldi	r31, 0x00	; 0
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	80 83       	st	Z, r24
}
    12e8:	0f 90       	pop	r0
    12ea:	cf 91       	pop	r28
    12ec:	df 91       	pop	r29
    12ee:	08 95       	ret

000012f0 <SPI_vdInterruptEnable>:

/*****************************************************************/
/*						Enable SPI Interrupt										     		*/
/*****************************************************************/
void SPI_vdInterruptEnable(void){
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SPCR,SPCR_SPIE);
    12f8:	ad e2       	ldi	r26, 0x2D	; 45
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	ed e2       	ldi	r30, 0x2D	; 45
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	80 68       	ori	r24, 0x80	; 128
    1304:	8c 93       	st	X, r24
}
    1306:	cf 91       	pop	r28
    1308:	df 91       	pop	r29
    130a:	08 95       	ret

0000130c <SPI_vdInterruptDisable>:
/*****************************************************************/
/*						Disable SPI Interrupt										     	*/
/*****************************************************************/
void SPI_vdInterruptDisable(void){
    130c:	df 93       	push	r29
    130e:	cf 93       	push	r28
    1310:	cd b7       	in	r28, 0x3d	; 61
    1312:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SPCR,SPCR_SPIE);
    1314:	ad e2       	ldi	r26, 0x2D	; 45
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	ed e2       	ldi	r30, 0x2D	; 45
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	8f 77       	andi	r24, 0x7F	; 127
    1320:	8c 93       	st	X, r24
}
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <TWI_vdInit>:
#include "I2C_private.h"

/************************************************************************/
				/*TWI initialization */
/************************************************************************/
void TWI_vdInit(u8 Copy_u8Address){
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	0f 92       	push	r0
    132e:	cd b7       	in	r28, 0x3d	; 61
    1330:	de b7       	in	r29, 0x3e	; 62
    1332:	89 83       	std	Y+1, r24	; 0x01
	/*Set baud Rate*/
	CLR_BIT(TWSR,TWSR_TWPS0);
    1334:	a1 e2       	ldi	r26, 0x21	; 33
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	e1 e2       	ldi	r30, 0x21	; 33
    133a:	f0 e0       	ldi	r31, 0x00	; 0
    133c:	80 81       	ld	r24, Z
    133e:	8e 7f       	andi	r24, 0xFE	; 254
    1340:	8c 93       	st	X, r24
	CLR_BIT(TWSR,TWSR_TWPS0);
    1342:	a1 e2       	ldi	r26, 0x21	; 33
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	e1 e2       	ldi	r30, 0x21	; 33
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	80 81       	ld	r24, Z
    134c:	8e 7f       	andi	r24, 0xFE	; 254
    134e:	8c 93       	st	X, r24
	TWBR=2;
    1350:	e0 e2       	ldi	r30, 0x20	; 32
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	82 e0       	ldi	r24, 0x02	; 2
    1356:	80 83       	st	Z, r24
	/*Set Slave Address*/
	if(Copy_u8Address){
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	88 23       	and	r24, r24
    135c:	29 f0       	breq	.+10     	; 0x1368 <TWI_vdInit+0x40>
		TWAR=(Copy_u8Address<<1);
    135e:	e2 e2       	ldi	r30, 0x22	; 34
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	88 0f       	add	r24, r24
    1366:	80 83       	st	Z, r24
	}
	/*enable TWI*/
	SET_BIT(TWCR,TWCR_TWEN);
    1368:	a6 e5       	ldi	r26, 0x56	; 86
    136a:	b0 e0       	ldi	r27, 0x00	; 0
    136c:	e6 e5       	ldi	r30, 0x56	; 86
    136e:	f0 e0       	ldi	r31, 0x00	; 0
    1370:	80 81       	ld	r24, Z
    1372:	84 60       	ori	r24, 0x04	; 4
    1374:	8c 93       	st	X, r24
}
    1376:	0f 90       	pop	r0
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <TWI_u8StartCondition>:
/************************************************************************/
				/*Generate Start Condition  */
/************************************************************************/
u8 TWI_u8StartCondition(void){
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	0f 92       	push	r0
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
	u8 error =StartAckError_true;
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	89 83       	std	Y+1, r24	; 0x01

	/**Set Start Condition bit*/
	SET_BIT(TWCR , TWCR_TWSTA);
    138c:	a6 e5       	ldi	r26, 0x56	; 86
    138e:	b0 e0       	ldi	r27, 0x00	; 0
    1390:	e6 e5       	ldi	r30, 0x56	; 86
    1392:	f0 e0       	ldi	r31, 0x00	; 0
    1394:	80 81       	ld	r24, Z
    1396:	80 62       	ori	r24, 0x20	; 32
    1398:	8c 93       	st	X, r24
	/**Clear TWINT Flag */
	CLR_TWINT;
    139a:	a6 e5       	ldi	r26, 0x56	; 86
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e6 e5       	ldi	r30, 0x56	; 86
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	80 68       	ori	r24, 0x80	; 128
    13a6:	8c 93       	st	X, r24
	/**Pool on TWINT Flag*/
	POOL_FLAG;
    13a8:	e6 e5       	ldi	r30, 0x56	; 86
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	88 23       	and	r24, r24
    13b0:	dc f7       	brge	.-10     	; 0x13a8 <TWI_u8StartCondition+0x2a>
	/**Check Error Status*/
	if (  STATUS!=START_ACK ){
    13b2:	e1 e2       	ldi	r30, 0x21	; 33
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	88 2f       	mov	r24, r24
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	88 7f       	andi	r24, 0xF8	; 248
    13be:	90 70       	andi	r25, 0x00	; 0
    13c0:	88 30       	cpi	r24, 0x08	; 8
    13c2:	91 05       	cpc	r25, r1
    13c4:	09 f0       	breq	.+2      	; 0x13c8 <TWI_u8StartCondition+0x4a>
		error=NoError;
    13c6:	19 82       	std	Y+1, r1	; 0x01
	}
	return error;
    13c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    13ca:	0f 90       	pop	r0
    13cc:	cf 91       	pop	r28
    13ce:	df 91       	pop	r29
    13d0:	08 95       	ret

000013d2 <TWI_u8RepeatedStartCondition>:
/************************************************************************/
				/*Generate Repeated Start Condition  */
/************************************************************************/
u8 TWI_u8RepeatedStartCondition(void){
    13d2:	df 93       	push	r29
    13d4:	cf 93       	push	r28
    13d6:	0f 92       	push	r0
    13d8:	cd b7       	in	r28, 0x3d	; 61
    13da:	de b7       	in	r29, 0x3e	; 62
	u8 error =RepStartAckError_true;
    13dc:	82 e0       	ldi	r24, 0x02	; 2
    13de:	89 83       	std	Y+1, r24	; 0x01
	/**Set Start Condition bit*/
	SET_BIT(TWCR , TWCR_TWSTA);
    13e0:	a6 e5       	ldi	r26, 0x56	; 86
    13e2:	b0 e0       	ldi	r27, 0x00	; 0
    13e4:	e6 e5       	ldi	r30, 0x56	; 86
    13e6:	f0 e0       	ldi	r31, 0x00	; 0
    13e8:	80 81       	ld	r24, Z
    13ea:	80 62       	ori	r24, 0x20	; 32
    13ec:	8c 93       	st	X, r24
	/**Clear TWINT Flag */
	CLR_TWINT;
    13ee:	a6 e5       	ldi	r26, 0x56	; 86
    13f0:	b0 e0       	ldi	r27, 0x00	; 0
    13f2:	e6 e5       	ldi	r30, 0x56	; 86
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	80 81       	ld	r24, Z
    13f8:	80 68       	ori	r24, 0x80	; 128
    13fa:	8c 93       	st	X, r24
	/**Pool on TWINT Flag*/
	POOL_FLAG;
    13fc:	e6 e5       	ldi	r30, 0x56	; 86
    13fe:	f0 e0       	ldi	r31, 0x00	; 0
    1400:	80 81       	ld	r24, Z
    1402:	88 23       	and	r24, r24
    1404:	dc f7       	brge	.-10     	; 0x13fc <TWI_u8RepeatedStartCondition+0x2a>
	/**Check Error Status*/
	if (  STATUS!=REP_START_ACK ){
    1406:	e1 e2       	ldi	r30, 0x21	; 33
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	88 7f       	andi	r24, 0xF8	; 248
    1412:	90 70       	andi	r25, 0x00	; 0
    1414:	80 31       	cpi	r24, 0x10	; 16
    1416:	91 05       	cpc	r25, r1
    1418:	09 f0       	breq	.+2      	; 0x141c <TWI_u8RepeatedStartCondition+0x4a>
		error=NoError;
    141a:	19 82       	std	Y+1, r1	; 0x01
	}
	return error;
    141c:	89 81       	ldd	r24, Y+1	; 0x01
}
    141e:	0f 90       	pop	r0
    1420:	cf 91       	pop	r28
    1422:	df 91       	pop	r29
    1424:	08 95       	ret

00001426 <TWI_u8StopCondition>:
/************************************************************************/
				/*Generate Stop Condition*/
/************************************************************************/
void TWI_u8StopCondition(void){
    1426:	df 93       	push	r29
    1428:	cf 93       	push	r28
    142a:	cd b7       	in	r28, 0x3d	; 61
    142c:	de b7       	in	r29, 0x3e	; 62
	/*Set Stop Condition Bit*/
	SET_BIT(TWCR,TWCR_TWSTO);
    142e:	a6 e5       	ldi	r26, 0x56	; 86
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e6 e5       	ldi	r30, 0x56	; 86
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	80 61       	ori	r24, 0x10	; 16
    143a:	8c 93       	st	X, r24
	/*Clear TWINT Flag */
	CLR_TWINT;
    143c:	a6 e5       	ldi	r26, 0x56	; 86
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e6 e5       	ldi	r30, 0x56	; 86
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	80 68       	ori	r24, 0x80	; 128
    1448:	8c 93       	st	X, r24
	/*Pool on TWINT Flag*/
	POOL_FLAG;
    144a:	e6 e5       	ldi	r30, 0x56	; 86
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	88 23       	and	r24, r24
    1452:	dc f7       	brge	.-10     	; 0x144a <TWI_u8StopCondition+0x24>
}
    1454:	cf 91       	pop	r28
    1456:	df 91       	pop	r29
    1458:	08 95       	ret

0000145a <TWI_vdMasterSendAddress>:
/************************************************************************/
				/*Master Mode Send Slave Address*/
/************************************************************************/
u8 TWI_vdMasterSendAddress(u8 Copy_u8Address , enum_operation Copy_enuOperation){
    145a:	df 93       	push	r29
    145c:	cf 93       	push	r28
    145e:	00 d0       	rcall	.+0      	; 0x1460 <TWI_vdMasterSendAddress+0x6>
    1460:	0f 92       	push	r0
    1462:	cd b7       	in	r28, 0x3d	; 61
    1464:	de b7       	in	r29, 0x3e	; 62
    1466:	8a 83       	std	Y+2, r24	; 0x02
    1468:	6b 83       	std	Y+3, r22	; 0x03
	u8 error=SendSlaveAddress_Error_exist;;
    146a:	83 e0       	ldi	r24, 0x03	; 3
    146c:	89 83       	std	Y+1, r24	; 0x01

	/**Set Operation As Read or Write */
		TWDR =(Copy_u8Address <<1)	|  Copy_enuOperation;
    146e:	e3 e2       	ldi	r30, 0x23	; 35
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	8a 81       	ldd	r24, Y+2	; 0x02
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	98 2f       	mov	r25, r24
    147e:	8b 81       	ldd	r24, Y+3	; 0x03
    1480:	89 2b       	or	r24, r25
    1482:	80 83       	st	Z, r24
	/**Clear Start Bit Generator */
	CLR_BIT(TWCR,TWCR_TWSTA );
    1484:	a6 e5       	ldi	r26, 0x56	; 86
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e6 e5       	ldi	r30, 0x56	; 86
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	8f 7d       	andi	r24, 0xDF	; 223
    1490:	8c 93       	st	X, r24
	/**Clear TWINT Flag */
	CLR_TWINT;
    1492:	a6 e5       	ldi	r26, 0x56	; 86
    1494:	b0 e0       	ldi	r27, 0x00	; 0
    1496:	e6 e5       	ldi	r30, 0x56	; 86
    1498:	f0 e0       	ldi	r31, 0x00	; 0
    149a:	80 81       	ld	r24, Z
    149c:	80 68       	ori	r24, 0x80	; 128
    149e:	8c 93       	st	X, r24
    14a0:	29 c0       	rjmp	.+82     	; 0x14f4 <TWI_vdMasterSendAddress+0x9a>
	/**Pool on TWINT Flag*/
	POOL_FLAG
	/**Check Error Status*/
	if (  STATUS ==SLAVE_W_ACK || STATUS==SLAVE_R_NACK || STATUS==SLAVE_R_ACK || STATUS==SLAVE_R_NACK  ){
    14a2:	e1 e2       	ldi	r30, 0x21	; 33
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	80 81       	ld	r24, Z
    14a8:	88 2f       	mov	r24, r24
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	88 7f       	andi	r24, 0xF8	; 248
    14ae:	90 70       	andi	r25, 0x00	; 0
    14b0:	88 31       	cpi	r24, 0x18	; 24
    14b2:	91 05       	cpc	r25, r1
    14b4:	f1 f0       	breq	.+60     	; 0x14f2 <TWI_vdMasterSendAddress+0x98>
    14b6:	e1 e2       	ldi	r30, 0x21	; 33
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	80 81       	ld	r24, Z
    14bc:	88 2f       	mov	r24, r24
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	88 7f       	andi	r24, 0xF8	; 248
    14c2:	90 70       	andi	r25, 0x00	; 0
    14c4:	88 34       	cpi	r24, 0x48	; 72
    14c6:	91 05       	cpc	r25, r1
    14c8:	a1 f0       	breq	.+40     	; 0x14f2 <TWI_vdMasterSendAddress+0x98>
    14ca:	e1 e2       	ldi	r30, 0x21	; 33
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	80 81       	ld	r24, Z
    14d0:	88 2f       	mov	r24, r24
    14d2:	90 e0       	ldi	r25, 0x00	; 0
    14d4:	88 7f       	andi	r24, 0xF8	; 248
    14d6:	90 70       	andi	r25, 0x00	; 0
    14d8:	80 34       	cpi	r24, 0x40	; 64
    14da:	91 05       	cpc	r25, r1
    14dc:	51 f0       	breq	.+20     	; 0x14f2 <TWI_vdMasterSendAddress+0x98>
    14de:	e1 e2       	ldi	r30, 0x21	; 33
    14e0:	f0 e0       	ldi	r31, 0x00	; 0
    14e2:	80 81       	ld	r24, Z
    14e4:	88 2f       	mov	r24, r24
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	88 7f       	andi	r24, 0xF8	; 248
    14ea:	90 70       	andi	r25, 0x00	; 0
    14ec:	88 34       	cpi	r24, 0x48	; 72
    14ee:	91 05       	cpc	r25, r1
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <TWI_vdMasterSendAddress+0x9a>
		error=NoError;
    14f2:	19 82       	std	Y+1, r1	; 0x01
	/**Clear Start Bit Generator */
	CLR_BIT(TWCR,TWCR_TWSTA );
	/**Clear TWINT Flag */
	CLR_TWINT;
	/**Pool on TWINT Flag*/
	POOL_FLAG
    14f4:	e6 e5       	ldi	r30, 0x56	; 86
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	80 81       	ld	r24, Z
    14fa:	88 23       	and	r24, r24
    14fc:	94 f6       	brge	.-92     	; 0x14a2 <TWI_vdMasterSendAddress+0x48>
	/**Check Error Status*/
	if (  STATUS ==SLAVE_W_ACK || STATUS==SLAVE_R_NACK || STATUS==SLAVE_R_ACK || STATUS==SLAVE_R_NACK  ){
		error=NoError;
	}
	return error;
    14fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <TWI_u8MasterSendData>:
/************************************************************************/
				/*Master Mode  Send Data To Slave*/
/************************************************************************/
u8   TWI_u8MasterSendData( u8 Copy_u8Data){
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	00 d0       	rcall	.+0      	; 0x1512 <TWI_u8MasterSendData+0x6>
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
    1516:	8a 83       	std	Y+2, r24	; 0x02
	u8 error=SendData_Error_exist;
    1518:	84 e0       	ldi	r24, 0x04	; 4
    151a:	89 83       	std	Y+1, r24	; 0x01
	/**Load Data in TWDR*/
	TWDR = Copy_u8Data;
    151c:	e3 e2       	ldi	r30, 0x23	; 35
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	80 83       	st	Z, r24
	/**Clear TWINT Flag */
	CLR_TWINT;
    1524:	a6 e5       	ldi	r26, 0x56	; 86
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e6 e5       	ldi	r30, 0x56	; 86
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	80 68       	ori	r24, 0x80	; 128
    1530:	8c 93       	st	X, r24
    1532:	15 c0       	rjmp	.+42     	; 0x155e <TWI_u8MasterSendData+0x52>
	/**Pool on TWINT Flag*/
	POOL_FLAG
	/**Check Error Status*/
	if (  STATUS ==SLAVE_DATA_ACK  || STATUS ==SLAVE_DATA_NACK ){
    1534:	e1 e2       	ldi	r30, 0x21	; 33
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	80 81       	ld	r24, Z
    153a:	88 2f       	mov	r24, r24
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	88 7f       	andi	r24, 0xF8	; 248
    1540:	90 70       	andi	r25, 0x00	; 0
    1542:	88 32       	cpi	r24, 0x28	; 40
    1544:	91 05       	cpc	r25, r1
    1546:	51 f0       	breq	.+20     	; 0x155c <TWI_u8MasterSendData+0x50>
    1548:	e1 e2       	ldi	r30, 0x21	; 33
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	80 81       	ld	r24, Z
    154e:	88 2f       	mov	r24, r24
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	88 7f       	andi	r24, 0xF8	; 248
    1554:	90 70       	andi	r25, 0x00	; 0
    1556:	80 33       	cpi	r24, 0x30	; 48
    1558:	91 05       	cpc	r25, r1
    155a:	09 f4       	brne	.+2      	; 0x155e <TWI_u8MasterSendData+0x52>
		error=NoError;
    155c:	19 82       	std	Y+1, r1	; 0x01
	/**Load Data in TWDR*/
	TWDR = Copy_u8Data;
	/**Clear TWINT Flag */
	CLR_TWINT;
	/**Pool on TWINT Flag*/
	POOL_FLAG
    155e:	e6 e5       	ldi	r30, 0x56	; 86
    1560:	f0 e0       	ldi	r31, 0x00	; 0
    1562:	80 81       	ld	r24, Z
    1564:	88 23       	and	r24, r24
    1566:	34 f7       	brge	.-52     	; 0x1534 <TWI_u8MasterSendData+0x28>
	/**Check Error Status*/
	if (  STATUS ==SLAVE_DATA_ACK  || STATUS ==SLAVE_DATA_NACK ){
		error=NoError;
	}
	return error;
    1568:	89 81       	ldd	r24, Y+1	; 0x01
}
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	cf 91       	pop	r28
    1570:	df 91       	pop	r29
    1572:	08 95       	ret

00001574 <TWI_u8MasterRecieveData>:
/************************************************************************/
				/*Master Mode  Receive Data From Slave*/
/************************************************************************/
u8   TWI_u8MasterRecieveData( u8 * Pu8_Data ){
    1574:	df 93       	push	r29
    1576:	cf 93       	push	r28
    1578:	00 d0       	rcall	.+0      	; 0x157a <TWI_u8MasterRecieveData+0x6>
    157a:	0f 92       	push	r0
    157c:	cd b7       	in	r28, 0x3d	; 61
    157e:	de b7       	in	r29, 0x3e	; 62
    1580:	9b 83       	std	Y+3, r25	; 0x03
    1582:	8a 83       	std	Y+2, r24	; 0x02
	u8 error=RecieveData_Error_exist;
    1584:	85 e0       	ldi	r24, 0x05	; 5
    1586:	89 83       	std	Y+1, r24	; 0x01
	/**Clear TWINT Flag */
	CLR_TWINT;
    1588:	a6 e5       	ldi	r26, 0x56	; 86
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	e6 e5       	ldi	r30, 0x56	; 86
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	80 68       	ori	r24, 0x80	; 128
    1594:	8c 93       	st	X, r24
	/**Pool on TWINT Flag*/
	POOL_FLAG;
    1596:	e6 e5       	ldi	r30, 0x56	; 86
    1598:	f0 e0       	ldi	r31, 0x00	; 0
    159a:	80 81       	ld	r24, Z
    159c:	88 23       	and	r24, r24
    159e:	dc f7       	brge	.-10     	; 0x1596 <TWI_u8MasterRecieveData+0x22>
	/**Receive Data*/
	*Pu8_Data=TWDR;
    15a0:	e3 e2       	ldi	r30, 0x23	; 35
    15a2:	f0 e0       	ldi	r31, 0x00	; 0
    15a4:	80 81       	ld	r24, Z
    15a6:	ea 81       	ldd	r30, Y+2	; 0x02
    15a8:	fb 81       	ldd	r31, Y+3	; 0x03
    15aa:	80 83       	st	Z, r24
	/**Check Error Status*/
	if (STATUS ==MASTER_R_DATA_ACK || STATUS== MASTER_R_DATA_NACK){
    15ac:	e1 e2       	ldi	r30, 0x21	; 33
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	88 2f       	mov	r24, r24
    15b4:	90 e0       	ldi	r25, 0x00	; 0
    15b6:	88 7f       	andi	r24, 0xF8	; 248
    15b8:	90 70       	andi	r25, 0x00	; 0
    15ba:	80 35       	cpi	r24, 0x50	; 80
    15bc:	91 05       	cpc	r25, r1
    15be:	51 f0       	breq	.+20     	; 0x15d4 <TWI_u8MasterRecieveData+0x60>
    15c0:	e1 e2       	ldi	r30, 0x21	; 33
    15c2:	f0 e0       	ldi	r31, 0x00	; 0
    15c4:	80 81       	ld	r24, Z
    15c6:	88 2f       	mov	r24, r24
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	88 7f       	andi	r24, 0xF8	; 248
    15cc:	90 70       	andi	r25, 0x00	; 0
    15ce:	88 35       	cpi	r24, 0x58	; 88
    15d0:	91 05       	cpc	r25, r1
    15d2:	09 f4       	brne	.+2      	; 0x15d6 <TWI_u8MasterRecieveData+0x62>
		error=NoError;
    15d4:	19 82       	std	Y+1, r1	; 0x01
	}
	return error;
    15d6:	89 81       	ldd	r24, Y+1	; 0x01
}
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	cf 91       	pop	r28
    15e0:	df 91       	pop	r29
    15e2:	08 95       	ret

000015e4 <TWI_vdAckEnable>:

/************************************************************************/
				/*Enable / Disable Ack bit generator*/
/************************************************************************/
void TWI_vdAckEnable(void){
    15e4:	df 93       	push	r29
    15e6:	cf 93       	push	r28
    15e8:	cd b7       	in	r28, 0x3d	; 61
    15ea:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TWCR,TWCR_TWEA);
    15ec:	a6 e5       	ldi	r26, 0x56	; 86
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e6 e5       	ldi	r30, 0x56	; 86
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	80 64       	ori	r24, 0x40	; 64
    15f8:	8c 93       	st	X, r24
}
    15fa:	cf 91       	pop	r28
    15fc:	df 91       	pop	r29
    15fe:	08 95       	ret

00001600 <TWI_vdAckDisable>:
void TWI_vdAckDisable(void){
    1600:	df 93       	push	r29
    1602:	cf 93       	push	r28
    1604:	cd b7       	in	r28, 0x3d	; 61
    1606:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(TWCR,TWCR_TWEA);
    1608:	a6 e5       	ldi	r26, 0x56	; 86
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e6 e5       	ldi	r30, 0x56	; 86
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	8f 7b       	andi	r24, 0xBF	; 191
    1614:	8c 93       	st	X, r24
}
    1616:	cf 91       	pop	r28
    1618:	df 91       	pop	r29
    161a:	08 95       	ret

0000161c <GIE_vdEnable>:
#include"../../lib/STD_TYPES.h"
#include"../../lib/BIT_MATH.h"
#include "GIE_registers.h"


void GIE_vdEnable(void){
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_IBIT);
    1624:	af e5       	ldi	r26, 0x5F	; 95
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	ef e5       	ldi	r30, 0x5F	; 95
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	80 68       	ori	r24, 0x80	; 128
    1630:	8c 93       	st	X, r24
}
    1632:	cf 91       	pop	r28
    1634:	df 91       	pop	r29
    1636:	08 95       	ret

00001638 <GIE_vdDisable>:
/*------------------------------------------------------------*/
void GIE_vdDisable(void){
    1638:	df 93       	push	r29
    163a:	cf 93       	push	r28
    163c:	cd b7       	in	r28, 0x3d	; 61
    163e:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_IBIT);
    1640:	af e5       	ldi	r26, 0x5F	; 95
    1642:	b0 e0       	ldi	r27, 0x00	; 0
    1644:	ef e5       	ldi	r30, 0x5F	; 95
    1646:	f0 e0       	ldi	r31, 0x00	; 0
    1648:	80 81       	ld	r24, Z
    164a:	8f 77       	andi	r24, 0x7F	; 127
    164c:	8c 93       	st	X, r24
}
    164e:	cf 91       	pop	r28
    1650:	df 91       	pop	r29
    1652:	08 95       	ret

00001654 <EXT0_vdEnable>:
#include"../../lib/BIT_MATH.h"
#include "EXTI_registers.h"
#include"EXTI_interface.h"


void EXT0_vdEnable(enu_SenseControl Copy_enuSenseControlMode) {
    1654:	df 93       	push	r29
    1656:	cf 93       	push	r28
    1658:	00 d0       	rcall	.+0      	; 0x165a <EXT0_vdEnable+0x6>
    165a:	0f 92       	push	r0
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	89 83       	std	Y+1, r24	; 0x01

	/*Sensing control*/
	switch (Copy_enuSenseControlMode) {
    1662:	89 81       	ldd	r24, Y+1	; 0x01
    1664:	28 2f       	mov	r18, r24
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	3b 83       	std	Y+3, r19	; 0x03
    166a:	2a 83       	std	Y+2, r18	; 0x02
    166c:	8a 81       	ldd	r24, Y+2	; 0x02
    166e:	9b 81       	ldd	r25, Y+3	; 0x03
    1670:	81 30       	cpi	r24, 0x01	; 1
    1672:	91 05       	cpc	r25, r1
    1674:	21 f1       	breq	.+72     	; 0x16be <EXT0_vdEnable+0x6a>
    1676:	2a 81       	ldd	r18, Y+2	; 0x02
    1678:	3b 81       	ldd	r19, Y+3	; 0x03
    167a:	22 30       	cpi	r18, 0x02	; 2
    167c:	31 05       	cpc	r19, r1
    167e:	2c f4       	brge	.+10     	; 0x168a <EXT0_vdEnable+0x36>
    1680:	8a 81       	ldd	r24, Y+2	; 0x02
    1682:	9b 81       	ldd	r25, Y+3	; 0x03
    1684:	00 97       	sbiw	r24, 0x00	; 0
    1686:	61 f0       	breq	.+24     	; 0x16a0 <EXT0_vdEnable+0x4c>
    1688:	46 c0       	rjmp	.+140    	; 0x1716 <EXT0_vdEnable+0xc2>
    168a:	2a 81       	ldd	r18, Y+2	; 0x02
    168c:	3b 81       	ldd	r19, Y+3	; 0x03
    168e:	22 30       	cpi	r18, 0x02	; 2
    1690:	31 05       	cpc	r19, r1
    1692:	99 f1       	breq	.+102    	; 0x16fa <EXT0_vdEnable+0xa6>
    1694:	8a 81       	ldd	r24, Y+2	; 0x02
    1696:	9b 81       	ldd	r25, Y+3	; 0x03
    1698:	83 30       	cpi	r24, 0x03	; 3
    169a:	91 05       	cpc	r25, r1
    169c:	f9 f0       	breq	.+62     	; 0x16dc <EXT0_vdEnable+0x88>
    169e:	3b c0       	rjmp	.+118    	; 0x1716 <EXT0_vdEnable+0xc2>
	case lowLevel:
		CLR_BIT(MCUCR, MCUCR_ISC01);
    16a0:	a5 e5       	ldi	r26, 0x55	; 85
    16a2:	b0 e0       	ldi	r27, 0x00	; 0
    16a4:	e5 e5       	ldi	r30, 0x55	; 85
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	8d 7f       	andi	r24, 0xFD	; 253
    16ac:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, MCUCR_ISC00);
    16ae:	a5 e5       	ldi	r26, 0x55	; 85
    16b0:	b0 e0       	ldi	r27, 0x00	; 0
    16b2:	e5 e5       	ldi	r30, 0x55	; 85
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	80 81       	ld	r24, Z
    16b8:	8e 7f       	andi	r24, 0xFE	; 254
    16ba:	8c 93       	st	X, r24
    16bc:	2c c0       	rjmp	.+88     	; 0x1716 <EXT0_vdEnable+0xc2>
		break;
	case IOC:
		CLR_BIT(MCUCR, MCUCR_ISC01);
    16be:	a5 e5       	ldi	r26, 0x55	; 85
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e5 e5       	ldi	r30, 0x55	; 85
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	8d 7f       	andi	r24, 0xFD	; 253
    16ca:	8c 93       	st	X, r24
		SET_BIT(MCUCR, MCUCR_ISC00);
    16cc:	a5 e5       	ldi	r26, 0x55	; 85
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	e5 e5       	ldi	r30, 0x55	; 85
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	80 81       	ld	r24, Z
    16d6:	81 60       	ori	r24, 0x01	; 1
    16d8:	8c 93       	st	X, r24
    16da:	1d c0       	rjmp	.+58     	; 0x1716 <EXT0_vdEnable+0xc2>
		break;
	case FallingEdge:
		SET_BIT(MCUCR, MCUCR_ISC01);
    16dc:	a5 e5       	ldi	r26, 0x55	; 85
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	e5 e5       	ldi	r30, 0x55	; 85
    16e2:	f0 e0       	ldi	r31, 0x00	; 0
    16e4:	80 81       	ld	r24, Z
    16e6:	82 60       	ori	r24, 0x02	; 2
    16e8:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, MCUCR_ISC00);
    16ea:	a5 e5       	ldi	r26, 0x55	; 85
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e5 e5       	ldi	r30, 0x55	; 85
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	8e 7f       	andi	r24, 0xFE	; 254
    16f6:	8c 93       	st	X, r24
    16f8:	0e c0       	rjmp	.+28     	; 0x1716 <EXT0_vdEnable+0xc2>
		break;
	case RisingEdge:
		SET_BIT(MCUCR, MCUCR_ISC01);
    16fa:	a5 e5       	ldi	r26, 0x55	; 85
    16fc:	b0 e0       	ldi	r27, 0x00	; 0
    16fe:	e5 e5       	ldi	r30, 0x55	; 85
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 81       	ld	r24, Z
    1704:	82 60       	ori	r24, 0x02	; 2
    1706:	8c 93       	st	X, r24
		SET_BIT(MCUCR, MCUCR_ISC00);
    1708:	a5 e5       	ldi	r26, 0x55	; 85
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	e5 e5       	ldi	r30, 0x55	; 85
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	81 60       	ori	r24, 0x01	; 1
    1714:	8c 93       	st	X, r24
		break;
	}

	/*Enable interrupt (PIE)*/
	SET_BIT(GICR, GICR_INT0);
    1716:	ab e5       	ldi	r26, 0x5B	; 91
    1718:	b0 e0       	ldi	r27, 0x00	; 0
    171a:	eb e5       	ldi	r30, 0x5B	; 91
    171c:	f0 e0       	ldi	r31, 0x00	; 0
    171e:	80 81       	ld	r24, Z
    1720:	80 64       	ori	r24, 0x40	; 64
    1722:	8c 93       	st	X, r24
}
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	cf 91       	pop	r28
    172c:	df 91       	pop	r29
    172e:	08 95       	ret

00001730 <EXT1_vdEnable>:
/*------------------------------------------------------------*/
void EXT1_vdEnable(enu_SenseControl Copy_enuSenseControlMode) {
    1730:	df 93       	push	r29
    1732:	cf 93       	push	r28
    1734:	00 d0       	rcall	.+0      	; 0x1736 <EXT1_vdEnable+0x6>
    1736:	0f 92       	push	r0
    1738:	cd b7       	in	r28, 0x3d	; 61
    173a:	de b7       	in	r29, 0x3e	; 62
    173c:	89 83       	std	Y+1, r24	; 0x01

	/*Sensing control*/
	switch (Copy_enuSenseControlMode) {
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	3b 83       	std	Y+3, r19	; 0x03
    1746:	2a 83       	std	Y+2, r18	; 0x02
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	9b 81       	ldd	r25, Y+3	; 0x03
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	91 05       	cpc	r25, r1
    1750:	21 f1       	breq	.+72     	; 0x179a <EXT1_vdEnable+0x6a>
    1752:	2a 81       	ldd	r18, Y+2	; 0x02
    1754:	3b 81       	ldd	r19, Y+3	; 0x03
    1756:	22 30       	cpi	r18, 0x02	; 2
    1758:	31 05       	cpc	r19, r1
    175a:	2c f4       	brge	.+10     	; 0x1766 <EXT1_vdEnable+0x36>
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	9b 81       	ldd	r25, Y+3	; 0x03
    1760:	00 97       	sbiw	r24, 0x00	; 0
    1762:	61 f0       	breq	.+24     	; 0x177c <EXT1_vdEnable+0x4c>
    1764:	46 c0       	rjmp	.+140    	; 0x17f2 <EXT1_vdEnable+0xc2>
    1766:	2a 81       	ldd	r18, Y+2	; 0x02
    1768:	3b 81       	ldd	r19, Y+3	; 0x03
    176a:	22 30       	cpi	r18, 0x02	; 2
    176c:	31 05       	cpc	r19, r1
    176e:	99 f1       	breq	.+102    	; 0x17d6 <EXT1_vdEnable+0xa6>
    1770:	8a 81       	ldd	r24, Y+2	; 0x02
    1772:	9b 81       	ldd	r25, Y+3	; 0x03
    1774:	83 30       	cpi	r24, 0x03	; 3
    1776:	91 05       	cpc	r25, r1
    1778:	f9 f0       	breq	.+62     	; 0x17b8 <EXT1_vdEnable+0x88>
    177a:	3b c0       	rjmp	.+118    	; 0x17f2 <EXT1_vdEnable+0xc2>
	case lowLevel:
		CLR_BIT(MCUCR, MCUCR_ISC11);
    177c:	a5 e5       	ldi	r26, 0x55	; 85
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e5 e5       	ldi	r30, 0x55	; 85
    1782:	f0 e0       	ldi	r31, 0x00	; 0
    1784:	80 81       	ld	r24, Z
    1786:	87 7f       	andi	r24, 0xF7	; 247
    1788:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, MCUCR_ISC10);
    178a:	a5 e5       	ldi	r26, 0x55	; 85
    178c:	b0 e0       	ldi	r27, 0x00	; 0
    178e:	e5 e5       	ldi	r30, 0x55	; 85
    1790:	f0 e0       	ldi	r31, 0x00	; 0
    1792:	80 81       	ld	r24, Z
    1794:	8b 7f       	andi	r24, 0xFB	; 251
    1796:	8c 93       	st	X, r24
    1798:	2c c0       	rjmp	.+88     	; 0x17f2 <EXT1_vdEnable+0xc2>
		break;
	case IOC:
		CLR_BIT(MCUCR, MCUCR_ISC11);
    179a:	a5 e5       	ldi	r26, 0x55	; 85
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e5 e5       	ldi	r30, 0x55	; 85
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	87 7f       	andi	r24, 0xF7	; 247
    17a6:	8c 93       	st	X, r24
		SET_BIT(MCUCR, MCUCR_ISC10);
    17a8:	a5 e5       	ldi	r26, 0x55	; 85
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	e5 e5       	ldi	r30, 0x55	; 85
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	84 60       	ori	r24, 0x04	; 4
    17b4:	8c 93       	st	X, r24
    17b6:	1d c0       	rjmp	.+58     	; 0x17f2 <EXT1_vdEnable+0xc2>
		break;
	case FallingEdge:
		SET_BIT(MCUCR, MCUCR_ISC11);
    17b8:	a5 e5       	ldi	r26, 0x55	; 85
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e5 e5       	ldi	r30, 0x55	; 85
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	88 60       	ori	r24, 0x08	; 8
    17c4:	8c 93       	st	X, r24
		CLR_BIT(MCUCR, MCUCR_ISC10);
    17c6:	a5 e5       	ldi	r26, 0x55	; 85
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e5 e5       	ldi	r30, 0x55	; 85
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	8b 7f       	andi	r24, 0xFB	; 251
    17d2:	8c 93       	st	X, r24
    17d4:	0e c0       	rjmp	.+28     	; 0x17f2 <EXT1_vdEnable+0xc2>
		break;
	case RisingEdge:
		SET_BIT(MCUCR, MCUCR_ISC11);
    17d6:	a5 e5       	ldi	r26, 0x55	; 85
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e5 e5       	ldi	r30, 0x55	; 85
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	88 60       	ori	r24, 0x08	; 8
    17e2:	8c 93       	st	X, r24
		SET_BIT(MCUCR, MCUCR_ISC10);
    17e4:	a5 e5       	ldi	r26, 0x55	; 85
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e5 e5       	ldi	r30, 0x55	; 85
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	84 60       	ori	r24, 0x04	; 4
    17f0:	8c 93       	st	X, r24
		break;
	}

	/*Enable interrupt (PIE)*/
	SET_BIT(GICR, GICR_INT1);
    17f2:	ab e5       	ldi	r26, 0x5B	; 91
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	eb e5       	ldi	r30, 0x5B	; 91
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	80 68       	ori	r24, 0x80	; 128
    17fe:	8c 93       	st	X, r24
}
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	0f 90       	pop	r0
    1806:	cf 91       	pop	r28
    1808:	df 91       	pop	r29
    180a:	08 95       	ret

0000180c <EXT2_vdEnable>:
/*------------------------------------------------------------*/
void EXT2_vdEnable(enu_SenseControl Copy_enuSenseControlMode) {
    180c:	df 93       	push	r29
    180e:	cf 93       	push	r28
    1810:	00 d0       	rcall	.+0      	; 0x1812 <EXT2_vdEnable+0x6>
    1812:	0f 92       	push	r0
    1814:	cd b7       	in	r28, 0x3d	; 61
    1816:	de b7       	in	r29, 0x3e	; 62
    1818:	89 83       	std	Y+1, r24	; 0x01
	/*Sensing control*/
	switch (Copy_enuSenseControlMode) {
    181a:	89 81       	ldd	r24, Y+1	; 0x01
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	3b 83       	std	Y+3, r19	; 0x03
    1822:	2a 83       	std	Y+2, r18	; 0x02
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	9b 81       	ldd	r25, Y+3	; 0x03
    1828:	82 30       	cpi	r24, 0x02	; 2
    182a:	91 05       	cpc	r25, r1
    182c:	31 f0       	breq	.+12     	; 0x183a <EXT2_vdEnable+0x2e>
    182e:	2a 81       	ldd	r18, Y+2	; 0x02
    1830:	3b 81       	ldd	r19, Y+3	; 0x03
    1832:	23 30       	cpi	r18, 0x03	; 3
    1834:	31 05       	cpc	r19, r1
    1836:	49 f0       	breq	.+18     	; 0x184a <EXT2_vdEnable+0x3e>
    1838:	0f c0       	rjmp	.+30     	; 0x1858 <EXT2_vdEnable+0x4c>
	case RisingEdge:
		SET_BIT(MCUCSR, MCUCSR_ISC2);
    183a:	a4 e5       	ldi	r26, 0x54	; 84
    183c:	b0 e0       	ldi	r27, 0x00	; 0
    183e:	e4 e5       	ldi	r30, 0x54	; 84
    1840:	f0 e0       	ldi	r31, 0x00	; 0
    1842:	80 81       	ld	r24, Z
    1844:	80 64       	ori	r24, 0x40	; 64
    1846:	8c 93       	st	X, r24
    1848:	07 c0       	rjmp	.+14     	; 0x1858 <EXT2_vdEnable+0x4c>
		break;
	case FallingEdge:
		CLR_BIT(MCUCSR, MCUCSR_ISC2);
    184a:	a4 e5       	ldi	r26, 0x54	; 84
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	e4 e5       	ldi	r30, 0x54	; 84
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	8f 7b       	andi	r24, 0xBF	; 191
    1856:	8c 93       	st	X, r24
	case IOC:
		break;
	}

	/*Enable interrupt (PIE)*/
	SET_BIT(GICR, GICR_INT2);
    1858:	ab e5       	ldi	r26, 0x5B	; 91
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	eb e5       	ldi	r30, 0x5B	; 91
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	80 62       	ori	r24, 0x20	; 32
    1864:	8c 93       	st	X, r24
}
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <EXT0_vdDisable>:
/*------------------------------------------------------------*/
void EXT0_vdDisable(void) {
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR, GICR_INT0);
    187a:	ab e5       	ldi	r26, 0x5B	; 91
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	eb e5       	ldi	r30, 0x5B	; 91
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	80 81       	ld	r24, Z
    1884:	80 64       	ori	r24, 0x40	; 64
    1886:	8c 93       	st	X, r24
}
    1888:	cf 91       	pop	r28
    188a:	df 91       	pop	r29
    188c:	08 95       	ret

0000188e <EXT1_vdDisable>:
/*------------------------------------------------------------*/
void EXT1_vdDisable(void) {
    188e:	df 93       	push	r29
    1890:	cf 93       	push	r28
    1892:	cd b7       	in	r28, 0x3d	; 61
    1894:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR, GICR_INT1);
    1896:	ab e5       	ldi	r26, 0x5B	; 91
    1898:	b0 e0       	ldi	r27, 0x00	; 0
    189a:	eb e5       	ldi	r30, 0x5B	; 91
    189c:	f0 e0       	ldi	r31, 0x00	; 0
    189e:	80 81       	ld	r24, Z
    18a0:	80 68       	ori	r24, 0x80	; 128
    18a2:	8c 93       	st	X, r24
}
    18a4:	cf 91       	pop	r28
    18a6:	df 91       	pop	r29
    18a8:	08 95       	ret

000018aa <EXT2_vdDisable>:
/*------------------------------------------------------------*/
void EXT2_vdDisable(void) {
    18aa:	df 93       	push	r29
    18ac:	cf 93       	push	r28
    18ae:	cd b7       	in	r28, 0x3d	; 61
    18b0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(GICR, GICR_INT2);
    18b2:	ab e5       	ldi	r26, 0x5B	; 91
    18b4:	b0 e0       	ldi	r27, 0x00	; 0
    18b6:	eb e5       	ldi	r30, 0x5B	; 91
    18b8:	f0 e0       	ldi	r31, 0x00	; 0
    18ba:	80 81       	ld	r24, Z
    18bc:	80 62       	ori	r24, 0x20	; 32
    18be:	8c 93       	st	X, r24

}
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <DIO_u8SetPinDirection>:
#include"../../lib/STD_TYPES.h"
#include"DIO_interface.h"
#include"DIO_registers.h"


u8 DIO_u8SetPinDirection(enum_port Copy_enuPort, enum_pin Copy_enuPin, enum_direction Copy_enuDirection){
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
    18ce:	28 97       	sbiw	r28, 0x08	; 8
    18d0:	0f b6       	in	r0, 0x3f	; 63
    18d2:	f8 94       	cli
    18d4:	de bf       	out	0x3e, r29	; 62
    18d6:	0f be       	out	0x3f, r0	; 63
    18d8:	cd bf       	out	0x3d, r28	; 61
    18da:	89 83       	std	Y+1, r24	; 0x01
    18dc:	6a 83       	std	Y+2, r22	; 0x02
    18de:	4b 83       	std	Y+3, r20	; 0x03
/*Input*/
	if(Copy_enuDirection== pinInput){
    18e0:	8b 81       	ldd	r24, Y+3	; 0x03
    18e2:	88 23       	and	r24, r24
    18e4:	09 f0       	breq	.+2      	; 0x18e8 <DIO_u8SetPinDirection+0x22>
    18e6:	74 c0       	rjmp	.+232    	; 0x19d0 <DIO_u8SetPinDirection+0x10a>
		switch(Copy_enuPort){
    18e8:	89 81       	ldd	r24, Y+1	; 0x01
    18ea:	28 2f       	mov	r18, r24
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	3f 83       	std	Y+7, r19	; 0x07
    18f0:	2e 83       	std	Y+6, r18	; 0x06
    18f2:	8e 81       	ldd	r24, Y+6	; 0x06
    18f4:	9f 81       	ldd	r25, Y+7	; 0x07
    18f6:	81 30       	cpi	r24, 0x01	; 1
    18f8:	91 05       	cpc	r25, r1
    18fa:	59 f1       	breq	.+86     	; 0x1952 <DIO_u8SetPinDirection+0x8c>
    18fc:	2e 81       	ldd	r18, Y+6	; 0x06
    18fe:	3f 81       	ldd	r19, Y+7	; 0x07
    1900:	22 30       	cpi	r18, 0x02	; 2
    1902:	31 05       	cpc	r19, r1
    1904:	2c f4       	brge	.+10     	; 0x1910 <DIO_u8SetPinDirection+0x4a>
    1906:	8e 81       	ldd	r24, Y+6	; 0x06
    1908:	9f 81       	ldd	r25, Y+7	; 0x07
    190a:	00 97       	sbiw	r24, 0x00	; 0
    190c:	69 f0       	breq	.+26     	; 0x1928 <DIO_u8SetPinDirection+0x62>
    190e:	d2 c0       	rjmp	.+420    	; 0x1ab4 <DIO_u8SetPinDirection+0x1ee>
    1910:	2e 81       	ldd	r18, Y+6	; 0x06
    1912:	3f 81       	ldd	r19, Y+7	; 0x07
    1914:	22 30       	cpi	r18, 0x02	; 2
    1916:	31 05       	cpc	r19, r1
    1918:	89 f1       	breq	.+98     	; 0x197c <DIO_u8SetPinDirection+0xb6>
    191a:	8e 81       	ldd	r24, Y+6	; 0x06
    191c:	9f 81       	ldd	r25, Y+7	; 0x07
    191e:	83 30       	cpi	r24, 0x03	; 3
    1920:	91 05       	cpc	r25, r1
    1922:	09 f4       	brne	.+2      	; 0x1926 <DIO_u8SetPinDirection+0x60>
    1924:	40 c0       	rjmp	.+128    	; 0x19a6 <DIO_u8SetPinDirection+0xe0>
    1926:	c6 c0       	rjmp	.+396    	; 0x1ab4 <DIO_u8SetPinDirection+0x1ee>
		case portA: CLR_BIT(DDRA,Copy_enuPin);break;
    1928:	aa e3       	ldi	r26, 0x3A	; 58
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	ea e3       	ldi	r30, 0x3A	; 58
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	48 2f       	mov	r20, r24
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <DIO_u8SetPinDirection+0x80>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <DIO_u8SetPinDirection+0x7c>
    194a:	80 95       	com	r24
    194c:	84 23       	and	r24, r20
    194e:	8c 93       	st	X, r24
    1950:	b1 c0       	rjmp	.+354    	; 0x1ab4 <DIO_u8SetPinDirection+0x1ee>
		case portB: CLR_BIT(DDRB,Copy_enuPin);break;
    1952:	a7 e3       	ldi	r26, 0x37	; 55
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	e7 e3       	ldi	r30, 0x37	; 55
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	48 2f       	mov	r20, r24
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	02 2e       	mov	r0, r18
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <DIO_u8SetPinDirection+0xaa>
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	0a 94       	dec	r0
    1972:	e2 f7       	brpl	.-8      	; 0x196c <DIO_u8SetPinDirection+0xa6>
    1974:	80 95       	com	r24
    1976:	84 23       	and	r24, r20
    1978:	8c 93       	st	X, r24
    197a:	9c c0       	rjmp	.+312    	; 0x1ab4 <DIO_u8SetPinDirection+0x1ee>
		case portC: CLR_BIT(DDRC,Copy_enuPin);break;
    197c:	a4 e3       	ldi	r26, 0x34	; 52
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e4 e3       	ldi	r30, 0x34	; 52
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	80 81       	ld	r24, Z
    1986:	48 2f       	mov	r20, r24
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	02 2e       	mov	r0, r18
    1994:	02 c0       	rjmp	.+4      	; 0x199a <DIO_u8SetPinDirection+0xd4>
    1996:	88 0f       	add	r24, r24
    1998:	99 1f       	adc	r25, r25
    199a:	0a 94       	dec	r0
    199c:	e2 f7       	brpl	.-8      	; 0x1996 <DIO_u8SetPinDirection+0xd0>
    199e:	80 95       	com	r24
    19a0:	84 23       	and	r24, r20
    19a2:	8c 93       	st	X, r24
    19a4:	87 c0       	rjmp	.+270    	; 0x1ab4 <DIO_u8SetPinDirection+0x1ee>
		case portD: CLR_BIT(DDRD,Copy_enuPin);break;
    19a6:	a1 e3       	ldi	r26, 0x31	; 49
    19a8:	b0 e0       	ldi	r27, 0x00	; 0
    19aa:	e1 e3       	ldi	r30, 0x31	; 49
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	48 2f       	mov	r20, r24
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	28 2f       	mov	r18, r24
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	90 e0       	ldi	r25, 0x00	; 0
    19bc:	02 2e       	mov	r0, r18
    19be:	02 c0       	rjmp	.+4      	; 0x19c4 <DIO_u8SetPinDirection+0xfe>
    19c0:	88 0f       	add	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	0a 94       	dec	r0
    19c6:	e2 f7       	brpl	.-8      	; 0x19c0 <DIO_u8SetPinDirection+0xfa>
    19c8:	80 95       	com	r24
    19ca:	84 23       	and	r24, r20
    19cc:	8c 93       	st	X, r24
    19ce:	72 c0       	rjmp	.+228    	; 0x1ab4 <DIO_u8SetPinDirection+0x1ee>
		}

	}
/*Output*/
	else if(Copy_enuDirection== pinOutput){
    19d0:	8b 81       	ldd	r24, Y+3	; 0x03
    19d2:	81 30       	cpi	r24, 0x01	; 1
    19d4:	09 f0       	breq	.+2      	; 0x19d8 <DIO_u8SetPinDirection+0x112>
    19d6:	6e c0       	rjmp	.+220    	; 0x1ab4 <DIO_u8SetPinDirection+0x1ee>
		switch(Copy_enuPort){
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	28 2f       	mov	r18, r24
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	3d 83       	std	Y+5, r19	; 0x05
    19e0:	2c 83       	std	Y+4, r18	; 0x04
    19e2:	8c 81       	ldd	r24, Y+4	; 0x04
    19e4:	9d 81       	ldd	r25, Y+5	; 0x05
    19e6:	81 30       	cpi	r24, 0x01	; 1
    19e8:	91 05       	cpc	r25, r1
    19ea:	49 f1       	breq	.+82     	; 0x1a3e <DIO_u8SetPinDirection+0x178>
    19ec:	2c 81       	ldd	r18, Y+4	; 0x04
    19ee:	3d 81       	ldd	r19, Y+5	; 0x05
    19f0:	22 30       	cpi	r18, 0x02	; 2
    19f2:	31 05       	cpc	r19, r1
    19f4:	2c f4       	brge	.+10     	; 0x1a00 <DIO_u8SetPinDirection+0x13a>
    19f6:	8c 81       	ldd	r24, Y+4	; 0x04
    19f8:	9d 81       	ldd	r25, Y+5	; 0x05
    19fa:	00 97       	sbiw	r24, 0x00	; 0
    19fc:	61 f0       	breq	.+24     	; 0x1a16 <DIO_u8SetPinDirection+0x150>
    19fe:	5a c0       	rjmp	.+180    	; 0x1ab4 <DIO_u8SetPinDirection+0x1ee>
    1a00:	2c 81       	ldd	r18, Y+4	; 0x04
    1a02:	3d 81       	ldd	r19, Y+5	; 0x05
    1a04:	22 30       	cpi	r18, 0x02	; 2
    1a06:	31 05       	cpc	r19, r1
    1a08:	71 f1       	breq	.+92     	; 0x1a66 <DIO_u8SetPinDirection+0x1a0>
    1a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0e:	83 30       	cpi	r24, 0x03	; 3
    1a10:	91 05       	cpc	r25, r1
    1a12:	e9 f1       	breq	.+122    	; 0x1a8e <DIO_u8SetPinDirection+0x1c8>
    1a14:	4f c0       	rjmp	.+158    	; 0x1ab4 <DIO_u8SetPinDirection+0x1ee>
		case portA: SET_BIT(DDRA,Copy_enuPin);break;
    1a16:	aa e3       	ldi	r26, 0x3A	; 58
    1a18:	b0 e0       	ldi	r27, 0x00	; 0
    1a1a:	ea e3       	ldi	r30, 0x3A	; 58
    1a1c:	f0 e0       	ldi	r31, 0x00	; 0
    1a1e:	80 81       	ld	r24, Z
    1a20:	48 2f       	mov	r20, r24
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	28 2f       	mov	r18, r24
    1a26:	30 e0       	ldi	r19, 0x00	; 0
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	02 2e       	mov	r0, r18
    1a2e:	02 c0       	rjmp	.+4      	; 0x1a34 <DIO_u8SetPinDirection+0x16e>
    1a30:	88 0f       	add	r24, r24
    1a32:	99 1f       	adc	r25, r25
    1a34:	0a 94       	dec	r0
    1a36:	e2 f7       	brpl	.-8      	; 0x1a30 <DIO_u8SetPinDirection+0x16a>
    1a38:	84 2b       	or	r24, r20
    1a3a:	8c 93       	st	X, r24
    1a3c:	3b c0       	rjmp	.+118    	; 0x1ab4 <DIO_u8SetPinDirection+0x1ee>
		case portB: SET_BIT(DDRB,Copy_enuPin);break;
    1a3e:	a7 e3       	ldi	r26, 0x37	; 55
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e7 e3       	ldi	r30, 0x37	; 55
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	48 2f       	mov	r20, r24
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	02 2e       	mov	r0, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <DIO_u8SetPinDirection+0x196>
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	0a 94       	dec	r0
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <DIO_u8SetPinDirection+0x192>
    1a60:	84 2b       	or	r24, r20
    1a62:	8c 93       	st	X, r24
    1a64:	27 c0       	rjmp	.+78     	; 0x1ab4 <DIO_u8SetPinDirection+0x1ee>
		case portC: SET_BIT(DDRC,Copy_enuPin);break;
    1a66:	a4 e3       	ldi	r26, 0x34	; 52
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e4 e3       	ldi	r30, 0x34	; 52
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	48 2f       	mov	r20, r24
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	02 2e       	mov	r0, r18
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <DIO_u8SetPinDirection+0x1be>
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	0a 94       	dec	r0
    1a86:	e2 f7       	brpl	.-8      	; 0x1a80 <DIO_u8SetPinDirection+0x1ba>
    1a88:	84 2b       	or	r24, r20
    1a8a:	8c 93       	st	X, r24
    1a8c:	13 c0       	rjmp	.+38     	; 0x1ab4 <DIO_u8SetPinDirection+0x1ee>
		case portD: SET_BIT(DDRD,Copy_enuPin);break;
    1a8e:	a1 e3       	ldi	r26, 0x31	; 49
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e1 e3       	ldi	r30, 0x31	; 49
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	48 2f       	mov	r20, r24
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	02 2e       	mov	r0, r18
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <DIO_u8SetPinDirection+0x1e6>
    1aa8:	88 0f       	add	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	0a 94       	dec	r0
    1aae:	e2 f7       	brpl	.-8      	; 0x1aa8 <DIO_u8SetPinDirection+0x1e2>
    1ab0:	84 2b       	or	r24, r20
    1ab2:	8c 93       	st	X, r24
		}

	}
}
    1ab4:	28 96       	adiw	r28, 0x08	; 8
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	cf 91       	pop	r28
    1ac2:	df 91       	pop	r29
    1ac4:	08 95       	ret

00001ac6 <DIO_u8SetPinValue>:
/*------------------------------------------------------------*/
u8 DIO_u8SetPinValue(enum_port Copy_enuPort, enum_pin Copy_enuPin, enum_value Copy_enuvalue){
    1ac6:	df 93       	push	r29
    1ac8:	cf 93       	push	r28
    1aca:	cd b7       	in	r28, 0x3d	; 61
    1acc:	de b7       	in	r29, 0x3e	; 62
    1ace:	28 97       	sbiw	r28, 0x08	; 8
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	de bf       	out	0x3e, r29	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	cd bf       	out	0x3d, r28	; 61
    1ada:	89 83       	std	Y+1, r24	; 0x01
    1adc:	6a 83       	std	Y+2, r22	; 0x02
    1ade:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_enuvalue == pinHigh){
    1ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae2:	81 30       	cpi	r24, 0x01	; 1
    1ae4:	09 f0       	breq	.+2      	; 0x1ae8 <DIO_u8SetPinValue+0x22>
    1ae6:	6f c0       	rjmp	.+222    	; 0x1bc6 <DIO_u8SetPinValue+0x100>
		switch (Copy_enuPort){
    1ae8:	89 81       	ldd	r24, Y+1	; 0x01
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	3f 83       	std	Y+7, r19	; 0x07
    1af0:	2e 83       	std	Y+6, r18	; 0x06
    1af2:	8e 81       	ldd	r24, Y+6	; 0x06
    1af4:	9f 81       	ldd	r25, Y+7	; 0x07
    1af6:	81 30       	cpi	r24, 0x01	; 1
    1af8:	91 05       	cpc	r25, r1
    1afa:	49 f1       	breq	.+82     	; 0x1b4e <DIO_u8SetPinValue+0x88>
    1afc:	2e 81       	ldd	r18, Y+6	; 0x06
    1afe:	3f 81       	ldd	r19, Y+7	; 0x07
    1b00:	22 30       	cpi	r18, 0x02	; 2
    1b02:	31 05       	cpc	r19, r1
    1b04:	2c f4       	brge	.+10     	; 0x1b10 <DIO_u8SetPinValue+0x4a>
    1b06:	8e 81       	ldd	r24, Y+6	; 0x06
    1b08:	9f 81       	ldd	r25, Y+7	; 0x07
    1b0a:	00 97       	sbiw	r24, 0x00	; 0
    1b0c:	61 f0       	breq	.+24     	; 0x1b26 <DIO_u8SetPinValue+0x60>
    1b0e:	d2 c0       	rjmp	.+420    	; 0x1cb4 <DIO_u8SetPinValue+0x1ee>
    1b10:	2e 81       	ldd	r18, Y+6	; 0x06
    1b12:	3f 81       	ldd	r19, Y+7	; 0x07
    1b14:	22 30       	cpi	r18, 0x02	; 2
    1b16:	31 05       	cpc	r19, r1
    1b18:	71 f1       	breq	.+92     	; 0x1b76 <DIO_u8SetPinValue+0xb0>
    1b1a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b1c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b1e:	83 30       	cpi	r24, 0x03	; 3
    1b20:	91 05       	cpc	r25, r1
    1b22:	e9 f1       	breq	.+122    	; 0x1b9e <DIO_u8SetPinValue+0xd8>
    1b24:	c7 c0       	rjmp	.+398    	; 0x1cb4 <DIO_u8SetPinValue+0x1ee>
		case portA: SET_BIT(PORTA,Copy_enuPin);break;
    1b26:	ab e3       	ldi	r26, 0x3B	; 59
    1b28:	b0 e0       	ldi	r27, 0x00	; 0
    1b2a:	eb e3       	ldi	r30, 0x3B	; 59
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	48 2f       	mov	r20, r24
    1b32:	8a 81       	ldd	r24, Y+2	; 0x02
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	02 2e       	mov	r0, r18
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <DIO_u8SetPinValue+0x7e>
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	0a 94       	dec	r0
    1b46:	e2 f7       	brpl	.-8      	; 0x1b40 <DIO_u8SetPinValue+0x7a>
    1b48:	84 2b       	or	r24, r20
    1b4a:	8c 93       	st	X, r24
    1b4c:	b3 c0       	rjmp	.+358    	; 0x1cb4 <DIO_u8SetPinValue+0x1ee>
		case portB: SET_BIT(PORTB,Copy_enuPin);break;
    1b4e:	a8 e3       	ldi	r26, 0x38	; 56
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	e8 e3       	ldi	r30, 0x38	; 56
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	48 2f       	mov	r20, r24
    1b5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	02 2e       	mov	r0, r18
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <DIO_u8SetPinValue+0xa6>
    1b68:	88 0f       	add	r24, r24
    1b6a:	99 1f       	adc	r25, r25
    1b6c:	0a 94       	dec	r0
    1b6e:	e2 f7       	brpl	.-8      	; 0x1b68 <DIO_u8SetPinValue+0xa2>
    1b70:	84 2b       	or	r24, r20
    1b72:	8c 93       	st	X, r24
    1b74:	9f c0       	rjmp	.+318    	; 0x1cb4 <DIO_u8SetPinValue+0x1ee>
		case portC: SET_BIT(PORTC,Copy_enuPin);break;
    1b76:	a5 e3       	ldi	r26, 0x35	; 53
    1b78:	b0 e0       	ldi	r27, 0x00	; 0
    1b7a:	e5 e3       	ldi	r30, 0x35	; 53
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	80 81       	ld	r24, Z
    1b80:	48 2f       	mov	r20, r24
    1b82:	8a 81       	ldd	r24, Y+2	; 0x02
    1b84:	28 2f       	mov	r18, r24
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	02 2e       	mov	r0, r18
    1b8e:	02 c0       	rjmp	.+4      	; 0x1b94 <DIO_u8SetPinValue+0xce>
    1b90:	88 0f       	add	r24, r24
    1b92:	99 1f       	adc	r25, r25
    1b94:	0a 94       	dec	r0
    1b96:	e2 f7       	brpl	.-8      	; 0x1b90 <DIO_u8SetPinValue+0xca>
    1b98:	84 2b       	or	r24, r20
    1b9a:	8c 93       	st	X, r24
    1b9c:	8b c0       	rjmp	.+278    	; 0x1cb4 <DIO_u8SetPinValue+0x1ee>
		case portD: SET_BIT(PORTD,Copy_enuPin);break;
    1b9e:	a2 e3       	ldi	r26, 0x32	; 50
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	e2 e3       	ldi	r30, 0x32	; 50
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	48 2f       	mov	r20, r24
    1baa:	8a 81       	ldd	r24, Y+2	; 0x02
    1bac:	28 2f       	mov	r18, r24
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	81 e0       	ldi	r24, 0x01	; 1
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	02 2e       	mov	r0, r18
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <DIO_u8SetPinValue+0xf6>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	0a 94       	dec	r0
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <DIO_u8SetPinValue+0xf2>
    1bc0:	84 2b       	or	r24, r20
    1bc2:	8c 93       	st	X, r24
    1bc4:	77 c0       	rjmp	.+238    	; 0x1cb4 <DIO_u8SetPinValue+0x1ee>
		}
	}
	else if (Copy_enuvalue==pinLow){
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	88 23       	and	r24, r24
    1bca:	09 f0       	breq	.+2      	; 0x1bce <DIO_u8SetPinValue+0x108>
    1bcc:	73 c0       	rjmp	.+230    	; 0x1cb4 <DIO_u8SetPinValue+0x1ee>
		switch(Copy_enuPort){
    1bce:	89 81       	ldd	r24, Y+1	; 0x01
    1bd0:	28 2f       	mov	r18, r24
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	3d 83       	std	Y+5, r19	; 0x05
    1bd6:	2c 83       	std	Y+4, r18	; 0x04
    1bd8:	8c 81       	ldd	r24, Y+4	; 0x04
    1bda:	9d 81       	ldd	r25, Y+5	; 0x05
    1bdc:	81 30       	cpi	r24, 0x01	; 1
    1bde:	91 05       	cpc	r25, r1
    1be0:	59 f1       	breq	.+86     	; 0x1c38 <DIO_u8SetPinValue+0x172>
    1be2:	2c 81       	ldd	r18, Y+4	; 0x04
    1be4:	3d 81       	ldd	r19, Y+5	; 0x05
    1be6:	22 30       	cpi	r18, 0x02	; 2
    1be8:	31 05       	cpc	r19, r1
    1bea:	2c f4       	brge	.+10     	; 0x1bf6 <DIO_u8SetPinValue+0x130>
    1bec:	8c 81       	ldd	r24, Y+4	; 0x04
    1bee:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf0:	00 97       	sbiw	r24, 0x00	; 0
    1bf2:	69 f0       	breq	.+26     	; 0x1c0e <DIO_u8SetPinValue+0x148>
    1bf4:	5f c0       	rjmp	.+190    	; 0x1cb4 <DIO_u8SetPinValue+0x1ee>
    1bf6:	2c 81       	ldd	r18, Y+4	; 0x04
    1bf8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bfa:	22 30       	cpi	r18, 0x02	; 2
    1bfc:	31 05       	cpc	r19, r1
    1bfe:	89 f1       	breq	.+98     	; 0x1c62 <DIO_u8SetPinValue+0x19c>
    1c00:	8c 81       	ldd	r24, Y+4	; 0x04
    1c02:	9d 81       	ldd	r25, Y+5	; 0x05
    1c04:	83 30       	cpi	r24, 0x03	; 3
    1c06:	91 05       	cpc	r25, r1
    1c08:	09 f4       	brne	.+2      	; 0x1c0c <DIO_u8SetPinValue+0x146>
    1c0a:	40 c0       	rjmp	.+128    	; 0x1c8c <DIO_u8SetPinValue+0x1c6>
    1c0c:	53 c0       	rjmp	.+166    	; 0x1cb4 <DIO_u8SetPinValue+0x1ee>
		case portA: CLR_BIT(PORTA,Copy_enuPin);break;
    1c0e:	ab e3       	ldi	r26, 0x3B	; 59
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	eb e3       	ldi	r30, 0x3B	; 59
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	48 2f       	mov	r20, r24
    1c1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c1c:	28 2f       	mov	r18, r24
    1c1e:	30 e0       	ldi	r19, 0x00	; 0
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	02 2e       	mov	r0, r18
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <DIO_u8SetPinValue+0x166>
    1c28:	88 0f       	add	r24, r24
    1c2a:	99 1f       	adc	r25, r25
    1c2c:	0a 94       	dec	r0
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <DIO_u8SetPinValue+0x162>
    1c30:	80 95       	com	r24
    1c32:	84 23       	and	r24, r20
    1c34:	8c 93       	st	X, r24
    1c36:	3e c0       	rjmp	.+124    	; 0x1cb4 <DIO_u8SetPinValue+0x1ee>
		case portB: CLR_BIT(PORTB,Copy_enuPin);break;
    1c38:	a8 e3       	ldi	r26, 0x38	; 56
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e8 e3       	ldi	r30, 0x38	; 56
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	48 2f       	mov	r20, r24
    1c44:	8a 81       	ldd	r24, Y+2	; 0x02
    1c46:	28 2f       	mov	r18, r24
    1c48:	30 e0       	ldi	r19, 0x00	; 0
    1c4a:	81 e0       	ldi	r24, 0x01	; 1
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	02 2e       	mov	r0, r18
    1c50:	02 c0       	rjmp	.+4      	; 0x1c56 <DIO_u8SetPinValue+0x190>
    1c52:	88 0f       	add	r24, r24
    1c54:	99 1f       	adc	r25, r25
    1c56:	0a 94       	dec	r0
    1c58:	e2 f7       	brpl	.-8      	; 0x1c52 <DIO_u8SetPinValue+0x18c>
    1c5a:	80 95       	com	r24
    1c5c:	84 23       	and	r24, r20
    1c5e:	8c 93       	st	X, r24
    1c60:	29 c0       	rjmp	.+82     	; 0x1cb4 <DIO_u8SetPinValue+0x1ee>
		case portC: CLR_BIT(PORTC,Copy_enuPin);break;
    1c62:	a5 e3       	ldi	r26, 0x35	; 53
    1c64:	b0 e0       	ldi	r27, 0x00	; 0
    1c66:	e5 e3       	ldi	r30, 0x35	; 53
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	48 2f       	mov	r20, r24
    1c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c70:	28 2f       	mov	r18, r24
    1c72:	30 e0       	ldi	r19, 0x00	; 0
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	90 e0       	ldi	r25, 0x00	; 0
    1c78:	02 2e       	mov	r0, r18
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <DIO_u8SetPinValue+0x1ba>
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	0a 94       	dec	r0
    1c82:	e2 f7       	brpl	.-8      	; 0x1c7c <DIO_u8SetPinValue+0x1b6>
    1c84:	80 95       	com	r24
    1c86:	84 23       	and	r24, r20
    1c88:	8c 93       	st	X, r24
    1c8a:	14 c0       	rjmp	.+40     	; 0x1cb4 <DIO_u8SetPinValue+0x1ee>
		case portD: CLR_BIT(PORTD,Copy_enuPin);break;
    1c8c:	a2 e3       	ldi	r26, 0x32	; 50
    1c8e:	b0 e0       	ldi	r27, 0x00	; 0
    1c90:	e2 e3       	ldi	r30, 0x32	; 50
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	48 2f       	mov	r20, r24
    1c98:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	02 2e       	mov	r0, r18
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <DIO_u8SetPinValue+0x1e4>
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	0a 94       	dec	r0
    1cac:	e2 f7       	brpl	.-8      	; 0x1ca6 <DIO_u8SetPinValue+0x1e0>
    1cae:	80 95       	com	r24
    1cb0:	84 23       	and	r24, r20
    1cb2:	8c 93       	st	X, r24
		}
	}

}
    1cb4:	28 96       	adiw	r28, 0x08	; 8
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <DIO_u8GetPinValue>:
/*------------------------------------------------------------*/
u8 DIO_u8GetPinValue(enum_port Copy_enuPort, enum_pin Copy_enuPin, u8 *pu8Value){
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	cd b7       	in	r28, 0x3d	; 61
    1ccc:	de b7       	in	r29, 0x3e	; 62
    1cce:	27 97       	sbiw	r28, 0x07	; 7
    1cd0:	0f b6       	in	r0, 0x3f	; 63
    1cd2:	f8 94       	cli
    1cd4:	de bf       	out	0x3e, r29	; 62
    1cd6:	0f be       	out	0x3f, r0	; 63
    1cd8:	cd bf       	out	0x3d, r28	; 61
    1cda:	89 83       	std	Y+1, r24	; 0x01
    1cdc:	6a 83       	std	Y+2, r22	; 0x02
    1cde:	5c 83       	std	Y+4, r21	; 0x04
    1ce0:	4b 83       	std	Y+3, r20	; 0x03

	switch (Copy_enuPort){
    1ce2:	89 81       	ldd	r24, Y+1	; 0x01
    1ce4:	28 2f       	mov	r18, r24
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	3e 83       	std	Y+6, r19	; 0x06
    1cea:	2d 83       	std	Y+5, r18	; 0x05
    1cec:	4d 81       	ldd	r20, Y+5	; 0x05
    1cee:	5e 81       	ldd	r21, Y+6	; 0x06
    1cf0:	41 30       	cpi	r20, 0x01	; 1
    1cf2:	51 05       	cpc	r21, r1
    1cf4:	59 f1       	breq	.+86     	; 0x1d4c <DIO_u8GetPinValue+0x86>
    1cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfa:	82 30       	cpi	r24, 0x02	; 2
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	34 f4       	brge	.+12     	; 0x1d0c <DIO_u8GetPinValue+0x46>
    1d00:	2d 81       	ldd	r18, Y+5	; 0x05
    1d02:	3e 81       	ldd	r19, Y+6	; 0x06
    1d04:	21 15       	cp	r18, r1
    1d06:	31 05       	cpc	r19, r1
    1d08:	69 f0       	breq	.+26     	; 0x1d24 <DIO_u8GetPinValue+0x5e>
    1d0a:	5b c0       	rjmp	.+182    	; 0x1dc2 <DIO_u8GetPinValue+0xfc>
    1d0c:	4d 81       	ldd	r20, Y+5	; 0x05
    1d0e:	5e 81       	ldd	r21, Y+6	; 0x06
    1d10:	42 30       	cpi	r20, 0x02	; 2
    1d12:	51 05       	cpc	r21, r1
    1d14:	79 f1       	breq	.+94     	; 0x1d74 <DIO_u8GetPinValue+0xae>
    1d16:	8d 81       	ldd	r24, Y+5	; 0x05
    1d18:	9e 81       	ldd	r25, Y+6	; 0x06
    1d1a:	83 30       	cpi	r24, 0x03	; 3
    1d1c:	91 05       	cpc	r25, r1
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <DIO_u8GetPinValue+0x5c>
    1d20:	3d c0       	rjmp	.+122    	; 0x1d9c <DIO_u8GetPinValue+0xd6>
    1d22:	4f c0       	rjmp	.+158    	; 0x1dc2 <DIO_u8GetPinValue+0xfc>
	case portA: *pu8Value=GET_BIT(PINA,Copy_enuPin);break;
    1d24:	e9 e3       	ldi	r30, 0x39	; 57
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	28 2f       	mov	r18, r24
    1d2c:	30 e0       	ldi	r19, 0x00	; 0
    1d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d30:	88 2f       	mov	r24, r24
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	a9 01       	movw	r20, r18
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <DIO_u8GetPinValue+0x76>
    1d38:	55 95       	asr	r21
    1d3a:	47 95       	ror	r20
    1d3c:	8a 95       	dec	r24
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <DIO_u8GetPinValue+0x72>
    1d40:	ca 01       	movw	r24, r20
    1d42:	81 70       	andi	r24, 0x01	; 1
    1d44:	eb 81       	ldd	r30, Y+3	; 0x03
    1d46:	fc 81       	ldd	r31, Y+4	; 0x04
    1d48:	80 83       	st	Z, r24
    1d4a:	3b c0       	rjmp	.+118    	; 0x1dc2 <DIO_u8GetPinValue+0xfc>
	case portB: *pu8Value=GET_BIT(PINB,Copy_enuPin);break;
    1d4c:	e6 e3       	ldi	r30, 0x36	; 54
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	28 2f       	mov	r18, r24
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	8a 81       	ldd	r24, Y+2	; 0x02
    1d58:	88 2f       	mov	r24, r24
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	a9 01       	movw	r20, r18
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <DIO_u8GetPinValue+0x9e>
    1d60:	55 95       	asr	r21
    1d62:	47 95       	ror	r20
    1d64:	8a 95       	dec	r24
    1d66:	e2 f7       	brpl	.-8      	; 0x1d60 <DIO_u8GetPinValue+0x9a>
    1d68:	ca 01       	movw	r24, r20
    1d6a:	81 70       	andi	r24, 0x01	; 1
    1d6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1d6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1d70:	80 83       	st	Z, r24
    1d72:	27 c0       	rjmp	.+78     	; 0x1dc2 <DIO_u8GetPinValue+0xfc>
	case portC: *pu8Value=GET_BIT(PINC,Copy_enuPin);break;
    1d74:	e3 e3       	ldi	r30, 0x33	; 51
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	80 81       	ld	r24, Z
    1d7a:	28 2f       	mov	r18, r24
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d80:	88 2f       	mov	r24, r24
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	a9 01       	movw	r20, r18
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <DIO_u8GetPinValue+0xc6>
    1d88:	55 95       	asr	r21
    1d8a:	47 95       	ror	r20
    1d8c:	8a 95       	dec	r24
    1d8e:	e2 f7       	brpl	.-8      	; 0x1d88 <DIO_u8GetPinValue+0xc2>
    1d90:	ca 01       	movw	r24, r20
    1d92:	81 70       	andi	r24, 0x01	; 1
    1d94:	eb 81       	ldd	r30, Y+3	; 0x03
    1d96:	fc 81       	ldd	r31, Y+4	; 0x04
    1d98:	80 83       	st	Z, r24
    1d9a:	13 c0       	rjmp	.+38     	; 0x1dc2 <DIO_u8GetPinValue+0xfc>
	case portD: *pu8Value=GET_BIT(PIND,Copy_enuPin);break;
    1d9c:	e0 e3       	ldi	r30, 0x30	; 48
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	28 2f       	mov	r18, r24
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	8a 81       	ldd	r24, Y+2	; 0x02
    1da8:	88 2f       	mov	r24, r24
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	a9 01       	movw	r20, r18
    1dae:	02 c0       	rjmp	.+4      	; 0x1db4 <DIO_u8GetPinValue+0xee>
    1db0:	55 95       	asr	r21
    1db2:	47 95       	ror	r20
    1db4:	8a 95       	dec	r24
    1db6:	e2 f7       	brpl	.-8      	; 0x1db0 <DIO_u8GetPinValue+0xea>
    1db8:	ca 01       	movw	r24, r20
    1dba:	81 70       	andi	r24, 0x01	; 1
    1dbc:	eb 81       	ldd	r30, Y+3	; 0x03
    1dbe:	fc 81       	ldd	r31, Y+4	; 0x04
    1dc0:	80 83       	st	Z, r24
	}
}
    1dc2:	27 96       	adiw	r28, 0x07	; 7
    1dc4:	0f b6       	in	r0, 0x3f	; 63
    1dc6:	f8 94       	cli
    1dc8:	de bf       	out	0x3e, r29	; 62
    1dca:	0f be       	out	0x3f, r0	; 63
    1dcc:	cd bf       	out	0x3d, r28	; 61
    1dce:	cf 91       	pop	r28
    1dd0:	df 91       	pop	r29
    1dd2:	08 95       	ret

00001dd4 <DIO_u8SetPortDirection>:
/*------------------------------------------------------------*/
u8 DIO_u8SetPortDirection(enum_port Copy_enuPort,enum_direction Copy_u8GeneralIO){
    1dd4:	df 93       	push	r29
    1dd6:	cf 93       	push	r28
    1dd8:	00 d0       	rcall	.+0      	; 0x1dda <DIO_u8SetPortDirection+0x6>
    1dda:	00 d0       	rcall	.+0      	; 0x1ddc <DIO_u8SetPortDirection+0x8>
    1ddc:	0f 92       	push	r0
    1dde:	cd b7       	in	r28, 0x3d	; 61
    1de0:	de b7       	in	r29, 0x3e	; 62
    1de2:	89 83       	std	Y+1, r24	; 0x01
    1de4:	6a 83       	std	Y+2, r22	; 0x02

	switch(Copy_enuPort){
    1de6:	89 81       	ldd	r24, Y+1	; 0x01
    1de8:	28 2f       	mov	r18, r24
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	3c 83       	std	Y+4, r19	; 0x04
    1dee:	2b 83       	std	Y+3, r18	; 0x03
    1df0:	8b 81       	ldd	r24, Y+3	; 0x03
    1df2:	9c 81       	ldd	r25, Y+4	; 0x04
    1df4:	81 30       	cpi	r24, 0x01	; 1
    1df6:	91 05       	cpc	r25, r1
    1df8:	d1 f0       	breq	.+52     	; 0x1e2e <DIO_u8SetPortDirection+0x5a>
    1dfa:	2b 81       	ldd	r18, Y+3	; 0x03
    1dfc:	3c 81       	ldd	r19, Y+4	; 0x04
    1dfe:	22 30       	cpi	r18, 0x02	; 2
    1e00:	31 05       	cpc	r19, r1
    1e02:	2c f4       	brge	.+10     	; 0x1e0e <DIO_u8SetPortDirection+0x3a>
    1e04:	8b 81       	ldd	r24, Y+3	; 0x03
    1e06:	9c 81       	ldd	r25, Y+4	; 0x04
    1e08:	00 97       	sbiw	r24, 0x00	; 0
    1e0a:	61 f0       	breq	.+24     	; 0x1e24 <DIO_u8SetPortDirection+0x50>
    1e0c:	1e c0       	rjmp	.+60     	; 0x1e4a <DIO_u8SetPortDirection+0x76>
    1e0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e10:	3c 81       	ldd	r19, Y+4	; 0x04
    1e12:	22 30       	cpi	r18, 0x02	; 2
    1e14:	31 05       	cpc	r19, r1
    1e16:	81 f0       	breq	.+32     	; 0x1e38 <DIO_u8SetPortDirection+0x64>
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1c:	83 30       	cpi	r24, 0x03	; 3
    1e1e:	91 05       	cpc	r25, r1
    1e20:	81 f0       	breq	.+32     	; 0x1e42 <DIO_u8SetPortDirection+0x6e>
    1e22:	13 c0       	rjmp	.+38     	; 0x1e4a <DIO_u8SetPortDirection+0x76>
		case portA: DDRA=Copy_u8GeneralIO;break;
    1e24:	ea e3       	ldi	r30, 0x3A	; 58
    1e26:	f0 e0       	ldi	r31, 0x00	; 0
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	80 83       	st	Z, r24
    1e2c:	0e c0       	rjmp	.+28     	; 0x1e4a <DIO_u8SetPortDirection+0x76>
		case portB: DDRB=Copy_u8GeneralIO;break;
    1e2e:	e7 e3       	ldi	r30, 0x37	; 55
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	8a 81       	ldd	r24, Y+2	; 0x02
    1e34:	80 83       	st	Z, r24
    1e36:	09 c0       	rjmp	.+18     	; 0x1e4a <DIO_u8SetPortDirection+0x76>
		case portC: DDRC=Copy_u8GeneralIO;break;
    1e38:	e4 e3       	ldi	r30, 0x34	; 52
    1e3a:	f0 e0       	ldi	r31, 0x00	; 0
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	80 83       	st	Z, r24
    1e40:	04 c0       	rjmp	.+8      	; 0x1e4a <DIO_u8SetPortDirection+0x76>
		case portD: DDRD=Copy_u8GeneralIO;break;
    1e42:	e1 e3       	ldi	r30, 0x31	; 49
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	8a 81       	ldd	r24, Y+2	; 0x02
    1e48:	80 83       	st	Z, r24
	}
}
    1e4a:	0f 90       	pop	r0
    1e4c:	0f 90       	pop	r0
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
    1e52:	0f 90       	pop	r0
    1e54:	cf 91       	pop	r28
    1e56:	df 91       	pop	r29
    1e58:	08 95       	ret

00001e5a <DIO_u8SetPortValue>:
/*------------------------------------------------------------*/
u8 DIO_u8SetPortValue(enum_port Copy_enuPort,enum_value Copy_u8GeneralValue){
    1e5a:	df 93       	push	r29
    1e5c:	cf 93       	push	r28
    1e5e:	00 d0       	rcall	.+0      	; 0x1e60 <DIO_u8SetPortValue+0x6>
    1e60:	00 d0       	rcall	.+0      	; 0x1e62 <DIO_u8SetPortValue+0x8>
    1e62:	0f 92       	push	r0
    1e64:	cd b7       	in	r28, 0x3d	; 61
    1e66:	de b7       	in	r29, 0x3e	; 62
    1e68:	89 83       	std	Y+1, r24	; 0x01
    1e6a:	6a 83       	std	Y+2, r22	; 0x02

		switch(Copy_enuPort){
    1e6c:	89 81       	ldd	r24, Y+1	; 0x01
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	3c 83       	std	Y+4, r19	; 0x04
    1e74:	2b 83       	std	Y+3, r18	; 0x03
    1e76:	8b 81       	ldd	r24, Y+3	; 0x03
    1e78:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7a:	81 30       	cpi	r24, 0x01	; 1
    1e7c:	91 05       	cpc	r25, r1
    1e7e:	d1 f0       	breq	.+52     	; 0x1eb4 <DIO_u8SetPortValue+0x5a>
    1e80:	2b 81       	ldd	r18, Y+3	; 0x03
    1e82:	3c 81       	ldd	r19, Y+4	; 0x04
    1e84:	22 30       	cpi	r18, 0x02	; 2
    1e86:	31 05       	cpc	r19, r1
    1e88:	2c f4       	brge	.+10     	; 0x1e94 <DIO_u8SetPortValue+0x3a>
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8e:	00 97       	sbiw	r24, 0x00	; 0
    1e90:	61 f0       	breq	.+24     	; 0x1eaa <DIO_u8SetPortValue+0x50>
    1e92:	1e c0       	rjmp	.+60     	; 0x1ed0 <DIO_u8SetPortValue+0x76>
    1e94:	2b 81       	ldd	r18, Y+3	; 0x03
    1e96:	3c 81       	ldd	r19, Y+4	; 0x04
    1e98:	22 30       	cpi	r18, 0x02	; 2
    1e9a:	31 05       	cpc	r19, r1
    1e9c:	81 f0       	breq	.+32     	; 0x1ebe <DIO_u8SetPortValue+0x64>
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea2:	83 30       	cpi	r24, 0x03	; 3
    1ea4:	91 05       	cpc	r25, r1
    1ea6:	81 f0       	breq	.+32     	; 0x1ec8 <DIO_u8SetPortValue+0x6e>
    1ea8:	13 c0       	rjmp	.+38     	; 0x1ed0 <DIO_u8SetPortValue+0x76>
			case portA: PORTA=Copy_u8GeneralValue;break;
    1eaa:	eb e3       	ldi	r30, 0x3B	; 59
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb0:	80 83       	st	Z, r24
    1eb2:	0e c0       	rjmp	.+28     	; 0x1ed0 <DIO_u8SetPortValue+0x76>
			case portB: PORTB=Copy_u8GeneralValue;break;
    1eb4:	e8 e3       	ldi	r30, 0x38	; 56
    1eb6:	f0 e0       	ldi	r31, 0x00	; 0
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	80 83       	st	Z, r24
    1ebc:	09 c0       	rjmp	.+18     	; 0x1ed0 <DIO_u8SetPortValue+0x76>
			case portC: PORTC=Copy_u8GeneralValue;break;
    1ebe:	e5 e3       	ldi	r30, 0x35	; 53
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	80 83       	st	Z, r24
    1ec6:	04 c0       	rjmp	.+8      	; 0x1ed0 <DIO_u8SetPortValue+0x76>
			case portD: PORTD=Copy_u8GeneralValue;break;
    1ec8:	e2 e3       	ldi	r30, 0x32	; 50
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ece:	80 83       	st	Z, r24
		}
}
    1ed0:	0f 90       	pop	r0
    1ed2:	0f 90       	pop	r0
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	cf 91       	pop	r28
    1edc:	df 91       	pop	r29
    1ede:	08 95       	ret

00001ee0 <DIO_u8GetPortValue>:
/*------------------------------------------------------------*/
u8 DIO_u8GetPortValue(enum_port Copy_enuPort, u8 *pu8Value){
    1ee0:	df 93       	push	r29
    1ee2:	cf 93       	push	r28
    1ee4:	00 d0       	rcall	.+0      	; 0x1ee6 <DIO_u8GetPortValue+0x6>
    1ee6:	00 d0       	rcall	.+0      	; 0x1ee8 <DIO_u8GetPortValue+0x8>
    1ee8:	00 d0       	rcall	.+0      	; 0x1eea <DIO_u8GetPortValue+0xa>
    1eea:	cd b7       	in	r28, 0x3d	; 61
    1eec:	de b7       	in	r29, 0x3e	; 62
    1eee:	89 83       	std	Y+1, r24	; 0x01
    1ef0:	7b 83       	std	Y+3, r23	; 0x03
    1ef2:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_enuPort){
    1ef4:	89 81       	ldd	r24, Y+1	; 0x01
    1ef6:	28 2f       	mov	r18, r24
    1ef8:	30 e0       	ldi	r19, 0x00	; 0
    1efa:	3d 83       	std	Y+5, r19	; 0x05
    1efc:	2c 83       	std	Y+4, r18	; 0x04
    1efe:	8c 81       	ldd	r24, Y+4	; 0x04
    1f00:	9d 81       	ldd	r25, Y+5	; 0x05
    1f02:	81 30       	cpi	r24, 0x01	; 1
    1f04:	91 05       	cpc	r25, r1
    1f06:	e1 f0       	breq	.+56     	; 0x1f40 <DIO_u8GetPortValue+0x60>
    1f08:	2c 81       	ldd	r18, Y+4	; 0x04
    1f0a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f0c:	22 30       	cpi	r18, 0x02	; 2
    1f0e:	31 05       	cpc	r19, r1
    1f10:	2c f4       	brge	.+10     	; 0x1f1c <DIO_u8GetPortValue+0x3c>
    1f12:	8c 81       	ldd	r24, Y+4	; 0x04
    1f14:	9d 81       	ldd	r25, Y+5	; 0x05
    1f16:	00 97       	sbiw	r24, 0x00	; 0
    1f18:	61 f0       	breq	.+24     	; 0x1f32 <DIO_u8GetPortValue+0x52>
    1f1a:	26 c0       	rjmp	.+76     	; 0x1f68 <DIO_u8GetPortValue+0x88>
    1f1c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f1e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f20:	22 30       	cpi	r18, 0x02	; 2
    1f22:	31 05       	cpc	r19, r1
    1f24:	a1 f0       	breq	.+40     	; 0x1f4e <DIO_u8GetPortValue+0x6e>
    1f26:	8c 81       	ldd	r24, Y+4	; 0x04
    1f28:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2a:	83 30       	cpi	r24, 0x03	; 3
    1f2c:	91 05       	cpc	r25, r1
    1f2e:	b1 f0       	breq	.+44     	; 0x1f5c <DIO_u8GetPortValue+0x7c>
    1f30:	1b c0       	rjmp	.+54     	; 0x1f68 <DIO_u8GetPortValue+0x88>
	case portA: *pu8Value=PINA;break;
    1f32:	e9 e3       	ldi	r30, 0x39	; 57
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	ea 81       	ldd	r30, Y+2	; 0x02
    1f3a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f3c:	80 83       	st	Z, r24
    1f3e:	14 c0       	rjmp	.+40     	; 0x1f68 <DIO_u8GetPortValue+0x88>
	case portB: *pu8Value=PINB;break;
    1f40:	e6 e3       	ldi	r30, 0x36	; 54
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	ea 81       	ldd	r30, Y+2	; 0x02
    1f48:	fb 81       	ldd	r31, Y+3	; 0x03
    1f4a:	80 83       	st	Z, r24
    1f4c:	0d c0       	rjmp	.+26     	; 0x1f68 <DIO_u8GetPortValue+0x88>
	case portC: *pu8Value=PINC;break;
    1f4e:	e3 e3       	ldi	r30, 0x33	; 51
    1f50:	f0 e0       	ldi	r31, 0x00	; 0
    1f52:	80 81       	ld	r24, Z
    1f54:	ea 81       	ldd	r30, Y+2	; 0x02
    1f56:	fb 81       	ldd	r31, Y+3	; 0x03
    1f58:	80 83       	st	Z, r24
    1f5a:	06 c0       	rjmp	.+12     	; 0x1f68 <DIO_u8GetPortValue+0x88>
	case portD: *pu8Value=PIND;break;
    1f5c:	e0 e3       	ldi	r30, 0x30	; 48
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	80 81       	ld	r24, Z
    1f62:	ea 81       	ldd	r30, Y+2	; 0x02
    1f64:	fb 81       	ldd	r31, Y+3	; 0x03
    1f66:	80 83       	st	Z, r24
	}
}
    1f68:	26 96       	adiw	r28, 0x06	; 6
    1f6a:	0f b6       	in	r0, 0x3f	; 63
    1f6c:	f8 94       	cli
    1f6e:	de bf       	out	0x3e, r29	; 62
    1f70:	0f be       	out	0x3f, r0	; 63
    1f72:	cd bf       	out	0x3d, r28	; 61
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <ADC_u8State>:
#include"../../lib/BIT_MATH.h"
#include"../../lib/STD_TYPES.h"
#include "ADC_registers.h"
#include "ADC_interface.h"

u8 ADC_u8State(enum_state Copy_enuState){
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	00 d0       	rcall	.+0      	; 0x1f80 <ADC_u8State+0x6>
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_enuState==Disable) {
    1f86:	89 81       	ldd	r24, Y+1	; 0x01
    1f88:	88 23       	and	r24, r24
    1f8a:	41 f4       	brne	.+16     	; 0x1f9c <ADC_u8State+0x22>

		/*Disable ADC*/
		CLR_BIT(ADCSRA, ADCSRA_ADEN);
    1f8c:	a6 e2       	ldi	r26, 0x26	; 38
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e6 e2       	ldi	r30, 0x26	; 38
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	8f 77       	andi	r24, 0x7F	; 127
    1f98:	8c 93       	st	X, r24
    1f9a:	11 c0       	rjmp	.+34     	; 0x1fbe <ADC_u8State+0x44>

	} else if (Copy_enuState==Enable) {
    1f9c:	89 81       	ldd	r24, Y+1	; 0x01
    1f9e:	81 30       	cpi	r24, 0x01	; 1
    1fa0:	71 f4       	brne	.+28     	; 0x1fbe <ADC_u8State+0x44>

		/*Set result register as right adjustment*/
		CLR_BIT(ADMUX, ADMUX_ADLAR);
    1fa2:	a7 e2       	ldi	r26, 0x27	; 39
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	e7 e2       	ldi	r30, 0x27	; 39
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 81       	ld	r24, Z
    1fac:	8f 7d       	andi	r24, 0xDF	; 223
    1fae:	8c 93       	st	X, r24

		/*Enable ADC*/
		SET_BIT(ADCSRA, ADCSRA_ADEN);
    1fb0:	a6 e2       	ldi	r26, 0x26	; 38
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e6 e2       	ldi	r30, 0x26	; 38
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 81       	ld	r24, Z
    1fba:	80 68       	ori	r24, 0x80	; 128
    1fbc:	8c 93       	st	X, r24
	}
}
    1fbe:	0f 90       	pop	r0
    1fc0:	0f 90       	pop	r0
    1fc2:	cf 91       	pop	r28
    1fc4:	df 91       	pop	r29
    1fc6:	08 95       	ret

00001fc8 <ADC_u8Init>:
/*------------------------------------------------------------*/
u8 ADC_u8Init(enum_refVoltage Copy_enuRefVoltage,
		enum_prescaler Copy_enuPrescaler) {
    1fc8:	df 93       	push	r29
    1fca:	cf 93       	push	r28
    1fcc:	00 d0       	rcall	.+0      	; 0x1fce <ADC_u8Init+0x6>
    1fce:	0f 92       	push	r0
    1fd0:	cd b7       	in	r28, 0x3d	; 61
    1fd2:	de b7       	in	r29, 0x3e	; 62
    1fd4:	89 83       	std	Y+1, r24	; 0x01
    1fd6:	6a 83       	std	Y+2, r22	; 0x02

	/*Set reference voltage*/
	CLR_BIT(ADMUX, ADMUX_REFS1);
    1fd8:	a7 e2       	ldi	r26, 0x27	; 39
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e7 e2       	ldi	r30, 0x27	; 39
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	8f 77       	andi	r24, 0x7F	; 127
    1fe4:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, ADMUX_REFS0);
    1fe6:	a7 e2       	ldi	r26, 0x27	; 39
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	e7 e2       	ldi	r30, 0x27	; 39
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	8f 7b       	andi	r24, 0xBF	; 191
    1ff2:	8c 93       	st	X, r24
	ADMUX |= Copy_enuRefVoltage;
    1ff4:	a7 e2       	ldi	r26, 0x27	; 39
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	e7 e2       	ldi	r30, 0x27	; 39
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	90 81       	ld	r25, Z
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	89 2b       	or	r24, r25
    2002:	8c 93       	st	X, r24

	/*Set clock division factor*/
	CLR_BIT(ADCSRA, ADCSRA_ADPS2);
    2004:	a6 e2       	ldi	r26, 0x26	; 38
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	e6 e2       	ldi	r30, 0x26	; 38
    200a:	f0 e0       	ldi	r31, 0x00	; 0
    200c:	80 81       	ld	r24, Z
    200e:	8b 7f       	andi	r24, 0xFB	; 251
    2010:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADCSRA_ADPS1);
    2012:	a6 e2       	ldi	r26, 0x26	; 38
    2014:	b0 e0       	ldi	r27, 0x00	; 0
    2016:	e6 e2       	ldi	r30, 0x26	; 38
    2018:	f0 e0       	ldi	r31, 0x00	; 0
    201a:	80 81       	ld	r24, Z
    201c:	8d 7f       	andi	r24, 0xFD	; 253
    201e:	8c 93       	st	X, r24
	CLR_BIT(ADCSRA, ADCSRA_ADPS0);
    2020:	a6 e2       	ldi	r26, 0x26	; 38
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e6 e2       	ldi	r30, 0x26	; 38
    2026:	f0 e0       	ldi	r31, 0x00	; 0
    2028:	80 81       	ld	r24, Z
    202a:	8e 7f       	andi	r24, 0xFE	; 254
    202c:	8c 93       	st	X, r24
	ADCSRA |= Copy_enuPrescaler;
    202e:	a6 e2       	ldi	r26, 0x26	; 38
    2030:	b0 e0       	ldi	r27, 0x00	; 0
    2032:	e6 e2       	ldi	r30, 0x26	; 38
    2034:	f0 e0       	ldi	r31, 0x00	; 0
    2036:	90 81       	ld	r25, Z
    2038:	8a 81       	ldd	r24, Y+2	; 0x02
    203a:	89 2b       	or	r24, r25
    203c:	8c 93       	st	X, r24

}
    203e:	0f 90       	pop	r0
    2040:	0f 90       	pop	r0
    2042:	0f 90       	pop	r0
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	08 95       	ret

0000204a <ADC_ChannelSelect>:
/*------------------------------------------------------------*/
u8 ADC_ChannelSelect(enum_channels Copy_enuChannels){
    204a:	df 93       	push	r29
    204c:	cf 93       	push	r28
    204e:	00 d0       	rcall	.+0      	; 0x2050 <ADC_ChannelSelect+0x6>
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	89 83       	std	Y+1, r24	; 0x01
	/*Handle channel selection*/
	CLR_BIT(ADMUX, ADMUX_MUX0);
    2056:	a7 e2       	ldi	r26, 0x27	; 39
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e7 e2       	ldi	r30, 0x27	; 39
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	8e 7f       	andi	r24, 0xFE	; 254
    2062:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, ADMUX_MUX1);
    2064:	a7 e2       	ldi	r26, 0x27	; 39
    2066:	b0 e0       	ldi	r27, 0x00	; 0
    2068:	e7 e2       	ldi	r30, 0x27	; 39
    206a:	f0 e0       	ldi	r31, 0x00	; 0
    206c:	80 81       	ld	r24, Z
    206e:	8d 7f       	andi	r24, 0xFD	; 253
    2070:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, ADMUX_MUX2);
    2072:	a7 e2       	ldi	r26, 0x27	; 39
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	e7 e2       	ldi	r30, 0x27	; 39
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	8b 7f       	andi	r24, 0xFB	; 251
    207e:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, ADMUX_MUX3);
    2080:	a7 e2       	ldi	r26, 0x27	; 39
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	e7 e2       	ldi	r30, 0x27	; 39
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	80 81       	ld	r24, Z
    208a:	87 7f       	andi	r24, 0xF7	; 247
    208c:	8c 93       	st	X, r24
	CLR_BIT(ADMUX, ADMUX_MUX4);
    208e:	a7 e2       	ldi	r26, 0x27	; 39
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	e7 e2       	ldi	r30, 0x27	; 39
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	8f 7e       	andi	r24, 0xEF	; 239
    209a:	8c 93       	st	X, r24
	ADMUX |= Copy_enuChannels;
    209c:	a7 e2       	ldi	r26, 0x27	; 39
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	e7 e2       	ldi	r30, 0x27	; 39
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	90 81       	ld	r25, Z
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	89 2b       	or	r24, r25
    20aa:	8c 93       	st	X, r24
}
    20ac:	0f 90       	pop	r0
    20ae:	0f 90       	pop	r0
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <ADC_u8StartConversion>:
/*------------------------------------------------------------*/
u8 ADC_u8StartConversion(void){
    20b6:	df 93       	push	r29
    20b8:	cf 93       	push	r28
    20ba:	0f 92       	push	r0
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
	/*Start conversion*/
	SET_BIT(ADCSRA, ADCSRA_ADSC);
    20c0:	a6 e2       	ldi	r26, 0x26	; 38
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e6 e2       	ldi	r30, 0x26	; 38
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 81       	ld	r24, Z
    20ca:	80 64       	ori	r24, 0x40	; 64
    20cc:	8c 93       	st	X, r24
}
    20ce:	0f 90       	pop	r0
    20d0:	cf 91       	pop	r28
    20d2:	df 91       	pop	r29
    20d4:	08 95       	ret

000020d6 <ADC_u8AutoTriggerState>:
/*------------------------------------------------------------*/
u8 ADC_u8AutoTriggerState(enum_state Copy_enuState){
    20d6:	df 93       	push	r29
    20d8:	cf 93       	push	r28
    20da:	00 d0       	rcall	.+0      	; 0x20dc <ADC_u8AutoTriggerState+0x6>
    20dc:	cd b7       	in	r28, 0x3d	; 61
    20de:	de b7       	in	r29, 0x3e	; 62
    20e0:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_enuState == Disable) {
    20e2:	89 81       	ldd	r24, Y+1	; 0x01
    20e4:	88 23       	and	r24, r24
    20e6:	41 f4       	brne	.+16     	; 0x20f8 <ADC_u8AutoTriggerState+0x22>
		/*Disable Auto trigger mode*/
		CLR_BIT(ADCSRA, ADCSRA_ADATE);
    20e8:	a6 e2       	ldi	r26, 0x26	; 38
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	e6 e2       	ldi	r30, 0x26	; 38
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	8f 7d       	andi	r24, 0xDF	; 223
    20f4:	8c 93       	st	X, r24
    20f6:	0a c0       	rjmp	.+20     	; 0x210c <ADC_u8AutoTriggerState+0x36>
	} else if (Copy_enuState == Enable) {
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	81 30       	cpi	r24, 0x01	; 1
    20fc:	39 f4       	brne	.+14     	; 0x210c <ADC_u8AutoTriggerState+0x36>
		/*Enable Auto trigger mode*/
		SET_BIT(ADCSRA, ADCSRA_ADATE);
    20fe:	a6 e2       	ldi	r26, 0x26	; 38
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e6 e2       	ldi	r30, 0x26	; 38
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	80 62       	ori	r24, 0x20	; 32
    210a:	8c 93       	st	X, r24
	}
}
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	cf 91       	pop	r28
    2112:	df 91       	pop	r29
    2114:	08 95       	ret

00002116 <ADC_u8AutoTriggerSource>:
/*------------------------------------------------------------*/
u8 ADC_u8AutoTriggerSource(enum_triggers Copy_enuTriggers){
    2116:	df 93       	push	r29
    2118:	cf 93       	push	r28
    211a:	00 d0       	rcall	.+0      	; 0x211c <ADC_u8AutoTriggerSource+0x6>
    211c:	cd b7       	in	r28, 0x3d	; 61
    211e:	de b7       	in	r29, 0x3e	; 62
    2120:	89 83       	std	Y+1, r24	; 0x01
	/*set trigger source*/
	CLR_BIT(SFIOR, SFIOR_ADTS0);
    2122:	a0 e5       	ldi	r26, 0x50	; 80
    2124:	b0 e0       	ldi	r27, 0x00	; 0
    2126:	e0 e5       	ldi	r30, 0x50	; 80
    2128:	f0 e0       	ldi	r31, 0x00	; 0
    212a:	80 81       	ld	r24, Z
    212c:	8f 7d       	andi	r24, 0xDF	; 223
    212e:	8c 93       	st	X, r24
	CLR_BIT(SFIOR, SFIOR_ADTS1);
    2130:	a0 e5       	ldi	r26, 0x50	; 80
    2132:	b0 e0       	ldi	r27, 0x00	; 0
    2134:	e0 e5       	ldi	r30, 0x50	; 80
    2136:	f0 e0       	ldi	r31, 0x00	; 0
    2138:	80 81       	ld	r24, Z
    213a:	8f 7b       	andi	r24, 0xBF	; 191
    213c:	8c 93       	st	X, r24
	CLR_BIT(SFIOR, SFIOR_ADTS2);
    213e:	a0 e5       	ldi	r26, 0x50	; 80
    2140:	b0 e0       	ldi	r27, 0x00	; 0
    2142:	e0 e5       	ldi	r30, 0x50	; 80
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	8f 77       	andi	r24, 0x7F	; 127
    214a:	8c 93       	st	X, r24
	SFIOR |= Copy_enuTriggers;
    214c:	a0 e5       	ldi	r26, 0x50	; 80
    214e:	b0 e0       	ldi	r27, 0x00	; 0
    2150:	e0 e5       	ldi	r30, 0x50	; 80
    2152:	f0 e0       	ldi	r31, 0x00	; 0
    2154:	90 81       	ld	r25, Z
    2156:	89 81       	ldd	r24, Y+1	; 0x01
    2158:	89 2b       	or	r24, r25
    215a:	8c 93       	st	X, r24
}
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
    2160:	cf 91       	pop	r28
    2162:	df 91       	pop	r29
    2164:	08 95       	ret

00002166 <ADC_u8ConversionCompleteInterruptState>:
/*------------------------------------------------------------*/
u8 ADC_u8ConversionCompleteInterruptState(enum_state Copy_enuState){
    2166:	df 93       	push	r29
    2168:	cf 93       	push	r28
    216a:	00 d0       	rcall	.+0      	; 0x216c <ADC_u8ConversionCompleteInterruptState+0x6>
    216c:	cd b7       	in	r28, 0x3d	; 61
    216e:	de b7       	in	r29, 0x3e	; 62
    2170:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_enuState==Disable){
    2172:	89 81       	ldd	r24, Y+1	; 0x01
    2174:	88 23       	and	r24, r24
    2176:	41 f4       	brne	.+16     	; 0x2188 <ADC_u8ConversionCompleteInterruptState+0x22>
		CLR_BIT(ADCSRA,ADCSRA_ADIE);
    2178:	a6 e2       	ldi	r26, 0x26	; 38
    217a:	b0 e0       	ldi	r27, 0x00	; 0
    217c:	e6 e2       	ldi	r30, 0x26	; 38
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	80 81       	ld	r24, Z
    2182:	87 7f       	andi	r24, 0xF7	; 247
    2184:	8c 93       	st	X, r24
    2186:	0a c0       	rjmp	.+20     	; 0x219c <ADC_u8ConversionCompleteInterruptState+0x36>
	}else if(Copy_enuState==Enable){
    2188:	89 81       	ldd	r24, Y+1	; 0x01
    218a:	81 30       	cpi	r24, 0x01	; 1
    218c:	39 f4       	brne	.+14     	; 0x219c <ADC_u8ConversionCompleteInterruptState+0x36>
		SET_BIT(ADCSRA,ADCSRA_ADIE);
    218e:	a6 e2       	ldi	r26, 0x26	; 38
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e6 e2       	ldi	r30, 0x26	; 38
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	88 60       	ori	r24, 0x08	; 8
    219a:	8c 93       	st	X, r24
	}
}
    219c:	0f 90       	pop	r0
    219e:	0f 90       	pop	r0
    21a0:	cf 91       	pop	r28
    21a2:	df 91       	pop	r29
    21a4:	08 95       	ret

000021a6 <ADC_u8GetReading>:
/*------------------------------------------------------------*/
u8 ADC_u8GetReading(u16* pu16Value){
    21a6:	df 93       	push	r29
    21a8:	cf 93       	push	r28
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <ADC_u8GetReading+0x6>
    21ac:	0f 92       	push	r0
    21ae:	cd b7       	in	r28, 0x3d	; 61
    21b0:	de b7       	in	r29, 0x3e	; 62
    21b2:	9a 83       	std	Y+2, r25	; 0x02
    21b4:	89 83       	std	Y+1, r24	; 0x01
	/*read ADCH && ADCL*/
	*pu16Value = ADCL;
    21b6:	e4 e2       	ldi	r30, 0x24	; 36
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	88 2f       	mov	r24, r24
    21be:	90 e0       	ldi	r25, 0x00	; 0
    21c0:	e9 81       	ldd	r30, Y+1	; 0x01
    21c2:	fa 81       	ldd	r31, Y+2	; 0x02
    21c4:	91 83       	std	Z+1, r25	; 0x01
    21c6:	80 83       	st	Z, r24
	*pu16Value |= (ADCH << 8);
    21c8:	e9 81       	ldd	r30, Y+1	; 0x01
    21ca:	fa 81       	ldd	r31, Y+2	; 0x02
    21cc:	20 81       	ld	r18, Z
    21ce:	31 81       	ldd	r19, Z+1	; 0x01
    21d0:	e5 e2       	ldi	r30, 0x25	; 37
    21d2:	f0 e0       	ldi	r31, 0x00	; 0
    21d4:	80 81       	ld	r24, Z
    21d6:	88 2f       	mov	r24, r24
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	98 2f       	mov	r25, r24
    21dc:	88 27       	eor	r24, r24
    21de:	82 2b       	or	r24, r18
    21e0:	93 2b       	or	r25, r19
    21e2:	e9 81       	ldd	r30, Y+1	; 0x01
    21e4:	fa 81       	ldd	r31, Y+2	; 0x02
    21e6:	91 83       	std	Z+1, r25	; 0x01
    21e8:	80 83       	st	Z, r24
}
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	08 95       	ret

000021f6 <LCD_u8ConvertPos>:
#ifndef LCD_PRIVATE_H
#define LCD_PRIVATE_H
/***************************************************/
/*LCD Private convert position argument to LCD command*/
u8 LCD_u8ConvertPos(u8 Copy_u8Row,u8 Copy_u8Col){
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	00 d0       	rcall	.+0      	; 0x21fc <LCD_u8ConvertPos+0x6>
    21fc:	00 d0       	rcall	.+0      	; 0x21fe <LCD_u8ConvertPos+0x8>
    21fe:	0f 92       	push	r0
    2200:	cd b7       	in	r28, 0x3d	; 61
    2202:	de b7       	in	r29, 0x3e	; 62
    2204:	8a 83       	std	Y+2, r24	; 0x02
    2206:	6b 83       	std	Y+3, r22	; 0x03
	/*Holds location as hex command*/
	u8 Local_u8Result=0;
    2208:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8Row){
    220a:	8a 81       	ldd	r24, Y+2	; 0x02
    220c:	28 2f       	mov	r18, r24
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	3d 83       	std	Y+5, r19	; 0x05
    2212:	2c 83       	std	Y+4, r18	; 0x04
    2214:	8c 81       	ldd	r24, Y+4	; 0x04
    2216:	9d 81       	ldd	r25, Y+5	; 0x05
    2218:	00 97       	sbiw	r24, 0x00	; 0
    221a:	31 f0       	breq	.+12     	; 0x2228 <LCD_u8ConvertPos+0x32>
    221c:	2c 81       	ldd	r18, Y+4	; 0x04
    221e:	3d 81       	ldd	r19, Y+5	; 0x05
    2220:	21 30       	cpi	r18, 0x01	; 1
    2222:	31 05       	cpc	r19, r1
    2224:	a9 f0       	breq	.+42     	; 0x2250 <LCD_u8ConvertPos+0x5a>
    2226:	28 c0       	rjmp	.+80     	; 0x2278 <LCD_u8ConvertPos+0x82>
	case 0:/*If First LCD row*/
		if(Copy_u8Col<16){/*If Column is in the first 16 characters in DDRAM*/
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	80 31       	cpi	r24, 0x10	; 16
    222c:	18 f4       	brcc	.+6      	; 0x2234 <LCD_u8ConvertPos+0x3e>
			Local_u8Result=Copy_u8Col;
    222e:	8b 81       	ldd	r24, Y+3	; 0x03
    2230:	89 83       	std	Y+1, r24	; 0x01
    2232:	22 c0       	rjmp	.+68     	; 0x2278 <LCD_u8ConvertPos+0x82>
		}else if (Copy_u8Col<32){/*If Column is in the 2nd 16 character in the DDRAM*/
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	80 32       	cpi	r24, 0x20	; 32
    2238:	20 f4       	brcc	.+8      	; 0x2242 <LCD_u8ConvertPos+0x4c>
			Local_u8Result=0x10|Copy_u8Col;
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	80 61       	ori	r24, 0x10	; 16
    223e:	89 83       	std	Y+1, r24	; 0x01
    2240:	1b c0       	rjmp	.+54     	; 0x2278 <LCD_u8ConvertPos+0x82>
		}else if (Copy_u8Col<40){/*IF Column is in the Last 8 characters in the DDRAM*/
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	88 32       	cpi	r24, 0x28	; 40
    2246:	c0 f4       	brcc	.+48     	; 0x2278 <LCD_u8ConvertPos+0x82>
			Local_u8Result=0x20|Copy_u8Col;
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	80 62       	ori	r24, 0x20	; 32
    224c:	89 83       	std	Y+1, r24	; 0x01
    224e:	14 c0       	rjmp	.+40     	; 0x2278 <LCD_u8ConvertPos+0x82>
		}
		break;
	case 1:/*If Second LCD row*/
		if(Copy_u8Col<16){/*If Column is in the first 16 characters in DDRAM*/
    2250:	8b 81       	ldd	r24, Y+3	; 0x03
    2252:	80 31       	cpi	r24, 0x10	; 16
    2254:	20 f4       	brcc	.+8      	; 0x225e <LCD_u8ConvertPos+0x68>
			Local_u8Result=0x40|Copy_u8Col;
    2256:	8b 81       	ldd	r24, Y+3	; 0x03
    2258:	80 64       	ori	r24, 0x40	; 64
    225a:	89 83       	std	Y+1, r24	; 0x01
    225c:	0d c0       	rjmp	.+26     	; 0x2278 <LCD_u8ConvertPos+0x82>

		}else if (Copy_u8Col<32){/*If Column is in the 2nd 16 character in the DDRAM*/
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	80 32       	cpi	r24, 0x20	; 32
    2262:	20 f4       	brcc	.+8      	; 0x226c <LCD_u8ConvertPos+0x76>
			Local_u8Result=0x50|Copy_u8Col;
    2264:	8b 81       	ldd	r24, Y+3	; 0x03
    2266:	80 65       	ori	r24, 0x50	; 80
    2268:	89 83       	std	Y+1, r24	; 0x01
    226a:	06 c0       	rjmp	.+12     	; 0x2278 <LCD_u8ConvertPos+0x82>

		}else if (Copy_u8Col<40){/*IF Column is in the Last 8 characters in the DDRAM*/
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	88 32       	cpi	r24, 0x28	; 40
    2270:	18 f4       	brcc	.+6      	; 0x2278 <LCD_u8ConvertPos+0x82>
			Local_u8Result=0x60|Copy_u8Col;
    2272:	8b 81       	ldd	r24, Y+3	; 0x03
    2274:	80 66       	ori	r24, 0x60	; 96
    2276:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
	}
	/*Return Zero if position is invalid */
	return Local_u8Result;
    2278:	89 81       	ldd	r24, Y+1	; 0x01
}
    227a:	0f 90       	pop	r0
    227c:	0f 90       	pop	r0
    227e:	0f 90       	pop	r0
    2280:	0f 90       	pop	r0
    2282:	0f 90       	pop	r0
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <LCD_vdSendData>:
#include<util/delay.h>
#include "LCD_private.h"

/****************************************************/
/*Data*/
void LCD_vdSendData(u8 Copy_u8Data){
    228a:	df 93       	push	r29
    228c:	cf 93       	push	r28
    228e:	cd b7       	in	r28, 0x3d	; 61
    2290:	de b7       	in	r29, 0x3e	; 62
    2292:	2f 97       	sbiw	r28, 0x0f	; 15
    2294:	0f b6       	in	r0, 0x3f	; 63
    2296:	f8 94       	cli
    2298:	de bf       	out	0x3e, r29	; 62
    229a:	0f be       	out	0x3f, r0	; 63
    229c:	cd bf       	out	0x3d, r28	; 61
    229e:	8f 87       	std	Y+15, r24	; 0x0f
		/*set RS as High*/
		DIO_u8SetPinValue(LCD_CONTROLPORT,LCD_RS_PIN,pinHigh);
    22a0:	83 e0       	ldi	r24, 0x03	; 3
    22a2:	62 e0       	ldi	r22, 0x02	; 2
    22a4:	41 e0       	ldi	r20, 0x01	; 1
    22a6:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>
		/*set RW as low*/
		DIO_u8SetPinValue(LCD_CONTROLPORT,LCD_RW_PIN,pinLow);
    22aa:	83 e0       	ldi	r24, 0x03	; 3
    22ac:	61 e0       	ldi	r22, 0x01	; 1
    22ae:	40 e0       	ldi	r20, 0x00	; 0
    22b0:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>
		/*Send data*/
		DIO_u8SetPortValue(LCD_DATAPORT,Copy_u8Data);
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	6f 85       	ldd	r22, Y+15	; 0x0f
    22b8:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <DIO_u8SetPortValue>
		/*Set Enable as high*/
		DIO_u8SetPinValue(LCD_CONTROLPORT,LCD_E_PIN,pinHigh);
    22bc:	83 e0       	ldi	r24, 0x03	; 3
    22be:	60 e0       	ldi	r22, 0x00	; 0
    22c0:	41 e0       	ldi	r20, 0x01	; 1
    22c2:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>
    22c6:	80 e0       	ldi	r24, 0x00	; 0
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	a0 e0       	ldi	r26, 0x00	; 0
    22cc:	b0 e4       	ldi	r27, 0x40	; 64
    22ce:	8b 87       	std	Y+11, r24	; 0x0b
    22d0:	9c 87       	std	Y+12, r25	; 0x0c
    22d2:	ad 87       	std	Y+13, r26	; 0x0d
    22d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    22da:	8d 85       	ldd	r24, Y+13	; 0x0d
    22dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	30 e0       	ldi	r19, 0x00	; 0
    22e2:	4a ef       	ldi	r20, 0xFA	; 250
    22e4:	54 e4       	ldi	r21, 0x44	; 68
    22e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ea:	dc 01       	movw	r26, r24
    22ec:	cb 01       	movw	r24, r22
    22ee:	8f 83       	std	Y+7, r24	; 0x07
    22f0:	98 87       	std	Y+8, r25	; 0x08
    22f2:	a9 87       	std	Y+9, r26	; 0x09
    22f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22f6:	6f 81       	ldd	r22, Y+7	; 0x07
    22f8:	78 85       	ldd	r23, Y+8	; 0x08
    22fa:	89 85       	ldd	r24, Y+9	; 0x09
    22fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e8       	ldi	r20, 0x80	; 128
    2304:	5f e3       	ldi	r21, 0x3F	; 63
    2306:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    230a:	88 23       	and	r24, r24
    230c:	2c f4       	brge	.+10     	; 0x2318 <LCD_vdSendData+0x8e>
		__ticks = 1;
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	90 e0       	ldi	r25, 0x00	; 0
    2312:	9e 83       	std	Y+6, r25	; 0x06
    2314:	8d 83       	std	Y+5, r24	; 0x05
    2316:	3f c0       	rjmp	.+126    	; 0x2396 <LCD_vdSendData+0x10c>
	else if (__tmp > 65535)
    2318:	6f 81       	ldd	r22, Y+7	; 0x07
    231a:	78 85       	ldd	r23, Y+8	; 0x08
    231c:	89 85       	ldd	r24, Y+9	; 0x09
    231e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	3f ef       	ldi	r19, 0xFF	; 255
    2324:	4f e7       	ldi	r20, 0x7F	; 127
    2326:	57 e4       	ldi	r21, 0x47	; 71
    2328:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    232c:	18 16       	cp	r1, r24
    232e:	4c f5       	brge	.+82     	; 0x2382 <LCD_vdSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2330:	6b 85       	ldd	r22, Y+11	; 0x0b
    2332:	7c 85       	ldd	r23, Y+12	; 0x0c
    2334:	8d 85       	ldd	r24, Y+13	; 0x0d
    2336:	9e 85       	ldd	r25, Y+14	; 0x0e
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e2       	ldi	r20, 0x20	; 32
    233e:	51 e4       	ldi	r21, 0x41	; 65
    2340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2344:	dc 01       	movw	r26, r24
    2346:	cb 01       	movw	r24, r22
    2348:	bc 01       	movw	r22, r24
    234a:	cd 01       	movw	r24, r26
    234c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	9e 83       	std	Y+6, r25	; 0x06
    2356:	8d 83       	std	Y+5, r24	; 0x05
    2358:	0f c0       	rjmp	.+30     	; 0x2378 <LCD_vdSendData+0xee>
    235a:	88 ec       	ldi	r24, 0xC8	; 200
    235c:	90 e0       	ldi	r25, 0x00	; 0
    235e:	9c 83       	std	Y+4, r25	; 0x04
    2360:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	9c 81       	ldd	r25, Y+4	; 0x04
    2366:	01 97       	sbiw	r24, 0x01	; 1
    2368:	f1 f7       	brne	.-4      	; 0x2366 <LCD_vdSendData+0xdc>
    236a:	9c 83       	std	Y+4, r25	; 0x04
    236c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    236e:	8d 81       	ldd	r24, Y+5	; 0x05
    2370:	9e 81       	ldd	r25, Y+6	; 0x06
    2372:	01 97       	sbiw	r24, 0x01	; 1
    2374:	9e 83       	std	Y+6, r25	; 0x06
    2376:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2378:	8d 81       	ldd	r24, Y+5	; 0x05
    237a:	9e 81       	ldd	r25, Y+6	; 0x06
    237c:	00 97       	sbiw	r24, 0x00	; 0
    237e:	69 f7       	brne	.-38     	; 0x235a <LCD_vdSendData+0xd0>
    2380:	14 c0       	rjmp	.+40     	; 0x23aa <LCD_vdSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2382:	6f 81       	ldd	r22, Y+7	; 0x07
    2384:	78 85       	ldd	r23, Y+8	; 0x08
    2386:	89 85       	ldd	r24, Y+9	; 0x09
    2388:	9a 85       	ldd	r25, Y+10	; 0x0a
    238a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	9e 83       	std	Y+6, r25	; 0x06
    2394:	8d 83       	std	Y+5, r24	; 0x05
    2396:	8d 81       	ldd	r24, Y+5	; 0x05
    2398:	9e 81       	ldd	r25, Y+6	; 0x06
    239a:	9a 83       	std	Y+2, r25	; 0x02
    239c:	89 83       	std	Y+1, r24	; 0x01
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	9a 81       	ldd	r25, Y+2	; 0x02
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	f1 f7       	brne	.-4      	; 0x23a2 <LCD_vdSendData+0x118>
    23a6:	9a 83       	std	Y+2, r25	; 0x02
    23a8:	89 83       	std	Y+1, r24	; 0x01
		/*Delay 2 ms*/
		_delay_ms(2);
		/*Set Enable as Low*/
		DIO_u8SetPinValue(LCD_CONTROLPORT,LCD_E_PIN,pinLow);
    23aa:	83 e0       	ldi	r24, 0x03	; 3
    23ac:	60 e0       	ldi	r22, 0x00	; 0
    23ae:	40 e0       	ldi	r20, 0x00	; 0
    23b0:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>

}
    23b4:	2f 96       	adiw	r28, 0x0f	; 15
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	cd bf       	out	0x3d, r28	; 61
    23c0:	cf 91       	pop	r28
    23c2:	df 91       	pop	r29
    23c4:	08 95       	ret

000023c6 <LCD_vdSendCommand>:
/****************************************************/
		/*command*/
void LCD_vdSendCommand(u8 Copy_u8Command){
    23c6:	df 93       	push	r29
    23c8:	cf 93       	push	r28
    23ca:	cd b7       	in	r28, 0x3d	; 61
    23cc:	de b7       	in	r29, 0x3e	; 62
    23ce:	2f 97       	sbiw	r28, 0x0f	; 15
    23d0:	0f b6       	in	r0, 0x3f	; 63
    23d2:	f8 94       	cli
    23d4:	de bf       	out	0x3e, r29	; 62
    23d6:	0f be       	out	0x3f, r0	; 63
    23d8:	cd bf       	out	0x3d, r28	; 61
    23da:	8f 87       	std	Y+15, r24	; 0x0f
	/*Set RS as Low*/
	DIO_u8SetPinValue(LCD_CONTROLPORT,LCD_RS_PIN,pinLow);
    23dc:	83 e0       	ldi	r24, 0x03	; 3
    23de:	62 e0       	ldi	r22, 0x02	; 2
    23e0:	40 e0       	ldi	r20, 0x00	; 0
    23e2:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>
	/*Set RW ad Low*/
	DIO_u8SetPinValue(LCD_CONTROLPORT,LCD_RW_PIN,pinLow);
    23e6:	83 e0       	ldi	r24, 0x03	; 3
    23e8:	61 e0       	ldi	r22, 0x01	; 1
    23ea:	40 e0       	ldi	r20, 0x00	; 0
    23ec:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>
	/*Send command*/
	DIO_u8SetPortValue(LCD_DATAPORT,Copy_u8Command);
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	6f 85       	ldd	r22, Y+15	; 0x0f
    23f4:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <DIO_u8SetPortValue>
	/*Set Enable as High*/
	DIO_u8SetPinValue(LCD_CONTROLPORT,LCD_E_PIN,pinHigh);
    23f8:	83 e0       	ldi	r24, 0x03	; 3
    23fa:	60 e0       	ldi	r22, 0x00	; 0
    23fc:	41 e0       	ldi	r20, 0x01	; 1
    23fe:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	a0 e0       	ldi	r26, 0x00	; 0
    2408:	b0 e4       	ldi	r27, 0x40	; 64
    240a:	8b 87       	std	Y+11, r24	; 0x0b
    240c:	9c 87       	std	Y+12, r25	; 0x0c
    240e:	ad 87       	std	Y+13, r26	; 0x0d
    2410:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2412:	6b 85       	ldd	r22, Y+11	; 0x0b
    2414:	7c 85       	ldd	r23, Y+12	; 0x0c
    2416:	8d 85       	ldd	r24, Y+13	; 0x0d
    2418:	9e 85       	ldd	r25, Y+14	; 0x0e
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	4a ef       	ldi	r20, 0xFA	; 250
    2420:	54 e4       	ldi	r21, 0x44	; 68
    2422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	8f 83       	std	Y+7, r24	; 0x07
    242c:	98 87       	std	Y+8, r25	; 0x08
    242e:	a9 87       	std	Y+9, r26	; 0x09
    2430:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2432:	6f 81       	ldd	r22, Y+7	; 0x07
    2434:	78 85       	ldd	r23, Y+8	; 0x08
    2436:	89 85       	ldd	r24, Y+9	; 0x09
    2438:	9a 85       	ldd	r25, Y+10	; 0x0a
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e8       	ldi	r20, 0x80	; 128
    2440:	5f e3       	ldi	r21, 0x3F	; 63
    2442:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2446:	88 23       	and	r24, r24
    2448:	2c f4       	brge	.+10     	; 0x2454 <LCD_vdSendCommand+0x8e>
		__ticks = 1;
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	90 e0       	ldi	r25, 0x00	; 0
    244e:	9e 83       	std	Y+6, r25	; 0x06
    2450:	8d 83       	std	Y+5, r24	; 0x05
    2452:	3f c0       	rjmp	.+126    	; 0x24d2 <LCD_vdSendCommand+0x10c>
	else if (__tmp > 65535)
    2454:	6f 81       	ldd	r22, Y+7	; 0x07
    2456:	78 85       	ldd	r23, Y+8	; 0x08
    2458:	89 85       	ldd	r24, Y+9	; 0x09
    245a:	9a 85       	ldd	r25, Y+10	; 0x0a
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	3f ef       	ldi	r19, 0xFF	; 255
    2460:	4f e7       	ldi	r20, 0x7F	; 127
    2462:	57 e4       	ldi	r21, 0x47	; 71
    2464:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2468:	18 16       	cp	r1, r24
    246a:	4c f5       	brge	.+82     	; 0x24be <LCD_vdSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    246c:	6b 85       	ldd	r22, Y+11	; 0x0b
    246e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2470:	8d 85       	ldd	r24, Y+13	; 0x0d
    2472:	9e 85       	ldd	r25, Y+14	; 0x0e
    2474:	20 e0       	ldi	r18, 0x00	; 0
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	40 e2       	ldi	r20, 0x20	; 32
    247a:	51 e4       	ldi	r21, 0x41	; 65
    247c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	bc 01       	movw	r22, r24
    2486:	cd 01       	movw	r24, r26
    2488:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    248c:	dc 01       	movw	r26, r24
    248e:	cb 01       	movw	r24, r22
    2490:	9e 83       	std	Y+6, r25	; 0x06
    2492:	8d 83       	std	Y+5, r24	; 0x05
    2494:	0f c0       	rjmp	.+30     	; 0x24b4 <LCD_vdSendCommand+0xee>
    2496:	88 ec       	ldi	r24, 0xC8	; 200
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	9c 83       	std	Y+4, r25	; 0x04
    249c:	8b 83       	std	Y+3, r24	; 0x03
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	9c 81       	ldd	r25, Y+4	; 0x04
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	f1 f7       	brne	.-4      	; 0x24a2 <LCD_vdSendCommand+0xdc>
    24a6:	9c 83       	std	Y+4, r25	; 0x04
    24a8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24aa:	8d 81       	ldd	r24, Y+5	; 0x05
    24ac:	9e 81       	ldd	r25, Y+6	; 0x06
    24ae:	01 97       	sbiw	r24, 0x01	; 1
    24b0:	9e 83       	std	Y+6, r25	; 0x06
    24b2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b4:	8d 81       	ldd	r24, Y+5	; 0x05
    24b6:	9e 81       	ldd	r25, Y+6	; 0x06
    24b8:	00 97       	sbiw	r24, 0x00	; 0
    24ba:	69 f7       	brne	.-38     	; 0x2496 <LCD_vdSendCommand+0xd0>
    24bc:	14 c0       	rjmp	.+40     	; 0x24e6 <LCD_vdSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24be:	6f 81       	ldd	r22, Y+7	; 0x07
    24c0:	78 85       	ldd	r23, Y+8	; 0x08
    24c2:	89 85       	ldd	r24, Y+9	; 0x09
    24c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ca:	dc 01       	movw	r26, r24
    24cc:	cb 01       	movw	r24, r22
    24ce:	9e 83       	std	Y+6, r25	; 0x06
    24d0:	8d 83       	std	Y+5, r24	; 0x05
    24d2:	8d 81       	ldd	r24, Y+5	; 0x05
    24d4:	9e 81       	ldd	r25, Y+6	; 0x06
    24d6:	9a 83       	std	Y+2, r25	; 0x02
    24d8:	89 83       	std	Y+1, r24	; 0x01
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	9a 81       	ldd	r25, Y+2	; 0x02
    24de:	01 97       	sbiw	r24, 0x01	; 1
    24e0:	f1 f7       	brne	.-4      	; 0x24de <LCD_vdSendCommand+0x118>
    24e2:	9a 83       	std	Y+2, r25	; 0x02
    24e4:	89 83       	std	Y+1, r24	; 0x01
	/*delay 2ms*/
	_delay_ms(2);
	/*Set Enable as Low*/
	DIO_u8SetPinValue(LCD_CONTROLPORT,LCD_E_PIN,pinLow);
    24e6:	83 e0       	ldi	r24, 0x03	; 3
    24e8:	60 e0       	ldi	r22, 0x00	; 0
    24ea:	40 e0       	ldi	r20, 0x00	; 0
    24ec:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>

}
    24f0:	2f 96       	adiw	r28, 0x0f	; 15
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	de bf       	out	0x3e, r29	; 62
    24f8:	0f be       	out	0x3f, r0	; 63
    24fa:	cd bf       	out	0x3d, r28	; 61
    24fc:	cf 91       	pop	r28
    24fe:	df 91       	pop	r29
    2500:	08 95       	ret

00002502 <LCD_vdInit>:
/****************************************************/
		/*Initialization*/
void LCD_vdInit(void){
    2502:	df 93       	push	r29
    2504:	cf 93       	push	r28
    2506:	cd b7       	in	r28, 0x3d	; 61
    2508:	de b7       	in	r29, 0x3e	; 62
    250a:	aa 97       	sbiw	r28, 0x2a	; 42
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	f8 94       	cli
    2510:	de bf       	out	0x3e, r29	; 62
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	cd bf       	out	0x3d, r28	; 61
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	a0 e2       	ldi	r26, 0x20	; 32
    251c:	b2 e4       	ldi	r27, 0x42	; 66
    251e:	8f a3       	std	Y+39, r24	; 0x27
    2520:	98 a7       	std	Y+40, r25	; 0x28
    2522:	a9 a7       	std	Y+41, r26	; 0x29
    2524:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2526:	6f a1       	ldd	r22, Y+39	; 0x27
    2528:	78 a5       	ldd	r23, Y+40	; 0x28
    252a:	89 a5       	ldd	r24, Y+41	; 0x29
    252c:	9a a5       	ldd	r25, Y+42	; 0x2a
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	4a ef       	ldi	r20, 0xFA	; 250
    2534:	54 e4       	ldi	r21, 0x44	; 68
    2536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	8b a3       	std	Y+35, r24	; 0x23
    2540:	9c a3       	std	Y+36, r25	; 0x24
    2542:	ad a3       	std	Y+37, r26	; 0x25
    2544:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2546:	6b a1       	ldd	r22, Y+35	; 0x23
    2548:	7c a1       	ldd	r23, Y+36	; 0x24
    254a:	8d a1       	ldd	r24, Y+37	; 0x25
    254c:	9e a1       	ldd	r25, Y+38	; 0x26
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e8       	ldi	r20, 0x80	; 128
    2554:	5f e3       	ldi	r21, 0x3F	; 63
    2556:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    255a:	88 23       	and	r24, r24
    255c:	2c f4       	brge	.+10     	; 0x2568 <LCD_vdInit+0x66>
		__ticks = 1;
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	9a a3       	std	Y+34, r25	; 0x22
    2564:	89 a3       	std	Y+33, r24	; 0x21
    2566:	3f c0       	rjmp	.+126    	; 0x25e6 <LCD_vdInit+0xe4>
	else if (__tmp > 65535)
    2568:	6b a1       	ldd	r22, Y+35	; 0x23
    256a:	7c a1       	ldd	r23, Y+36	; 0x24
    256c:	8d a1       	ldd	r24, Y+37	; 0x25
    256e:	9e a1       	ldd	r25, Y+38	; 0x26
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	3f ef       	ldi	r19, 0xFF	; 255
    2574:	4f e7       	ldi	r20, 0x7F	; 127
    2576:	57 e4       	ldi	r21, 0x47	; 71
    2578:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    257c:	18 16       	cp	r1, r24
    257e:	4c f5       	brge	.+82     	; 0x25d2 <LCD_vdInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2580:	6f a1       	ldd	r22, Y+39	; 0x27
    2582:	78 a5       	ldd	r23, Y+40	; 0x28
    2584:	89 a5       	ldd	r24, Y+41	; 0x29
    2586:	9a a5       	ldd	r25, Y+42	; 0x2a
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e2       	ldi	r20, 0x20	; 32
    258e:	51 e4       	ldi	r21, 0x41	; 65
    2590:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2594:	dc 01       	movw	r26, r24
    2596:	cb 01       	movw	r24, r22
    2598:	bc 01       	movw	r22, r24
    259a:	cd 01       	movw	r24, r26
    259c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a0:	dc 01       	movw	r26, r24
    25a2:	cb 01       	movw	r24, r22
    25a4:	9a a3       	std	Y+34, r25	; 0x22
    25a6:	89 a3       	std	Y+33, r24	; 0x21
    25a8:	0f c0       	rjmp	.+30     	; 0x25c8 <LCD_vdInit+0xc6>
    25aa:	88 ec       	ldi	r24, 0xC8	; 200
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	98 a3       	std	Y+32, r25	; 0x20
    25b0:	8f 8f       	std	Y+31, r24	; 0x1f
    25b2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25b4:	98 a1       	ldd	r25, Y+32	; 0x20
    25b6:	01 97       	sbiw	r24, 0x01	; 1
    25b8:	f1 f7       	brne	.-4      	; 0x25b6 <LCD_vdInit+0xb4>
    25ba:	98 a3       	std	Y+32, r25	; 0x20
    25bc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25be:	89 a1       	ldd	r24, Y+33	; 0x21
    25c0:	9a a1       	ldd	r25, Y+34	; 0x22
    25c2:	01 97       	sbiw	r24, 0x01	; 1
    25c4:	9a a3       	std	Y+34, r25	; 0x22
    25c6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25c8:	89 a1       	ldd	r24, Y+33	; 0x21
    25ca:	9a a1       	ldd	r25, Y+34	; 0x22
    25cc:	00 97       	sbiw	r24, 0x00	; 0
    25ce:	69 f7       	brne	.-38     	; 0x25aa <LCD_vdInit+0xa8>
    25d0:	14 c0       	rjmp	.+40     	; 0x25fa <LCD_vdInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d2:	6b a1       	ldd	r22, Y+35	; 0x23
    25d4:	7c a1       	ldd	r23, Y+36	; 0x24
    25d6:	8d a1       	ldd	r24, Y+37	; 0x25
    25d8:	9e a1       	ldd	r25, Y+38	; 0x26
    25da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	9a a3       	std	Y+34, r25	; 0x22
    25e4:	89 a3       	std	Y+33, r24	; 0x21
    25e6:	89 a1       	ldd	r24, Y+33	; 0x21
    25e8:	9a a1       	ldd	r25, Y+34	; 0x22
    25ea:	9e 8f       	std	Y+30, r25	; 0x1e
    25ec:	8d 8f       	std	Y+29, r24	; 0x1d
    25ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25f0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	f1 f7       	brne	.-4      	; 0x25f2 <LCD_vdInit+0xf0>
    25f6:	9e 8f       	std	Y+30, r25	; 0x1e
    25f8:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(40);
	LCD_vdSendCommand(0b00111100);
    25fa:	8c e3       	ldi	r24, 0x3C	; 60
    25fc:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_vdSendCommand>
    2600:	80 e0       	ldi	r24, 0x00	; 0
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	a0 e8       	ldi	r26, 0x80	; 128
    2606:	bf e3       	ldi	r27, 0x3F	; 63
    2608:	89 8f       	std	Y+25, r24	; 0x19
    260a:	9a 8f       	std	Y+26, r25	; 0x1a
    260c:	ab 8f       	std	Y+27, r26	; 0x1b
    260e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2610:	69 8d       	ldd	r22, Y+25	; 0x19
    2612:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2614:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2616:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	4a ef       	ldi	r20, 0xFA	; 250
    261e:	54 e4       	ldi	r21, 0x44	; 68
    2620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	8d 8b       	std	Y+21, r24	; 0x15
    262a:	9e 8b       	std	Y+22, r25	; 0x16
    262c:	af 8b       	std	Y+23, r26	; 0x17
    262e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2630:	6d 89       	ldd	r22, Y+21	; 0x15
    2632:	7e 89       	ldd	r23, Y+22	; 0x16
    2634:	8f 89       	ldd	r24, Y+23	; 0x17
    2636:	98 8d       	ldd	r25, Y+24	; 0x18
    2638:	20 e0       	ldi	r18, 0x00	; 0
    263a:	30 e0       	ldi	r19, 0x00	; 0
    263c:	40 e8       	ldi	r20, 0x80	; 128
    263e:	5f e3       	ldi	r21, 0x3F	; 63
    2640:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2644:	88 23       	and	r24, r24
    2646:	2c f4       	brge	.+10     	; 0x2652 <LCD_vdInit+0x150>
		__ticks = 1;
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	9c 8b       	std	Y+20, r25	; 0x14
    264e:	8b 8b       	std	Y+19, r24	; 0x13
    2650:	3f c0       	rjmp	.+126    	; 0x26d0 <LCD_vdInit+0x1ce>
	else if (__tmp > 65535)
    2652:	6d 89       	ldd	r22, Y+21	; 0x15
    2654:	7e 89       	ldd	r23, Y+22	; 0x16
    2656:	8f 89       	ldd	r24, Y+23	; 0x17
    2658:	98 8d       	ldd	r25, Y+24	; 0x18
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	3f ef       	ldi	r19, 0xFF	; 255
    265e:	4f e7       	ldi	r20, 0x7F	; 127
    2660:	57 e4       	ldi	r21, 0x47	; 71
    2662:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2666:	18 16       	cp	r1, r24
    2668:	4c f5       	brge	.+82     	; 0x26bc <LCD_vdInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266a:	69 8d       	ldd	r22, Y+25	; 0x19
    266c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    266e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2670:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	40 e2       	ldi	r20, 0x20	; 32
    2678:	51 e4       	ldi	r21, 0x41	; 65
    267a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	bc 01       	movw	r22, r24
    2684:	cd 01       	movw	r24, r26
    2686:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	9c 8b       	std	Y+20, r25	; 0x14
    2690:	8b 8b       	std	Y+19, r24	; 0x13
    2692:	0f c0       	rjmp	.+30     	; 0x26b2 <LCD_vdInit+0x1b0>
    2694:	88 ec       	ldi	r24, 0xC8	; 200
    2696:	90 e0       	ldi	r25, 0x00	; 0
    2698:	9a 8b       	std	Y+18, r25	; 0x12
    269a:	89 8b       	std	Y+17, r24	; 0x11
    269c:	89 89       	ldd	r24, Y+17	; 0x11
    269e:	9a 89       	ldd	r25, Y+18	; 0x12
    26a0:	01 97       	sbiw	r24, 0x01	; 1
    26a2:	f1 f7       	brne	.-4      	; 0x26a0 <LCD_vdInit+0x19e>
    26a4:	9a 8b       	std	Y+18, r25	; 0x12
    26a6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a8:	8b 89       	ldd	r24, Y+19	; 0x13
    26aa:	9c 89       	ldd	r25, Y+20	; 0x14
    26ac:	01 97       	sbiw	r24, 0x01	; 1
    26ae:	9c 8b       	std	Y+20, r25	; 0x14
    26b0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b2:	8b 89       	ldd	r24, Y+19	; 0x13
    26b4:	9c 89       	ldd	r25, Y+20	; 0x14
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	69 f7       	brne	.-38     	; 0x2694 <LCD_vdInit+0x192>
    26ba:	14 c0       	rjmp	.+40     	; 0x26e4 <LCD_vdInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26bc:	6d 89       	ldd	r22, Y+21	; 0x15
    26be:	7e 89       	ldd	r23, Y+22	; 0x16
    26c0:	8f 89       	ldd	r24, Y+23	; 0x17
    26c2:	98 8d       	ldd	r25, Y+24	; 0x18
    26c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c8:	dc 01       	movw	r26, r24
    26ca:	cb 01       	movw	r24, r22
    26cc:	9c 8b       	std	Y+20, r25	; 0x14
    26ce:	8b 8b       	std	Y+19, r24	; 0x13
    26d0:	8b 89       	ldd	r24, Y+19	; 0x13
    26d2:	9c 89       	ldd	r25, Y+20	; 0x14
    26d4:	98 8b       	std	Y+16, r25	; 0x10
    26d6:	8f 87       	std	Y+15, r24	; 0x0f
    26d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    26da:	98 89       	ldd	r25, Y+16	; 0x10
    26dc:	01 97       	sbiw	r24, 0x01	; 1
    26de:	f1 f7       	brne	.-4      	; 0x26dc <LCD_vdInit+0x1da>
    26e0:	98 8b       	std	Y+16, r25	; 0x10
    26e2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	LCD_vdSendCommand(0b0001100);
    26e4:	8c e0       	ldi	r24, 0x0C	; 12
    26e6:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_vdSendCommand>
    26ea:	80 e0       	ldi	r24, 0x00	; 0
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	a0 e8       	ldi	r26, 0x80	; 128
    26f0:	bf e3       	ldi	r27, 0x3F	; 63
    26f2:	8b 87       	std	Y+11, r24	; 0x0b
    26f4:	9c 87       	std	Y+12, r25	; 0x0c
    26f6:	ad 87       	std	Y+13, r26	; 0x0d
    26f8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    26fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    26fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    2700:	9e 85       	ldd	r25, Y+14	; 0x0e
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	4a ef       	ldi	r20, 0xFA	; 250
    2708:	54 e4       	ldi	r21, 0x44	; 68
    270a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	8f 83       	std	Y+7, r24	; 0x07
    2714:	98 87       	std	Y+8, r25	; 0x08
    2716:	a9 87       	std	Y+9, r26	; 0x09
    2718:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    271a:	6f 81       	ldd	r22, Y+7	; 0x07
    271c:	78 85       	ldd	r23, Y+8	; 0x08
    271e:	89 85       	ldd	r24, Y+9	; 0x09
    2720:	9a 85       	ldd	r25, Y+10	; 0x0a
    2722:	20 e0       	ldi	r18, 0x00	; 0
    2724:	30 e0       	ldi	r19, 0x00	; 0
    2726:	40 e8       	ldi	r20, 0x80	; 128
    2728:	5f e3       	ldi	r21, 0x3F	; 63
    272a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    272e:	88 23       	and	r24, r24
    2730:	2c f4       	brge	.+10     	; 0x273c <LCD_vdInit+0x23a>
		__ticks = 1;
    2732:	81 e0       	ldi	r24, 0x01	; 1
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	9e 83       	std	Y+6, r25	; 0x06
    2738:	8d 83       	std	Y+5, r24	; 0x05
    273a:	3f c0       	rjmp	.+126    	; 0x27ba <LCD_vdInit+0x2b8>
	else if (__tmp > 65535)
    273c:	6f 81       	ldd	r22, Y+7	; 0x07
    273e:	78 85       	ldd	r23, Y+8	; 0x08
    2740:	89 85       	ldd	r24, Y+9	; 0x09
    2742:	9a 85       	ldd	r25, Y+10	; 0x0a
    2744:	20 e0       	ldi	r18, 0x00	; 0
    2746:	3f ef       	ldi	r19, 0xFF	; 255
    2748:	4f e7       	ldi	r20, 0x7F	; 127
    274a:	57 e4       	ldi	r21, 0x47	; 71
    274c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2750:	18 16       	cp	r1, r24
    2752:	4c f5       	brge	.+82     	; 0x27a6 <LCD_vdInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2754:	6b 85       	ldd	r22, Y+11	; 0x0b
    2756:	7c 85       	ldd	r23, Y+12	; 0x0c
    2758:	8d 85       	ldd	r24, Y+13	; 0x0d
    275a:	9e 85       	ldd	r25, Y+14	; 0x0e
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	40 e2       	ldi	r20, 0x20	; 32
    2762:	51 e4       	ldi	r21, 0x41	; 65
    2764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	bc 01       	movw	r22, r24
    276e:	cd 01       	movw	r24, r26
    2770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	9e 83       	std	Y+6, r25	; 0x06
    277a:	8d 83       	std	Y+5, r24	; 0x05
    277c:	0f c0       	rjmp	.+30     	; 0x279c <LCD_vdInit+0x29a>
    277e:	88 ec       	ldi	r24, 0xC8	; 200
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	9c 83       	std	Y+4, r25	; 0x04
    2784:	8b 83       	std	Y+3, r24	; 0x03
    2786:	8b 81       	ldd	r24, Y+3	; 0x03
    2788:	9c 81       	ldd	r25, Y+4	; 0x04
    278a:	01 97       	sbiw	r24, 0x01	; 1
    278c:	f1 f7       	brne	.-4      	; 0x278a <LCD_vdInit+0x288>
    278e:	9c 83       	std	Y+4, r25	; 0x04
    2790:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2792:	8d 81       	ldd	r24, Y+5	; 0x05
    2794:	9e 81       	ldd	r25, Y+6	; 0x06
    2796:	01 97       	sbiw	r24, 0x01	; 1
    2798:	9e 83       	std	Y+6, r25	; 0x06
    279a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    279c:	8d 81       	ldd	r24, Y+5	; 0x05
    279e:	9e 81       	ldd	r25, Y+6	; 0x06
    27a0:	00 97       	sbiw	r24, 0x00	; 0
    27a2:	69 f7       	brne	.-38     	; 0x277e <LCD_vdInit+0x27c>
    27a4:	14 c0       	rjmp	.+40     	; 0x27ce <LCD_vdInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27a6:	6f 81       	ldd	r22, Y+7	; 0x07
    27a8:	78 85       	ldd	r23, Y+8	; 0x08
    27aa:	89 85       	ldd	r24, Y+9	; 0x09
    27ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    27ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b2:	dc 01       	movw	r26, r24
    27b4:	cb 01       	movw	r24, r22
    27b6:	9e 83       	std	Y+6, r25	; 0x06
    27b8:	8d 83       	std	Y+5, r24	; 0x05
    27ba:	8d 81       	ldd	r24, Y+5	; 0x05
    27bc:	9e 81       	ldd	r25, Y+6	; 0x06
    27be:	9a 83       	std	Y+2, r25	; 0x02
    27c0:	89 83       	std	Y+1, r24	; 0x01
    27c2:	89 81       	ldd	r24, Y+1	; 0x01
    27c4:	9a 81       	ldd	r25, Y+2	; 0x02
    27c6:	01 97       	sbiw	r24, 0x01	; 1
    27c8:	f1 f7       	brne	.-4      	; 0x27c6 <LCD_vdInit+0x2c4>
    27ca:	9a 83       	std	Y+2, r25	; 0x02
    27cc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	LCD_vdSendCommand(0b00000001);
    27ce:	81 e0       	ldi	r24, 0x01	; 1
    27d0:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_vdSendCommand>
}
    27d4:	aa 96       	adiw	r28, 0x2a	; 42
    27d6:	0f b6       	in	r0, 0x3f	; 63
    27d8:	f8 94       	cli
    27da:	de bf       	out	0x3e, r29	; 62
    27dc:	0f be       	out	0x3f, r0	; 63
    27de:	cd bf       	out	0x3d, r28	; 61
    27e0:	cf 91       	pop	r28
    27e2:	df 91       	pop	r29
    27e4:	08 95       	ret

000027e6 <LCD_vdSendString>:
/*****************************************************/
		/*Send string*/
void LCD_vdSendString(u8 *pu8String){
    27e6:	df 93       	push	r29
    27e8:	cf 93       	push	r28
    27ea:	00 d0       	rcall	.+0      	; 0x27ec <LCD_vdSendString+0x6>
    27ec:	0f 92       	push	r0
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
    27f2:	9b 83       	std	Y+3, r25	; 0x03
    27f4:	8a 83       	std	Y+2, r24	; 0x02
	for(u8 i=0; pu8String[i]!='\0';i++){
    27f6:	19 82       	std	Y+1, r1	; 0x01
    27f8:	0e c0       	rjmp	.+28     	; 0x2816 <LCD_vdSendString+0x30>
	/******Print each character until reaching \0*****/
		LCD_vdSendData(pu8String[i]);
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	28 2f       	mov	r18, r24
    27fe:	30 e0       	ldi	r19, 0x00	; 0
    2800:	8a 81       	ldd	r24, Y+2	; 0x02
    2802:	9b 81       	ldd	r25, Y+3	; 0x03
    2804:	fc 01       	movw	r30, r24
    2806:	e2 0f       	add	r30, r18
    2808:	f3 1f       	adc	r31, r19
    280a:	80 81       	ld	r24, Z
    280c:	0e 94 45 11 	call	0x228a	; 0x228a <LCD_vdSendData>
	LCD_vdSendCommand(0b00000001);
}
/*****************************************************/
		/*Send string*/
void LCD_vdSendString(u8 *pu8String){
	for(u8 i=0; pu8String[i]!='\0';i++){
    2810:	89 81       	ldd	r24, Y+1	; 0x01
    2812:	8f 5f       	subi	r24, 0xFF	; 255
    2814:	89 83       	std	Y+1, r24	; 0x01
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	28 2f       	mov	r18, r24
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	8a 81       	ldd	r24, Y+2	; 0x02
    281e:	9b 81       	ldd	r25, Y+3	; 0x03
    2820:	fc 01       	movw	r30, r24
    2822:	e2 0f       	add	r30, r18
    2824:	f3 1f       	adc	r31, r19
    2826:	80 81       	ld	r24, Z
    2828:	88 23       	and	r24, r24
    282a:	39 f7       	brne	.-50     	; 0x27fa <LCD_vdSendString+0x14>
	/******Print each character until reaching \0*****/
		LCD_vdSendData(pu8String[i]);
	}
}
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	cf 91       	pop	r28
    2834:	df 91       	pop	r29
    2836:	08 95       	ret

00002838 <LCD_vdSendDataToPos>:
/****************************************************/
		/*Send Data to specific location*/
void LCD_vdSendDataToPos(u8 Copy_u8Row,u8 Copy_u8Col, u8 Copy_u8Data){
    2838:	df 93       	push	r29
    283a:	cf 93       	push	r28
    283c:	00 d0       	rcall	.+0      	; 0x283e <LCD_vdSendDataToPos+0x6>
    283e:	00 d0       	rcall	.+0      	; 0x2840 <LCD_vdSendDataToPos+0x8>
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	8a 83       	std	Y+2, r24	; 0x02
    2846:	6b 83       	std	Y+3, r22	; 0x03
    2848:	4c 83       	std	Y+4, r20	; 0x04
	/*Convert Row column to position Command*/
	u8 Local_u8Pos= LCD_u8ConvertPos(Copy_u8Row,Copy_u8Col);
    284a:	8a 81       	ldd	r24, Y+2	; 0x02
    284c:	6b 81       	ldd	r22, Y+3	; 0x03
    284e:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <LCD_u8ConvertPos>
    2852:	89 83       	std	Y+1, r24	; 0x01
	/*To Set D7 as High(busy flag)*/
	Local_u8Pos|=0x80;
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	80 68       	ori	r24, 0x80	; 128
    2858:	89 83       	std	Y+1, r24	; 0x01
	/*Move cursor to desired position*/
	LCD_vdSendCommand(Local_u8Pos);
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_vdSendCommand>
	/*Print Data on LCD*/
	LCD_vdSendData(Copy_u8Data);
    2860:	8c 81       	ldd	r24, Y+4	; 0x04
    2862:	0e 94 45 11 	call	0x228a	; 0x228a <LCD_vdSendData>
}
    2866:	0f 90       	pop	r0
    2868:	0f 90       	pop	r0
    286a:	0f 90       	pop	r0
    286c:	0f 90       	pop	r0
    286e:	cf 91       	pop	r28
    2870:	df 91       	pop	r29
    2872:	08 95       	ret

00002874 <LCD_vdSendStringToPos>:
/****************************************************/
		/*Send string to location*/
void LCD_vdSendStringToPos(u8 Copy_u8Row,u8 Copy_u8Col, u8 *pu8String){
    2874:	df 93       	push	r29
    2876:	cf 93       	push	r28
    2878:	00 d0       	rcall	.+0      	; 0x287a <LCD_vdSendStringToPos+0x6>
    287a:	00 d0       	rcall	.+0      	; 0x287c <LCD_vdSendStringToPos+0x8>
    287c:	0f 92       	push	r0
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
    2882:	8a 83       	std	Y+2, r24	; 0x02
    2884:	6b 83       	std	Y+3, r22	; 0x03
    2886:	5d 83       	std	Y+5, r21	; 0x05
    2888:	4c 83       	std	Y+4, r20	; 0x04
	/*Convert Row column to position Command*/
	u8 Local_u8Pos= LCD_u8ConvertPos(Copy_u8Row,Copy_u8Col);
    288a:	8a 81       	ldd	r24, Y+2	; 0x02
    288c:	6b 81       	ldd	r22, Y+3	; 0x03
    288e:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <LCD_u8ConvertPos>
    2892:	89 83       	std	Y+1, r24	; 0x01
	/*To Set D7 as High(busy flag)*/
	Local_u8Pos|=0x80;
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	80 68       	ori	r24, 0x80	; 128
    2898:	89 83       	std	Y+1, r24	; 0x01
	/*Move cursor to desired position*/
	LCD_vdSendCommand(Local_u8Pos);
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_vdSendCommand>
	/*Print String on LCD*/
	LCD_vdSendString(pu8String);
    28a0:	8c 81       	ldd	r24, Y+4	; 0x04
    28a2:	9d 81       	ldd	r25, Y+5	; 0x05
    28a4:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <LCD_vdSendString>
}
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
    28ac:	0f 90       	pop	r0
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
    28b2:	cf 91       	pop	r28
    28b4:	df 91       	pop	r29
    28b6:	08 95       	ret

000028b8 <LCD_vdGotoX_Y>:
void LCD_vdGotoX_Y(u8 Copy_u8Y,u8 Copy_u8X){
    28b8:	df 93       	push	r29
    28ba:	cf 93       	push	r28
    28bc:	00 d0       	rcall	.+0      	; 0x28be <LCD_vdGotoX_Y+0x6>
    28be:	0f 92       	push	r0
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	8a 83       	std	Y+2, r24	; 0x02
    28c6:	6b 83       	std	Y+3, r22	; 0x03
	/*Convert Row column to position Command*/
	u8 Local_u8Pos= LCD_u8ConvertPos(Copy_u8Y,Copy_u8X);
    28c8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ca:	6b 81       	ldd	r22, Y+3	; 0x03
    28cc:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <LCD_u8ConvertPos>
    28d0:	89 83       	std	Y+1, r24	; 0x01
	/*To Set D7 as High(busy flag)*/
	Local_u8Pos|=0x80;
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	80 68       	ori	r24, 0x80	; 128
    28d6:	89 83       	std	Y+1, r24	; 0x01
	/*Move cursor to desired position*/
	LCD_vdSendCommand(Local_u8Pos);
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <LCD_vdSendCommand>
}
    28de:	0f 90       	pop	r0
    28e0:	0f 90       	pop	r0
    28e2:	0f 90       	pop	r0
    28e4:	cf 91       	pop	r28
    28e6:	df 91       	pop	r29
    28e8:	08 95       	ret

000028ea <LCD_vdIntegerToString>:
		/*Delete Data*/
/*void LCD_vdDelData(void){

}*/

void LCD_vdIntegerToString(s32 Copy_s32Value, u8 *pu8_string) {
    28ea:	0f 93       	push	r16
    28ec:	1f 93       	push	r17
    28ee:	df 93       	push	r29
    28f0:	cf 93       	push	r28
    28f2:	cd b7       	in	r28, 0x3d	; 61
    28f4:	de b7       	in	r29, 0x3e	; 62
    28f6:	2b 97       	sbiw	r28, 0x0b	; 11
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	f8 94       	cli
    28fc:	de bf       	out	0x3e, r29	; 62
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	cd bf       	out	0x3d, r28	; 61
    2902:	6e 83       	std	Y+6, r22	; 0x06
    2904:	7f 83       	std	Y+7, r23	; 0x07
    2906:	88 87       	std	Y+8, r24	; 0x08
    2908:	99 87       	std	Y+9, r25	; 0x09
    290a:	5b 87       	std	Y+11, r21	; 0x0b
    290c:	4a 87       	std	Y+10, r20	; 0x0a
	u8 i = 0; //This variable is used as counter
    290e:	1d 82       	std	Y+5, r1	; 0x05
	s32 Local_s32NumLengthFactor = 10; //This is used to find the number length for the conversion
    2910:	8a e0       	ldi	r24, 0x0A	; 10
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	a0 e0       	ldi	r26, 0x00	; 0
    2916:	b0 e0       	ldi	r27, 0x00	; 0
    2918:	89 83       	std	Y+1, r24	; 0x01
    291a:	9a 83       	std	Y+2, r25	; 0x02
    291c:	ab 83       	std	Y+3, r26	; 0x03
    291e:	bc 83       	std	Y+4, r27	; 0x04

	/*****************************************/
	/*This condition handles the negative sign*/
	if (Copy_s32Value < 0) {
    2920:	8e 81       	ldd	r24, Y+6	; 0x06
    2922:	9f 81       	ldd	r25, Y+7	; 0x07
    2924:	a8 85       	ldd	r26, Y+8	; 0x08
    2926:	b9 85       	ldd	r27, Y+9	; 0x09
    2928:	bb 23       	and	r27, r27
    292a:	4c f5       	brge	.+82     	; 0x297e <LCD_vdIntegerToString+0x94>
		pu8_string[0] = '-';
    292c:	ea 85       	ldd	r30, Y+10	; 0x0a
    292e:	fb 85       	ldd	r31, Y+11	; 0x0b
    2930:	8d e2       	ldi	r24, 0x2D	; 45
    2932:	80 83       	st	Z, r24
		i += 1;
    2934:	8d 81       	ldd	r24, Y+5	; 0x05
    2936:	8f 5f       	subi	r24, 0xFF	; 255
    2938:	8d 83       	std	Y+5, r24	; 0x05
		Copy_s32Value *= -1;
    293a:	8e 81       	ldd	r24, Y+6	; 0x06
    293c:	9f 81       	ldd	r25, Y+7	; 0x07
    293e:	a8 85       	ldd	r26, Y+8	; 0x08
    2940:	b9 85       	ldd	r27, Y+9	; 0x09
    2942:	b0 95       	com	r27
    2944:	a0 95       	com	r26
    2946:	90 95       	com	r25
    2948:	81 95       	neg	r24
    294a:	9f 4f       	sbci	r25, 0xFF	; 255
    294c:	af 4f       	sbci	r26, 0xFF	; 255
    294e:	bf 4f       	sbci	r27, 0xFF	; 255
    2950:	8e 83       	std	Y+6, r24	; 0x06
    2952:	9f 83       	std	Y+7, r25	; 0x07
    2954:	a8 87       	std	Y+8, r26	; 0x08
    2956:	b9 87       	std	Y+9, r27	; 0x09
    2958:	12 c0       	rjmp	.+36     	; 0x297e <LCD_vdIntegerToString+0x94>
	}
	/*****************************************/
	/*while loop to calculate number length*/
	while ((Copy_s32Value / Local_s32NumLengthFactor) != 0) {
		Local_s32NumLengthFactor *= 10;
    295a:	89 81       	ldd	r24, Y+1	; 0x01
    295c:	9a 81       	ldd	r25, Y+2	; 0x02
    295e:	ab 81       	ldd	r26, Y+3	; 0x03
    2960:	bc 81       	ldd	r27, Y+4	; 0x04
    2962:	2a e0       	ldi	r18, 0x0A	; 10
    2964:	30 e0       	ldi	r19, 0x00	; 0
    2966:	40 e0       	ldi	r20, 0x00	; 0
    2968:	50 e0       	ldi	r21, 0x00	; 0
    296a:	bc 01       	movw	r22, r24
    296c:	cd 01       	movw	r24, r26
    296e:	0e 94 28 18 	call	0x3050	; 0x3050 <__mulsi3>
    2972:	dc 01       	movw	r26, r24
    2974:	cb 01       	movw	r24, r22
    2976:	89 83       	std	Y+1, r24	; 0x01
    2978:	9a 83       	std	Y+2, r25	; 0x02
    297a:	ab 83       	std	Y+3, r26	; 0x03
    297c:	bc 83       	std	Y+4, r27	; 0x04
		i += 1;
		Copy_s32Value *= -1;
	}
	/*****************************************/
	/*while loop to calculate number length*/
	while ((Copy_s32Value / Local_s32NumLengthFactor) != 0) {
    297e:	8e 81       	ldd	r24, Y+6	; 0x06
    2980:	9f 81       	ldd	r25, Y+7	; 0x07
    2982:	a8 85       	ldd	r26, Y+8	; 0x08
    2984:	b9 85       	ldd	r27, Y+9	; 0x09
    2986:	29 81       	ldd	r18, Y+1	; 0x01
    2988:	3a 81       	ldd	r19, Y+2	; 0x02
    298a:	4b 81       	ldd	r20, Y+3	; 0x03
    298c:	5c 81       	ldd	r21, Y+4	; 0x04
    298e:	bc 01       	movw	r22, r24
    2990:	cd 01       	movw	r24, r26
    2992:	0e 94 47 18 	call	0x308e	; 0x308e <__divmodsi4>
    2996:	da 01       	movw	r26, r20
    2998:	c9 01       	movw	r24, r18
    299a:	00 97       	sbiw	r24, 0x00	; 0
    299c:	a1 05       	cpc	r26, r1
    299e:	b1 05       	cpc	r27, r1
    29a0:	e1 f6       	brne	.-72     	; 0x295a <LCD_vdIntegerToString+0x70>
		Local_s32NumLengthFactor *= 10;
	}
	Local_s32NumLengthFactor /= 10;
    29a2:	89 81       	ldd	r24, Y+1	; 0x01
    29a4:	9a 81       	ldd	r25, Y+2	; 0x02
    29a6:	ab 81       	ldd	r26, Y+3	; 0x03
    29a8:	bc 81       	ldd	r27, Y+4	; 0x04
    29aa:	2a e0       	ldi	r18, 0x0A	; 10
    29ac:	30 e0       	ldi	r19, 0x00	; 0
    29ae:	40 e0       	ldi	r20, 0x00	; 0
    29b0:	50 e0       	ldi	r21, 0x00	; 0
    29b2:	bc 01       	movw	r22, r24
    29b4:	cd 01       	movw	r24, r26
    29b6:	0e 94 47 18 	call	0x308e	; 0x308e <__divmodsi4>
    29ba:	da 01       	movw	r26, r20
    29bc:	c9 01       	movw	r24, r18
    29be:	89 83       	std	Y+1, r24	; 0x01
    29c0:	9a 83       	std	Y+2, r25	; 0x02
    29c2:	ab 83       	std	Y+3, r26	; 0x03
    29c4:	bc 83       	std	Y+4, r27	; 0x04
    29c6:	40 c0       	rjmp	.+128    	; 0x2a48 <LCD_vdIntegerToString+0x15e>

	/*convert the integer part into a string*/
	while (Local_s32NumLengthFactor >= 1) {
		pu8_string[i] = (Copy_s32Value / Local_s32NumLengthFactor) + 48;
    29c8:	8d 81       	ldd	r24, Y+5	; 0x05
    29ca:	28 2f       	mov	r18, r24
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    29d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    29d2:	8c 01       	movw	r16, r24
    29d4:	02 0f       	add	r16, r18
    29d6:	13 1f       	adc	r17, r19
    29d8:	8e 81       	ldd	r24, Y+6	; 0x06
    29da:	9f 81       	ldd	r25, Y+7	; 0x07
    29dc:	a8 85       	ldd	r26, Y+8	; 0x08
    29de:	b9 85       	ldd	r27, Y+9	; 0x09
    29e0:	29 81       	ldd	r18, Y+1	; 0x01
    29e2:	3a 81       	ldd	r19, Y+2	; 0x02
    29e4:	4b 81       	ldd	r20, Y+3	; 0x03
    29e6:	5c 81       	ldd	r21, Y+4	; 0x04
    29e8:	bc 01       	movw	r22, r24
    29ea:	cd 01       	movw	r24, r26
    29ec:	0e 94 47 18 	call	0x308e	; 0x308e <__divmodsi4>
    29f0:	da 01       	movw	r26, r20
    29f2:	c9 01       	movw	r24, r18
    29f4:	80 5d       	subi	r24, 0xD0	; 208
    29f6:	f8 01       	movw	r30, r16
    29f8:	80 83       	st	Z, r24
		Copy_s32Value %= Local_s32NumLengthFactor;
    29fa:	8e 81       	ldd	r24, Y+6	; 0x06
    29fc:	9f 81       	ldd	r25, Y+7	; 0x07
    29fe:	a8 85       	ldd	r26, Y+8	; 0x08
    2a00:	b9 85       	ldd	r27, Y+9	; 0x09
    2a02:	29 81       	ldd	r18, Y+1	; 0x01
    2a04:	3a 81       	ldd	r19, Y+2	; 0x02
    2a06:	4b 81       	ldd	r20, Y+3	; 0x03
    2a08:	5c 81       	ldd	r21, Y+4	; 0x04
    2a0a:	bc 01       	movw	r22, r24
    2a0c:	cd 01       	movw	r24, r26
    2a0e:	0e 94 47 18 	call	0x308e	; 0x308e <__divmodsi4>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	8e 83       	std	Y+6, r24	; 0x06
    2a18:	9f 83       	std	Y+7, r25	; 0x07
    2a1a:	a8 87       	std	Y+8, r26	; 0x08
    2a1c:	b9 87       	std	Y+9, r27	; 0x09
		Local_s32NumLengthFactor /= 10;
    2a1e:	89 81       	ldd	r24, Y+1	; 0x01
    2a20:	9a 81       	ldd	r25, Y+2	; 0x02
    2a22:	ab 81       	ldd	r26, Y+3	; 0x03
    2a24:	bc 81       	ldd	r27, Y+4	; 0x04
    2a26:	2a e0       	ldi	r18, 0x0A	; 10
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e0       	ldi	r20, 0x00	; 0
    2a2c:	50 e0       	ldi	r21, 0x00	; 0
    2a2e:	bc 01       	movw	r22, r24
    2a30:	cd 01       	movw	r24, r26
    2a32:	0e 94 47 18 	call	0x308e	; 0x308e <__divmodsi4>
    2a36:	da 01       	movw	r26, r20
    2a38:	c9 01       	movw	r24, r18
    2a3a:	89 83       	std	Y+1, r24	; 0x01
    2a3c:	9a 83       	std	Y+2, r25	; 0x02
    2a3e:	ab 83       	std	Y+3, r26	; 0x03
    2a40:	bc 83       	std	Y+4, r27	; 0x04
		i += 1;
    2a42:	8d 81       	ldd	r24, Y+5	; 0x05
    2a44:	8f 5f       	subi	r24, 0xFF	; 255
    2a46:	8d 83       	std	Y+5, r24	; 0x05
		Local_s32NumLengthFactor *= 10;
	}
	Local_s32NumLengthFactor /= 10;

	/*convert the integer part into a string*/
	while (Local_s32NumLengthFactor >= 1) {
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a4c:	ab 81       	ldd	r26, Y+3	; 0x03
    2a4e:	bc 81       	ldd	r27, Y+4	; 0x04
    2a50:	18 16       	cp	r1, r24
    2a52:	19 06       	cpc	r1, r25
    2a54:	1a 06       	cpc	r1, r26
    2a56:	1b 06       	cpc	r1, r27
    2a58:	0c f4       	brge	.+2      	; 0x2a5c <LCD_vdIntegerToString+0x172>
    2a5a:	b6 cf       	rjmp	.-148    	; 0x29c8 <LCD_vdIntegerToString+0xde>
		Copy_s32Value %= Local_s32NumLengthFactor;
		Local_s32NumLengthFactor /= 10;
		i += 1;
	}

	pu8_string[i] = '\0'; //add \0 at the end of the string
    2a5c:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5e:	28 2f       	mov	r18, r24
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a64:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a66:	fc 01       	movw	r30, r24
    2a68:	e2 0f       	add	r30, r18
    2a6a:	f3 1f       	adc	r31, r19
    2a6c:	10 82       	st	Z, r1

}
    2a6e:	2b 96       	adiw	r28, 0x0b	; 11
    2a70:	0f b6       	in	r0, 0x3f	; 63
    2a72:	f8 94       	cli
    2a74:	de bf       	out	0x3e, r29	; 62
    2a76:	0f be       	out	0x3f, r0	; 63
    2a78:	cd bf       	out	0x3d, r28	; 61
    2a7a:	cf 91       	pop	r28
    2a7c:	df 91       	pop	r29
    2a7e:	1f 91       	pop	r17
    2a80:	0f 91       	pop	r16
    2a82:	08 95       	ret

00002a84 <KPAD_u8GetPressedKey>:
#include"../../MCAL/DIO/DIO_interface.h"
#include"KPAD_interface.h"
#include"KPAD_config.h"


u8 KPAD_u8GetPressedKey(void){
    2a84:	df 93       	push	r29
    2a86:	cf 93       	push	r28
    2a88:	cd b7       	in	r28, 0x3d	; 61
    2a8a:	de b7       	in	r29, 0x3e	; 62
    2a8c:	a1 97       	sbiw	r28, 0x21	; 33
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	f8 94       	cli
    2a92:	de bf       	out	0x3e, r29	; 62
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	cd bf       	out	0x3d, r28	; 61
	u8 Local_PressedKey= KEY_NOT_PRESSED;
    2a98:	84 e6       	ldi	r24, 0x64	; 100
    2a9a:	8b 83       	std	Y+3, r24	; 0x03
	u8 KPAD_u8State=1;
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	8c 83       	std	Y+4, r24	; 0x04
	u8 KPAD_u8ColumnArray[]= {KPAD_C0_PIN, KPAD_C1_PIN, KPAD_C2_PIN, KPAD_C3_PIN};
    2aa0:	83 e0       	ldi	r24, 0x03	; 3
    2aa2:	8d 83       	std	Y+5, r24	; 0x05
    2aa4:	82 e0       	ldi	r24, 0x02	; 2
    2aa6:	8e 83       	std	Y+6, r24	; 0x06
    2aa8:	1f 82       	std	Y+7, r1	; 0x07
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	88 87       	std	Y+8, r24	; 0x08
	u8 KPAD_u8RowArray[]= {KPAD_R0_PIN, KPAD_R1_PIN, KPAD_R2_PIN, KPAD_R3_PIN};
    2aae:	85 e0       	ldi	r24, 0x05	; 5
    2ab0:	89 87       	std	Y+9, r24	; 0x09
    2ab2:	84 e0       	ldi	r24, 0x04	; 4
    2ab4:	8a 87       	std	Y+10, r24	; 0x0a
    2ab6:	86 e0       	ldi	r24, 0x06	; 6
    2ab8:	8b 87       	std	Y+11, r24	; 0x0b
    2aba:	87 e0       	ldi	r24, 0x07	; 7
    2abc:	8c 87       	std	Y+12, r24	; 0x0c
	u8 user_array [4][4]= USER_NUMBERS;
    2abe:	ce 01       	movw	r24, r28
    2ac0:	0d 96       	adiw	r24, 0x0d	; 13
    2ac2:	9e 8f       	std	Y+30, r25	; 0x1e
    2ac4:	8d 8f       	std	Y+29, r24	; 0x1d
    2ac6:	e8 e6       	ldi	r30, 0x68	; 104
    2ac8:	f0 e0       	ldi	r31, 0x00	; 0
    2aca:	f8 a3       	std	Y+32, r31	; 0x20
    2acc:	ef 8f       	std	Y+31, r30	; 0x1f
    2ace:	f0 e1       	ldi	r31, 0x10	; 16
    2ad0:	f9 a3       	std	Y+33, r31	; 0x21
    2ad2:	ef 8d       	ldd	r30, Y+31	; 0x1f
    2ad4:	f8 a1       	ldd	r31, Y+32	; 0x20
    2ad6:	00 80       	ld	r0, Z
    2ad8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ada:	98 a1       	ldd	r25, Y+32	; 0x20
    2adc:	01 96       	adiw	r24, 0x01	; 1
    2ade:	98 a3       	std	Y+32, r25	; 0x20
    2ae0:	8f 8f       	std	Y+31, r24	; 0x1f
    2ae2:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2ae4:	fe 8d       	ldd	r31, Y+30	; 0x1e
    2ae6:	00 82       	st	Z, r0
    2ae8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2aea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2aec:	01 96       	adiw	r24, 0x01	; 1
    2aee:	9e 8f       	std	Y+30, r25	; 0x1e
    2af0:	8d 8f       	std	Y+29, r24	; 0x1d
    2af2:	99 a1       	ldd	r25, Y+33	; 0x21
    2af4:	91 50       	subi	r25, 0x01	; 1
    2af6:	99 a3       	std	Y+33, r25	; 0x21
    2af8:	e9 a1       	ldd	r30, Y+33	; 0x21
    2afa:	ee 23       	and	r30, r30
    2afc:	51 f7       	brne	.-44     	; 0x2ad2 <KPAD_u8GetPressedKey+0x4e>

	for (u8 col=0; col<4; col++){
    2afe:	1a 82       	std	Y+2, r1	; 0x02
    2b00:	69 c0       	rjmp	.+210    	; 0x2bd4 <KPAD_u8GetPressedKey+0x150>
		DIO_u8SetPinValue(KPAD_PORT,KPAD_u8ColumnArray[col],pinLow);
    2b02:	8a 81       	ldd	r24, Y+2	; 0x02
    2b04:	28 2f       	mov	r18, r24
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	ce 01       	movw	r24, r28
    2b0a:	05 96       	adiw	r24, 0x05	; 5
    2b0c:	fc 01       	movw	r30, r24
    2b0e:	e2 0f       	add	r30, r18
    2b10:	f3 1f       	adc	r31, r19
    2b12:	90 81       	ld	r25, Z
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	69 2f       	mov	r22, r25
    2b18:	40 e0       	ldi	r20, 0x00	; 0
    2b1a:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>

		for(u8 row=0; row<4; row++){
    2b1e:	19 82       	std	Y+1, r1	; 0x01
    2b20:	41 c0       	rjmp	.+130    	; 0x2ba4 <KPAD_u8GetPressedKey+0x120>
			DIO_u8GetPinValue(KPAD_PORT,KPAD_u8RowArray[row],&KPAD_u8State);
    2b22:	89 81       	ldd	r24, Y+1	; 0x01
    2b24:	28 2f       	mov	r18, r24
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	ce 01       	movw	r24, r28
    2b2a:	09 96       	adiw	r24, 0x09	; 9
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	e2 0f       	add	r30, r18
    2b30:	f3 1f       	adc	r31, r19
    2b32:	90 81       	ld	r25, Z
    2b34:	9e 01       	movw	r18, r28
    2b36:	2c 5f       	subi	r18, 0xFC	; 252
    2b38:	3f 4f       	sbci	r19, 0xFF	; 255
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	69 2f       	mov	r22, r25
    2b3e:	a9 01       	movw	r20, r18
    2b40:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <DIO_u8GetPinValue>
			if(!KPAD_u8State){
    2b44:	8c 81       	ldd	r24, Y+4	; 0x04
    2b46:	88 23       	and	r24, r24
    2b48:	51 f5       	brne	.+84     	; 0x2b9e <KPAD_u8GetPressedKey+0x11a>
				Local_PressedKey=user_array[col][row];
    2b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4c:	28 2f       	mov	r18, r24
    2b4e:	30 e0       	ldi	r19, 0x00	; 0
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	48 2f       	mov	r20, r24
    2b54:	50 e0       	ldi	r21, 0x00	; 0
    2b56:	22 0f       	add	r18, r18
    2b58:	33 1f       	adc	r19, r19
    2b5a:	22 0f       	add	r18, r18
    2b5c:	33 1f       	adc	r19, r19
    2b5e:	ce 01       	movw	r24, r28
    2b60:	01 96       	adiw	r24, 0x01	; 1
    2b62:	82 0f       	add	r24, r18
    2b64:	93 1f       	adc	r25, r19
    2b66:	84 0f       	add	r24, r20
    2b68:	95 1f       	adc	r25, r21
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	3c 96       	adiw	r30, 0x0c	; 12
    2b6e:	80 81       	ld	r24, Z
    2b70:	8b 83       	std	Y+3, r24	; 0x03
    2b72:	11 c0       	rjmp	.+34     	; 0x2b96 <KPAD_u8GetPressedKey+0x112>
				while(!KPAD_u8State){
					DIO_u8GetPinValue(KPAD_PORT,KPAD_u8RowArray[row],&KPAD_u8State);
    2b74:	89 81       	ldd	r24, Y+1	; 0x01
    2b76:	28 2f       	mov	r18, r24
    2b78:	30 e0       	ldi	r19, 0x00	; 0
    2b7a:	ce 01       	movw	r24, r28
    2b7c:	09 96       	adiw	r24, 0x09	; 9
    2b7e:	fc 01       	movw	r30, r24
    2b80:	e2 0f       	add	r30, r18
    2b82:	f3 1f       	adc	r31, r19
    2b84:	90 81       	ld	r25, Z
    2b86:	9e 01       	movw	r18, r28
    2b88:	2c 5f       	subi	r18, 0xFC	; 252
    2b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b8c:	81 e0       	ldi	r24, 0x01	; 1
    2b8e:	69 2f       	mov	r22, r25
    2b90:	a9 01       	movw	r20, r18
    2b92:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <DIO_u8GetPinValue>

		for(u8 row=0; row<4; row++){
			DIO_u8GetPinValue(KPAD_PORT,KPAD_u8RowArray[row],&KPAD_u8State);
			if(!KPAD_u8State){
				Local_PressedKey=user_array[col][row];
				while(!KPAD_u8State){
    2b96:	8c 81       	ldd	r24, Y+4	; 0x04
    2b98:	88 23       	and	r24, r24
    2b9a:	61 f3       	breq	.-40     	; 0x2b74 <KPAD_u8GetPressedKey+0xf0>
    2b9c:	07 c0       	rjmp	.+14     	; 0x2bac <KPAD_u8GetPressedKey+0x128>
	u8 user_array [4][4]= USER_NUMBERS;

	for (u8 col=0; col<4; col++){
		DIO_u8SetPinValue(KPAD_PORT,KPAD_u8ColumnArray[col],pinLow);

		for(u8 row=0; row<4; row++){
    2b9e:	89 81       	ldd	r24, Y+1	; 0x01
    2ba0:	8f 5f       	subi	r24, 0xFF	; 255
    2ba2:	89 83       	std	Y+1, r24	; 0x01
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	84 30       	cpi	r24, 0x04	; 4
    2ba8:	08 f4       	brcc	.+2      	; 0x2bac <KPAD_u8GetPressedKey+0x128>
    2baa:	bb cf       	rjmp	.-138    	; 0x2b22 <KPAD_u8GetPressedKey+0x9e>
					DIO_u8GetPinValue(KPAD_PORT,KPAD_u8RowArray[row],&KPAD_u8State);
				}
				break;
			}
		}
		DIO_u8SetPinValue(KPAD_PORT,KPAD_u8ColumnArray[col],pinHigh);
    2bac:	8a 81       	ldd	r24, Y+2	; 0x02
    2bae:	28 2f       	mov	r18, r24
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	ce 01       	movw	r24, r28
    2bb4:	05 96       	adiw	r24, 0x05	; 5
    2bb6:	fc 01       	movw	r30, r24
    2bb8:	e2 0f       	add	r30, r18
    2bba:	f3 1f       	adc	r31, r19
    2bbc:	90 81       	ld	r25, Z
    2bbe:	81 e0       	ldi	r24, 0x01	; 1
    2bc0:	69 2f       	mov	r22, r25
    2bc2:	41 e0       	ldi	r20, 0x01	; 1
    2bc4:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>
		if(Local_PressedKey!=KEY_NOT_PRESSED)break;
    2bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bca:	84 36       	cpi	r24, 0x64	; 100
    2bcc:	39 f4       	brne	.+14     	; 0x2bdc <KPAD_u8GetPressedKey+0x158>
	u8 KPAD_u8State=1;
	u8 KPAD_u8ColumnArray[]= {KPAD_C0_PIN, KPAD_C1_PIN, KPAD_C2_PIN, KPAD_C3_PIN};
	u8 KPAD_u8RowArray[]= {KPAD_R0_PIN, KPAD_R1_PIN, KPAD_R2_PIN, KPAD_R3_PIN};
	u8 user_array [4][4]= USER_NUMBERS;

	for (u8 col=0; col<4; col++){
    2bce:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd0:	8f 5f       	subi	r24, 0xFF	; 255
    2bd2:	8a 83       	std	Y+2, r24	; 0x02
    2bd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd6:	84 30       	cpi	r24, 0x04	; 4
    2bd8:	08 f4       	brcc	.+2      	; 0x2bdc <KPAD_u8GetPressedKey+0x158>
    2bda:	93 cf       	rjmp	.-218    	; 0x2b02 <KPAD_u8GetPressedKey+0x7e>
		}
		DIO_u8SetPinValue(KPAD_PORT,KPAD_u8ColumnArray[col],pinHigh);
		if(Local_PressedKey!=KEY_NOT_PRESSED)break;
	}

	return Local_PressedKey;
    2bdc:	8b 81       	ldd	r24, Y+3	; 0x03
}
    2bde:	a1 96       	adiw	r28, 0x21	; 33
    2be0:	0f b6       	in	r0, 0x3f	; 63
    2be2:	f8 94       	cli
    2be4:	de bf       	out	0x3e, r29	; 62
    2be6:	0f be       	out	0x3f, r0	; 63
    2be8:	cd bf       	out	0x3d, r28	; 61
    2bea:	cf 91       	pop	r28
    2bec:	df 91       	pop	r29
    2bee:	08 95       	ret

00002bf0 <H_BRIDGE_vdStop>:
#include "../../lib/STD_TYPES.h"
#include "../../MCAL/DIO/DIO_interface.h"
#include "H_BRIDGE_config.h"
#include <util/delay.h>

void H_BRIDGE_vdStop(void){
    2bf0:	df 93       	push	r29
    2bf2:	cf 93       	push	r28
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	2e 97       	sbiw	r28, 0x0e	; 14
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_A,pinLow);
    2c04:	80 e0       	ldi	r24, 0x00	; 0
    2c06:	61 e0       	ldi	r22, 0x01	; 1
    2c08:	40 e0       	ldi	r20, 0x00	; 0
    2c0a:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_B,pinLow);
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	62 e0       	ldi	r22, 0x02	; 2
    2c12:	40 e0       	ldi	r20, 0x00	; 0
    2c14:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_C,pinLow);
    2c18:	80 e0       	ldi	r24, 0x00	; 0
    2c1a:	63 e0       	ldi	r22, 0x03	; 3
    2c1c:	40 e0       	ldi	r20, 0x00	; 0
    2c1e:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_D,pinLow);
    2c22:	80 e0       	ldi	r24, 0x00	; 0
    2c24:	64 e0       	ldi	r22, 0x04	; 4
    2c26:	40 e0       	ldi	r20, 0x00	; 0
    2c28:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	a8 ec       	ldi	r26, 0xC8	; 200
    2c32:	b2 e4       	ldi	r27, 0x42	; 66
    2c34:	8b 87       	std	Y+11, r24	; 0x0b
    2c36:	9c 87       	std	Y+12, r25	; 0x0c
    2c38:	ad 87       	std	Y+13, r26	; 0x0d
    2c3a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c44:	20 e0       	ldi	r18, 0x00	; 0
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	4a ef       	ldi	r20, 0xFA	; 250
    2c4a:	54 e4       	ldi	r21, 0x44	; 68
    2c4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c50:	dc 01       	movw	r26, r24
    2c52:	cb 01       	movw	r24, r22
    2c54:	8f 83       	std	Y+7, r24	; 0x07
    2c56:	98 87       	std	Y+8, r25	; 0x08
    2c58:	a9 87       	std	Y+9, r26	; 0x09
    2c5a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c5e:	78 85       	ldd	r23, Y+8	; 0x08
    2c60:	89 85       	ldd	r24, Y+9	; 0x09
    2c62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	40 e8       	ldi	r20, 0x80	; 128
    2c6a:	5f e3       	ldi	r21, 0x3F	; 63
    2c6c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c70:	88 23       	and	r24, r24
    2c72:	2c f4       	brge	.+10     	; 0x2c7e <H_BRIDGE_vdStop+0x8e>
		__ticks = 1;
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	9e 83       	std	Y+6, r25	; 0x06
    2c7a:	8d 83       	std	Y+5, r24	; 0x05
    2c7c:	3f c0       	rjmp	.+126    	; 0x2cfc <H_BRIDGE_vdStop+0x10c>
	else if (__tmp > 65535)
    2c7e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c80:	78 85       	ldd	r23, Y+8	; 0x08
    2c82:	89 85       	ldd	r24, Y+9	; 0x09
    2c84:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c86:	20 e0       	ldi	r18, 0x00	; 0
    2c88:	3f ef       	ldi	r19, 0xFF	; 255
    2c8a:	4f e7       	ldi	r20, 0x7F	; 127
    2c8c:	57 e4       	ldi	r21, 0x47	; 71
    2c8e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c92:	18 16       	cp	r1, r24
    2c94:	4c f5       	brge	.+82     	; 0x2ce8 <H_BRIDGE_vdStop+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	40 e2       	ldi	r20, 0x20	; 32
    2ca4:	51 e4       	ldi	r21, 0x41	; 65
    2ca6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	bc 01       	movw	r22, r24
    2cb0:	cd 01       	movw	r24, r26
    2cb2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb6:	dc 01       	movw	r26, r24
    2cb8:	cb 01       	movw	r24, r22
    2cba:	9e 83       	std	Y+6, r25	; 0x06
    2cbc:	8d 83       	std	Y+5, r24	; 0x05
    2cbe:	0f c0       	rjmp	.+30     	; 0x2cde <H_BRIDGE_vdStop+0xee>
    2cc0:	88 ec       	ldi	r24, 0xC8	; 200
    2cc2:	90 e0       	ldi	r25, 0x00	; 0
    2cc4:	9c 83       	std	Y+4, r25	; 0x04
    2cc6:	8b 83       	std	Y+3, r24	; 0x03
    2cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cca:	9c 81       	ldd	r25, Y+4	; 0x04
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	f1 f7       	brne	.-4      	; 0x2ccc <H_BRIDGE_vdStop+0xdc>
    2cd0:	9c 83       	std	Y+4, r25	; 0x04
    2cd2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    2cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    2cd8:	01 97       	sbiw	r24, 0x01	; 1
    2cda:	9e 83       	std	Y+6, r25	; 0x06
    2cdc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cde:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce2:	00 97       	sbiw	r24, 0x00	; 0
    2ce4:	69 f7       	brne	.-38     	; 0x2cc0 <H_BRIDGE_vdStop+0xd0>
    2ce6:	14 c0       	rjmp	.+40     	; 0x2d10 <H_BRIDGE_vdStop+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ce8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cea:	78 85       	ldd	r23, Y+8	; 0x08
    2cec:	89 85       	ldd	r24, Y+9	; 0x09
    2cee:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cf4:	dc 01       	movw	r26, r24
    2cf6:	cb 01       	movw	r24, r22
    2cf8:	9e 83       	std	Y+6, r25	; 0x06
    2cfa:	8d 83       	std	Y+5, r24	; 0x05
    2cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2d00:	9a 83       	std	Y+2, r25	; 0x02
    2d02:	89 83       	std	Y+1, r24	; 0x01
    2d04:	89 81       	ldd	r24, Y+1	; 0x01
    2d06:	9a 81       	ldd	r25, Y+2	; 0x02
    2d08:	01 97       	sbiw	r24, 0x01	; 1
    2d0a:	f1 f7       	brne	.-4      	; 0x2d08 <H_BRIDGE_vdStop+0x118>
    2d0c:	9a 83       	std	Y+2, r25	; 0x02
    2d0e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(STOP_DELAY_ms);
}
    2d10:	2e 96       	adiw	r28, 0x0e	; 14
    2d12:	0f b6       	in	r0, 0x3f	; 63
    2d14:	f8 94       	cli
    2d16:	de bf       	out	0x3e, r29	; 62
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	cd bf       	out	0x3d, r28	; 61
    2d1c:	cf 91       	pop	r28
    2d1e:	df 91       	pop	r29
    2d20:	08 95       	ret

00002d22 <H_BRIDGE_vdClockWise>:
void H_BRIDGE_vdClockWise(void){
    2d22:	df 93       	push	r29
    2d24:	cf 93       	push	r28
    2d26:	cd b7       	in	r28, 0x3d	; 61
    2d28:	de b7       	in	r29, 0x3e	; 62
    2d2a:	2e 97       	sbiw	r28, 0x0e	; 14
    2d2c:	0f b6       	in	r0, 0x3f	; 63
    2d2e:	f8 94       	cli
    2d30:	de bf       	out	0x3e, r29	; 62
    2d32:	0f be       	out	0x3f, r0	; 63
    2d34:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_C,pinLow);
    2d36:	80 e0       	ldi	r24, 0x00	; 0
    2d38:	63 e0       	ldi	r22, 0x03	; 3
    2d3a:	40 e0       	ldi	r20, 0x00	; 0
    2d3c:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_B,pinLow);
    2d40:	80 e0       	ldi	r24, 0x00	; 0
    2d42:	62 e0       	ldi	r22, 0x02	; 2
    2d44:	40 e0       	ldi	r20, 0x00	; 0
    2d46:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	a8 ec       	ldi	r26, 0xC8	; 200
    2d50:	b2 e4       	ldi	r27, 0x42	; 66
    2d52:	8b 87       	std	Y+11, r24	; 0x0b
    2d54:	9c 87       	std	Y+12, r25	; 0x0c
    2d56:	ad 87       	std	Y+13, r26	; 0x0d
    2d58:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d5a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d5c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d5e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d60:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	4a ef       	ldi	r20, 0xFA	; 250
    2d68:	54 e4       	ldi	r21, 0x44	; 68
    2d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	8f 83       	std	Y+7, r24	; 0x07
    2d74:	98 87       	std	Y+8, r25	; 0x08
    2d76:	a9 87       	std	Y+9, r26	; 0x09
    2d78:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d7c:	78 85       	ldd	r23, Y+8	; 0x08
    2d7e:	89 85       	ldd	r24, Y+9	; 0x09
    2d80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d82:	20 e0       	ldi	r18, 0x00	; 0
    2d84:	30 e0       	ldi	r19, 0x00	; 0
    2d86:	40 e8       	ldi	r20, 0x80	; 128
    2d88:	5f e3       	ldi	r21, 0x3F	; 63
    2d8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d8e:	88 23       	and	r24, r24
    2d90:	2c f4       	brge	.+10     	; 0x2d9c <H_BRIDGE_vdClockWise+0x7a>
		__ticks = 1;
    2d92:	81 e0       	ldi	r24, 0x01	; 1
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	9e 83       	std	Y+6, r25	; 0x06
    2d98:	8d 83       	std	Y+5, r24	; 0x05
    2d9a:	3f c0       	rjmp	.+126    	; 0x2e1a <H_BRIDGE_vdClockWise+0xf8>
	else if (__tmp > 65535)
    2d9c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d9e:	78 85       	ldd	r23, Y+8	; 0x08
    2da0:	89 85       	ldd	r24, Y+9	; 0x09
    2da2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2da4:	20 e0       	ldi	r18, 0x00	; 0
    2da6:	3f ef       	ldi	r19, 0xFF	; 255
    2da8:	4f e7       	ldi	r20, 0x7F	; 127
    2daa:	57 e4       	ldi	r21, 0x47	; 71
    2dac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2db0:	18 16       	cp	r1, r24
    2db2:	4c f5       	brge	.+82     	; 0x2e06 <H_BRIDGE_vdClockWise+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2db4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2db6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2db8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2dba:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dbc:	20 e0       	ldi	r18, 0x00	; 0
    2dbe:	30 e0       	ldi	r19, 0x00	; 0
    2dc0:	40 e2       	ldi	r20, 0x20	; 32
    2dc2:	51 e4       	ldi	r21, 0x41	; 65
    2dc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dc8:	dc 01       	movw	r26, r24
    2dca:	cb 01       	movw	r24, r22
    2dcc:	bc 01       	movw	r22, r24
    2dce:	cd 01       	movw	r24, r26
    2dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	9e 83       	std	Y+6, r25	; 0x06
    2dda:	8d 83       	std	Y+5, r24	; 0x05
    2ddc:	0f c0       	rjmp	.+30     	; 0x2dfc <H_BRIDGE_vdClockWise+0xda>
    2dde:	88 ec       	ldi	r24, 0xC8	; 200
    2de0:	90 e0       	ldi	r25, 0x00	; 0
    2de2:	9c 83       	std	Y+4, r25	; 0x04
    2de4:	8b 83       	std	Y+3, r24	; 0x03
    2de6:	8b 81       	ldd	r24, Y+3	; 0x03
    2de8:	9c 81       	ldd	r25, Y+4	; 0x04
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	f1 f7       	brne	.-4      	; 0x2dea <H_BRIDGE_vdClockWise+0xc8>
    2dee:	9c 83       	std	Y+4, r25	; 0x04
    2df0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2df2:	8d 81       	ldd	r24, Y+5	; 0x05
    2df4:	9e 81       	ldd	r25, Y+6	; 0x06
    2df6:	01 97       	sbiw	r24, 0x01	; 1
    2df8:	9e 83       	std	Y+6, r25	; 0x06
    2dfa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2e00:	00 97       	sbiw	r24, 0x00	; 0
    2e02:	69 f7       	brne	.-38     	; 0x2dde <H_BRIDGE_vdClockWise+0xbc>
    2e04:	14 c0       	rjmp	.+40     	; 0x2e2e <H_BRIDGE_vdClockWise+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e06:	6f 81       	ldd	r22, Y+7	; 0x07
    2e08:	78 85       	ldd	r23, Y+8	; 0x08
    2e0a:	89 85       	ldd	r24, Y+9	; 0x09
    2e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	9e 83       	std	Y+6, r25	; 0x06
    2e18:	8d 83       	std	Y+5, r24	; 0x05
    2e1a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e1c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e1e:	9a 83       	std	Y+2, r25	; 0x02
    2e20:	89 83       	std	Y+1, r24	; 0x01
    2e22:	89 81       	ldd	r24, Y+1	; 0x01
    2e24:	9a 81       	ldd	r25, Y+2	; 0x02
    2e26:	01 97       	sbiw	r24, 0x01	; 1
    2e28:	f1 f7       	brne	.-4      	; 0x2e26 <H_BRIDGE_vdClockWise+0x104>
    2e2a:	9a 83       	std	Y+2, r25	; 0x02
    2e2c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(STOP_DELAY_ms);
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_A,pinHigh);
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	61 e0       	ldi	r22, 0x01	; 1
    2e32:	41 e0       	ldi	r20, 0x01	; 1
    2e34:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_D,pinHigh);
    2e38:	80 e0       	ldi	r24, 0x00	; 0
    2e3a:	64 e0       	ldi	r22, 0x04	; 4
    2e3c:	41 e0       	ldi	r20, 0x01	; 1
    2e3e:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>

}
    2e42:	2e 96       	adiw	r28, 0x0e	; 14
    2e44:	0f b6       	in	r0, 0x3f	; 63
    2e46:	f8 94       	cli
    2e48:	de bf       	out	0x3e, r29	; 62
    2e4a:	0f be       	out	0x3f, r0	; 63
    2e4c:	cd bf       	out	0x3d, r28	; 61
    2e4e:	cf 91       	pop	r28
    2e50:	df 91       	pop	r29
    2e52:	08 95       	ret

00002e54 <H_BRIDGE_vdAntiClockWise>:
void H_BRIDGE_vdAntiClockWise(void){
    2e54:	df 93       	push	r29
    2e56:	cf 93       	push	r28
    2e58:	cd b7       	in	r28, 0x3d	; 61
    2e5a:	de b7       	in	r29, 0x3e	; 62
    2e5c:	2e 97       	sbiw	r28, 0x0e	; 14
    2e5e:	0f b6       	in	r0, 0x3f	; 63
    2e60:	f8 94       	cli
    2e62:	de bf       	out	0x3e, r29	; 62
    2e64:	0f be       	out	0x3f, r0	; 63
    2e66:	cd bf       	out	0x3d, r28	; 61
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_A,pinLow);
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	61 e0       	ldi	r22, 0x01	; 1
    2e6c:	40 e0       	ldi	r20, 0x00	; 0
    2e6e:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_D,pinLow);
    2e72:	80 e0       	ldi	r24, 0x00	; 0
    2e74:	64 e0       	ldi	r22, 0x04	; 4
    2e76:	40 e0       	ldi	r20, 0x00	; 0
    2e78:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>
    2e7c:	80 e0       	ldi	r24, 0x00	; 0
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	a8 ec       	ldi	r26, 0xC8	; 200
    2e82:	b2 e4       	ldi	r27, 0x42	; 66
    2e84:	8b 87       	std	Y+11, r24	; 0x0b
    2e86:	9c 87       	std	Y+12, r25	; 0x0c
    2e88:	ad 87       	std	Y+13, r26	; 0x0d
    2e8a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e90:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e92:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e94:	20 e0       	ldi	r18, 0x00	; 0
    2e96:	30 e0       	ldi	r19, 0x00	; 0
    2e98:	4a ef       	ldi	r20, 0xFA	; 250
    2e9a:	54 e4       	ldi	r21, 0x44	; 68
    2e9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	8f 83       	std	Y+7, r24	; 0x07
    2ea6:	98 87       	std	Y+8, r25	; 0x08
    2ea8:	a9 87       	std	Y+9, r26	; 0x09
    2eaa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eac:	6f 81       	ldd	r22, Y+7	; 0x07
    2eae:	78 85       	ldd	r23, Y+8	; 0x08
    2eb0:	89 85       	ldd	r24, Y+9	; 0x09
    2eb2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	30 e0       	ldi	r19, 0x00	; 0
    2eb8:	40 e8       	ldi	r20, 0x80	; 128
    2eba:	5f e3       	ldi	r21, 0x3F	; 63
    2ebc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ec0:	88 23       	and	r24, r24
    2ec2:	2c f4       	brge	.+10     	; 0x2ece <H_BRIDGE_vdAntiClockWise+0x7a>
		__ticks = 1;
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	9e 83       	std	Y+6, r25	; 0x06
    2eca:	8d 83       	std	Y+5, r24	; 0x05
    2ecc:	3f c0       	rjmp	.+126    	; 0x2f4c <H_BRIDGE_vdAntiClockWise+0xf8>
	else if (__tmp > 65535)
    2ece:	6f 81       	ldd	r22, Y+7	; 0x07
    2ed0:	78 85       	ldd	r23, Y+8	; 0x08
    2ed2:	89 85       	ldd	r24, Y+9	; 0x09
    2ed4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ed6:	20 e0       	ldi	r18, 0x00	; 0
    2ed8:	3f ef       	ldi	r19, 0xFF	; 255
    2eda:	4f e7       	ldi	r20, 0x7F	; 127
    2edc:	57 e4       	ldi	r21, 0x47	; 71
    2ede:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ee2:	18 16       	cp	r1, r24
    2ee4:	4c f5       	brge	.+82     	; 0x2f38 <H_BRIDGE_vdAntiClockWise+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ee6:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee8:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eea:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eec:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	40 e2       	ldi	r20, 0x20	; 32
    2ef4:	51 e4       	ldi	r21, 0x41	; 65
    2ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2efa:	dc 01       	movw	r26, r24
    2efc:	cb 01       	movw	r24, r22
    2efe:	bc 01       	movw	r22, r24
    2f00:	cd 01       	movw	r24, r26
    2f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	9e 83       	std	Y+6, r25	; 0x06
    2f0c:	8d 83       	std	Y+5, r24	; 0x05
    2f0e:	0f c0       	rjmp	.+30     	; 0x2f2e <H_BRIDGE_vdAntiClockWise+0xda>
    2f10:	88 ec       	ldi	r24, 0xC8	; 200
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	9c 83       	std	Y+4, r25	; 0x04
    2f16:	8b 83       	std	Y+3, r24	; 0x03
    2f18:	8b 81       	ldd	r24, Y+3	; 0x03
    2f1a:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1c:	01 97       	sbiw	r24, 0x01	; 1
    2f1e:	f1 f7       	brne	.-4      	; 0x2f1c <H_BRIDGE_vdAntiClockWise+0xc8>
    2f20:	9c 83       	std	Y+4, r25	; 0x04
    2f22:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f24:	8d 81       	ldd	r24, Y+5	; 0x05
    2f26:	9e 81       	ldd	r25, Y+6	; 0x06
    2f28:	01 97       	sbiw	r24, 0x01	; 1
    2f2a:	9e 83       	std	Y+6, r25	; 0x06
    2f2c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2f30:	9e 81       	ldd	r25, Y+6	; 0x06
    2f32:	00 97       	sbiw	r24, 0x00	; 0
    2f34:	69 f7       	brne	.-38     	; 0x2f10 <H_BRIDGE_vdAntiClockWise+0xbc>
    2f36:	14 c0       	rjmp	.+40     	; 0x2f60 <H_BRIDGE_vdAntiClockWise+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f38:	6f 81       	ldd	r22, Y+7	; 0x07
    2f3a:	78 85       	ldd	r23, Y+8	; 0x08
    2f3c:	89 85       	ldd	r24, Y+9	; 0x09
    2f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f40:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	9e 83       	std	Y+6, r25	; 0x06
    2f4a:	8d 83       	std	Y+5, r24	; 0x05
    2f4c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f4e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f50:	9a 83       	std	Y+2, r25	; 0x02
    2f52:	89 83       	std	Y+1, r24	; 0x01
    2f54:	89 81       	ldd	r24, Y+1	; 0x01
    2f56:	9a 81       	ldd	r25, Y+2	; 0x02
    2f58:	01 97       	sbiw	r24, 0x01	; 1
    2f5a:	f1 f7       	brne	.-4      	; 0x2f58 <H_BRIDGE_vdAntiClockWise+0x104>
    2f5c:	9a 83       	std	Y+2, r25	; 0x02
    2f5e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(STOP_DELAY_ms);
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_C,pinHigh);
    2f60:	80 e0       	ldi	r24, 0x00	; 0
    2f62:	63 e0       	ldi	r22, 0x03	; 3
    2f64:	41 e0       	ldi	r20, 0x01	; 1
    2f66:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(BASE_PORT,BASE_PIN_B,pinHigh);
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	62 e0       	ldi	r22, 0x02	; 2
    2f6e:	41 e0       	ldi	r20, 0x01	; 1
    2f70:	0e 94 63 0d 	call	0x1ac6	; 0x1ac6 <DIO_u8SetPinValue>
}
    2f74:	2e 96       	adiw	r28, 0x0e	; 14
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	de bf       	out	0x3e, r29	; 62
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	cd bf       	out	0x3d, r28	; 61
    2f80:	cf 91       	pop	r28
    2f82:	df 91       	pop	r29
    2f84:	08 95       	ret

00002f86 <EEPROM_vdSendData>:
#include "../../lib/BIT_MATH.h"
#include "../../lib/STD_TYPES.h"
#include "../../MCAL/I2C/I2C_interface.h"

void EEPROM_vdSendData(u8 Copy_u8Block, u8 Copy_u8Address, u8 Copy_u8Data){
    2f86:	df 93       	push	r29
    2f88:	cf 93       	push	r28
    2f8a:	00 d0       	rcall	.+0      	; 0x2f8c <EEPROM_vdSendData+0x6>
    2f8c:	0f 92       	push	r0
    2f8e:	cd b7       	in	r28, 0x3d	; 61
    2f90:	de b7       	in	r29, 0x3e	; 62
    2f92:	89 83       	std	Y+1, r24	; 0x01
    2f94:	6a 83       	std	Y+2, r22	; 0x02
    2f96:	4b 83       	std	Y+3, r20	; 0x03
	Copy_u8Block = (0b10101<<3) | (Copy_u8Block) ;
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	88 6a       	ori	r24, 0xA8	; 168
    2f9c:	89 83       	std	Y+1, r24	; 0x01
	TWI_u8StartCondition();
    2f9e:	0e 94 bf 09 	call	0x137e	; 0x137e <TWI_u8StartCondition>
	TWI_vdMasterSendAddress(Copy_u8Block, MasterWrite);
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	60 e0       	ldi	r22, 0x00	; 0
    2fa6:	0e 94 2d 0a 	call	0x145a	; 0x145a <TWI_vdMasterSendAddress>
	TWI_u8MasterSendData(Copy_u8Address);
    2faa:	8a 81       	ldd	r24, Y+2	; 0x02
    2fac:	0e 94 86 0a 	call	0x150c	; 0x150c <TWI_u8MasterSendData>
	TWI_u8MasterSendData(Copy_u8Data);
    2fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    2fb2:	0e 94 86 0a 	call	0x150c	; 0x150c <TWI_u8MasterSendData>
	TWI_u8StopCondition();
    2fb6:	0e 94 13 0a 	call	0x1426	; 0x1426 <TWI_u8StopCondition>
}
    2fba:	0f 90       	pop	r0
    2fbc:	0f 90       	pop	r0
    2fbe:	0f 90       	pop	r0
    2fc0:	cf 91       	pop	r28
    2fc2:	df 91       	pop	r29
    2fc4:	08 95       	ret

00002fc6 <EEPROM_vdReadData>:
u8	EEPROM_vdReadData(u8 Copy_u8Block, u8 Copy_u8Address){
    2fc6:	df 93       	push	r29
    2fc8:	cf 93       	push	r28
    2fca:	00 d0       	rcall	.+0      	; 0x2fcc <EEPROM_vdReadData+0x6>
    2fcc:	0f 92       	push	r0
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62
    2fd2:	8a 83       	std	Y+2, r24	; 0x02
    2fd4:	6b 83       	std	Y+3, r22	; 0x03
	u8 Data=0;
    2fd6:	19 82       	std	Y+1, r1	; 0x01
	Copy_u8Address |=Copy_u8Block<<6;
    2fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fda:	88 2f       	mov	r24, r24
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	00 24       	eor	r0, r0
    2fe0:	96 95       	lsr	r25
    2fe2:	87 95       	ror	r24
    2fe4:	07 94       	ror	r0
    2fe6:	96 95       	lsr	r25
    2fe8:	87 95       	ror	r24
    2fea:	07 94       	ror	r0
    2fec:	98 2f       	mov	r25, r24
    2fee:	80 2d       	mov	r24, r0
    2ff0:	98 2f       	mov	r25, r24
    2ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff4:	89 2b       	or	r24, r25
    2ff6:	8b 83       	std	Y+3, r24	; 0x03
	Copy_u8Block = (0b10101<<4) | (Copy_u8Block<<1) | 0;
    2ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffa:	88 2f       	mov	r24, r24
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	88 0f       	add	r24, r24
    3000:	99 1f       	adc	r25, r25
    3002:	80 65       	ori	r24, 0x50	; 80
    3004:	8a 83       	std	Y+2, r24	; 0x02
	TWI_u8StartCondition();
    3006:	0e 94 bf 09 	call	0x137e	; 0x137e <TWI_u8StartCondition>
	TWI_vdMasterSendAddress(Copy_u8Block, MasterWrite);
    300a:	8a 81       	ldd	r24, Y+2	; 0x02
    300c:	60 e0       	ldi	r22, 0x00	; 0
    300e:	0e 94 2d 0a 	call	0x145a	; 0x145a <TWI_vdMasterSendAddress>
	TWI_u8MasterSendData(Copy_u8Address);
    3012:	8b 81       	ldd	r24, Y+3	; 0x03
    3014:	0e 94 86 0a 	call	0x150c	; 0x150c <TWI_u8MasterSendData>
	TWI_u8RepeatedStartCondition();
    3018:	0e 94 e9 09 	call	0x13d2	; 0x13d2 <TWI_u8RepeatedStartCondition>
	TWI_vdMasterSendAddress(Copy_u8Block, MasterRead);
    301c:	8a 81       	ldd	r24, Y+2	; 0x02
    301e:	61 e0       	ldi	r22, 0x01	; 1
    3020:	0e 94 2d 0a 	call	0x145a	; 0x145a <TWI_vdMasterSendAddress>
	TWI_u8MasterRecieveData(&Data);
    3024:	ce 01       	movw	r24, r28
    3026:	01 96       	adiw	r24, 0x01	; 1
    3028:	0e 94 ba 0a 	call	0x1574	; 0x1574 <TWI_u8MasterRecieveData>
	TWI_u8StopCondition();
    302c:	0e 94 13 0a 	call	0x1426	; 0x1426 <TWI_u8StopCondition>
	return Data;
    3030:	89 81       	ldd	r24, Y+1	; 0x01
}
    3032:	0f 90       	pop	r0
    3034:	0f 90       	pop	r0
    3036:	0f 90       	pop	r0
    3038:	cf 91       	pop	r28
    303a:	df 91       	pop	r29
    303c:	08 95       	ret

0000303e <main>:
 *
 *  Created on: Mar 24, 2022
 *      Author: Moaz Mahmoud
 */

int main(){
    303e:	df 93       	push	r29
    3040:	cf 93       	push	r28
    3042:	cd b7       	in	r28, 0x3d	; 61
    3044:	de b7       	in	r29, 0x3e	; 62
    3046:	80 e0       	ldi	r24, 0x00	; 0
    3048:	90 e0       	ldi	r25, 0x00	; 0

}
    304a:	cf 91       	pop	r28
    304c:	df 91       	pop	r29
    304e:	08 95       	ret

00003050 <__mulsi3>:
    3050:	62 9f       	mul	r22, r18
    3052:	d0 01       	movw	r26, r0
    3054:	73 9f       	mul	r23, r19
    3056:	f0 01       	movw	r30, r0
    3058:	82 9f       	mul	r24, r18
    305a:	e0 0d       	add	r30, r0
    305c:	f1 1d       	adc	r31, r1
    305e:	64 9f       	mul	r22, r20
    3060:	e0 0d       	add	r30, r0
    3062:	f1 1d       	adc	r31, r1
    3064:	92 9f       	mul	r25, r18
    3066:	f0 0d       	add	r31, r0
    3068:	83 9f       	mul	r24, r19
    306a:	f0 0d       	add	r31, r0
    306c:	74 9f       	mul	r23, r20
    306e:	f0 0d       	add	r31, r0
    3070:	65 9f       	mul	r22, r21
    3072:	f0 0d       	add	r31, r0
    3074:	99 27       	eor	r25, r25
    3076:	72 9f       	mul	r23, r18
    3078:	b0 0d       	add	r27, r0
    307a:	e1 1d       	adc	r30, r1
    307c:	f9 1f       	adc	r31, r25
    307e:	63 9f       	mul	r22, r19
    3080:	b0 0d       	add	r27, r0
    3082:	e1 1d       	adc	r30, r1
    3084:	f9 1f       	adc	r31, r25
    3086:	bd 01       	movw	r22, r26
    3088:	cf 01       	movw	r24, r30
    308a:	11 24       	eor	r1, r1
    308c:	08 95       	ret

0000308e <__divmodsi4>:
    308e:	97 fb       	bst	r25, 7
    3090:	09 2e       	mov	r0, r25
    3092:	05 26       	eor	r0, r21
    3094:	0e d0       	rcall	.+28     	; 0x30b2 <__divmodsi4_neg1>
    3096:	57 fd       	sbrc	r21, 7
    3098:	04 d0       	rcall	.+8      	; 0x30a2 <__divmodsi4_neg2>
    309a:	14 d0       	rcall	.+40     	; 0x30c4 <__udivmodsi4>
    309c:	0a d0       	rcall	.+20     	; 0x30b2 <__divmodsi4_neg1>
    309e:	00 1c       	adc	r0, r0
    30a0:	38 f4       	brcc	.+14     	; 0x30b0 <__divmodsi4_exit>

000030a2 <__divmodsi4_neg2>:
    30a2:	50 95       	com	r21
    30a4:	40 95       	com	r20
    30a6:	30 95       	com	r19
    30a8:	21 95       	neg	r18
    30aa:	3f 4f       	sbci	r19, 0xFF	; 255
    30ac:	4f 4f       	sbci	r20, 0xFF	; 255
    30ae:	5f 4f       	sbci	r21, 0xFF	; 255

000030b0 <__divmodsi4_exit>:
    30b0:	08 95       	ret

000030b2 <__divmodsi4_neg1>:
    30b2:	f6 f7       	brtc	.-4      	; 0x30b0 <__divmodsi4_exit>
    30b4:	90 95       	com	r25
    30b6:	80 95       	com	r24
    30b8:	70 95       	com	r23
    30ba:	61 95       	neg	r22
    30bc:	7f 4f       	sbci	r23, 0xFF	; 255
    30be:	8f 4f       	sbci	r24, 0xFF	; 255
    30c0:	9f 4f       	sbci	r25, 0xFF	; 255
    30c2:	08 95       	ret

000030c4 <__udivmodsi4>:
    30c4:	a1 e2       	ldi	r26, 0x21	; 33
    30c6:	1a 2e       	mov	r1, r26
    30c8:	aa 1b       	sub	r26, r26
    30ca:	bb 1b       	sub	r27, r27
    30cc:	fd 01       	movw	r30, r26
    30ce:	0d c0       	rjmp	.+26     	; 0x30ea <__udivmodsi4_ep>

000030d0 <__udivmodsi4_loop>:
    30d0:	aa 1f       	adc	r26, r26
    30d2:	bb 1f       	adc	r27, r27
    30d4:	ee 1f       	adc	r30, r30
    30d6:	ff 1f       	adc	r31, r31
    30d8:	a2 17       	cp	r26, r18
    30da:	b3 07       	cpc	r27, r19
    30dc:	e4 07       	cpc	r30, r20
    30de:	f5 07       	cpc	r31, r21
    30e0:	20 f0       	brcs	.+8      	; 0x30ea <__udivmodsi4_ep>
    30e2:	a2 1b       	sub	r26, r18
    30e4:	b3 0b       	sbc	r27, r19
    30e6:	e4 0b       	sbc	r30, r20
    30e8:	f5 0b       	sbc	r31, r21

000030ea <__udivmodsi4_ep>:
    30ea:	66 1f       	adc	r22, r22
    30ec:	77 1f       	adc	r23, r23
    30ee:	88 1f       	adc	r24, r24
    30f0:	99 1f       	adc	r25, r25
    30f2:	1a 94       	dec	r1
    30f4:	69 f7       	brne	.-38     	; 0x30d0 <__udivmodsi4_loop>
    30f6:	60 95       	com	r22
    30f8:	70 95       	com	r23
    30fa:	80 95       	com	r24
    30fc:	90 95       	com	r25
    30fe:	9b 01       	movw	r18, r22
    3100:	ac 01       	movw	r20, r24
    3102:	bd 01       	movw	r22, r26
    3104:	cf 01       	movw	r24, r30
    3106:	08 95       	ret

00003108 <__prologue_saves__>:
    3108:	2f 92       	push	r2
    310a:	3f 92       	push	r3
    310c:	4f 92       	push	r4
    310e:	5f 92       	push	r5
    3110:	6f 92       	push	r6
    3112:	7f 92       	push	r7
    3114:	8f 92       	push	r8
    3116:	9f 92       	push	r9
    3118:	af 92       	push	r10
    311a:	bf 92       	push	r11
    311c:	cf 92       	push	r12
    311e:	df 92       	push	r13
    3120:	ef 92       	push	r14
    3122:	ff 92       	push	r15
    3124:	0f 93       	push	r16
    3126:	1f 93       	push	r17
    3128:	cf 93       	push	r28
    312a:	df 93       	push	r29
    312c:	cd b7       	in	r28, 0x3d	; 61
    312e:	de b7       	in	r29, 0x3e	; 62
    3130:	ca 1b       	sub	r28, r26
    3132:	db 0b       	sbc	r29, r27
    3134:	0f b6       	in	r0, 0x3f	; 63
    3136:	f8 94       	cli
    3138:	de bf       	out	0x3e, r29	; 62
    313a:	0f be       	out	0x3f, r0	; 63
    313c:	cd bf       	out	0x3d, r28	; 61
    313e:	09 94       	ijmp

00003140 <__epilogue_restores__>:
    3140:	2a 88       	ldd	r2, Y+18	; 0x12
    3142:	39 88       	ldd	r3, Y+17	; 0x11
    3144:	48 88       	ldd	r4, Y+16	; 0x10
    3146:	5f 84       	ldd	r5, Y+15	; 0x0f
    3148:	6e 84       	ldd	r6, Y+14	; 0x0e
    314a:	7d 84       	ldd	r7, Y+13	; 0x0d
    314c:	8c 84       	ldd	r8, Y+12	; 0x0c
    314e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3150:	aa 84       	ldd	r10, Y+10	; 0x0a
    3152:	b9 84       	ldd	r11, Y+9	; 0x09
    3154:	c8 84       	ldd	r12, Y+8	; 0x08
    3156:	df 80       	ldd	r13, Y+7	; 0x07
    3158:	ee 80       	ldd	r14, Y+6	; 0x06
    315a:	fd 80       	ldd	r15, Y+5	; 0x05
    315c:	0c 81       	ldd	r16, Y+4	; 0x04
    315e:	1b 81       	ldd	r17, Y+3	; 0x03
    3160:	aa 81       	ldd	r26, Y+2	; 0x02
    3162:	b9 81       	ldd	r27, Y+1	; 0x01
    3164:	ce 0f       	add	r28, r30
    3166:	d1 1d       	adc	r29, r1
    3168:	0f b6       	in	r0, 0x3f	; 63
    316a:	f8 94       	cli
    316c:	de bf       	out	0x3e, r29	; 62
    316e:	0f be       	out	0x3f, r0	; 63
    3170:	cd bf       	out	0x3d, r28	; 61
    3172:	ed 01       	movw	r28, r26
    3174:	08 95       	ret

00003176 <_exit>:
    3176:	f8 94       	cli

00003178 <__stop_program>:
    3178:	ff cf       	rjmp	.-2      	; 0x3178 <__stop_program>
